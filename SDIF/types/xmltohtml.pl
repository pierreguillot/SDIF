#!/usr/bin/perl

use XML::Node;
use HTML::Stream qw(:funcs);
use English;


my $version    = '';
my $framesig   = '';
my $framename  = '';
my $matrixsig  = '';
my $matrixname = '';
my $rownum     = '';
my $rowmin     = '';
my $rowmax     = '';
my $colname    = '';
my $colunit    = '';
my $refsig     = '';
my $refocc     = '';
my $text       = '';	# text for all descriptions and refs
my @columns    = ();
my @components = ();

my %matrixnames = ();
#later my %matrixroles = ();


# init
$h   = new HTML::Stream \*STDOUT;
$xml = new XML::Node;


# html setup
my @copiedhtmltags = qw(i b);
my %tagmap = (# section => 'H2', 
	      map { (uc $_, uc $_, lc $_, uc $_ ) } @copiedhtmltags);
# register XML->HTML tag mapping handlers
for (keys %tagmap)
{
    $xml->register ($_, char => \&tagmapper);
}

# header handler
$xml->register (">sdif-tdl", start => \&header);
$xml->register (">sdif-tdl", end   => \&footer);
$xml->register (">sdif-tdl:types-version", attr => \$version);

# row/column handlers
$xml->register ("rows:num",    attr => \$rownum);
$xml->register ("rows:min",    attr => \$rowmin);
$xml->register ("rows:max",    attr => \$rowmax);
$xml->register ("rows",        start=> \&row_start);
$xml->register ("rows",        char => \&out_char);
$xml->register ("rows",        end  => \&row_end);
$xml->register ("column",      start=> \&column_start);
$xml->register ("column",      char => \&out_char);
$xml->register ("column",      end  => \&column_end);
$xml->register ("column:name", attr => \$colname);
$xml->register ("column:unit", attr => \$colunit);

# matrix handlers, free or in frame
$xml->register ("matrix:signature", attr => \$matrixsig);
$xml->register ("matrix:name",      attr => \$matrixname);
$xml->register ("matrix",	    start=> \&matrix_start);
$xml->register ("matrix",	    end  => \&matrix_end);

# matrix in frame
$xml->register (">sdif-tdl>frame>matrixref:occurrence", attr  => \$refocc);
$xml->register (">sdif-tdl>frame>matrixref",            start => \&addmatrix);
$xml->register (">sdif-tdl>frame>matrixref",            char  => \&out_char);
# todo: heed roles

# frame handlers
$xml->register (">sdif-tdl>frame:signature", attr => \$framesig);
$xml->register (">sdif-tdl>frame:name",      attr => \$framename);
$xml->register (">sdif-tdl>frame",	     start=> \&frame_start);
$xml->register (">sdif-tdl>frame",	     end  => \&frame_end);

# references in text
$xml->register ("matrixref:signature", attr  => \$refsig);
$xml->register ("matrixref",	       char  => \&matrixref_char);
		# no tags in ref text!

$xml->register ("description", start => \&description_start);
$xml->register ("description", char  => \&out_char);
$xml->register ("description", end   => \&description_end);
$xml->register ("section",     char  => sub { $h->BR->BR->H2->t($_[1])->_H2->HR;});


# process all input files
for (@ARGV)
{
    $xml->parsefile ($_);
}

# end of main




sub tagmapper
{
    my $tag = $tagmap{$xml->{CURRENT_TAG}};
    $h->tag ($tag)      if $tag;
    $h->text($_[1]);
    $h->tag ("_$tag")   if $tag; 
    $h->text("\n");
}


sub out_char
{
    $h->t($_[1]);
}

sub header
{
    $h->HTML->TITLE->t("Standard SDIF Types")->_TITLE;
    $h->BODY(bgcolor => "#ffffff")->H1->t("Standard SDIF Types")->_H1;
    $version  &&  $h->t("SDIF Types Version = $version")->P;
}

sub footer
{
    $h->HR->ADDRESS->t("Document generated by $PROGRAM_NAME from @ARGV at " . localtime)
      ->_ADDRESS;
    $h->BR->BR->BR->BR->BR->BR->BR->BR->BR->BR->BR->BR->BR->BR->BR->BR->BR;
    $h->_BODY->_HTML;
}


sub row_start
{
    $h->DL->DT->I->t("Rows:");
    $rownum  &&  $h->t(" number=$rownum");
    $h->_I->DD;

    $rownum = '';
};

sub row_end
{
    $h->_DD->_DL;

    push @columns, $colname;
    $colname = '';
    $colunit = '';
};

sub column_start
{
    !$colhead  && $h->DL->DT->I->t("Columns:")->_I->_DL->OL;
    $h->LI->B->t("$colname ")->_B;
    $colunit  &&  $h->I->t("[$colunit] ")->_I;
    $colhead = 1;
};

sub column_end
{
    push @columns, $colname;
    $colname = '';
    $colunit = '';
};

sub matrix_start
{
    $h->BR->A(name => "Matrix_$matrixsig")
      ->H3->t("Matrix $matrixsig $matrixname")->_H3->_A;
}

sub matrix_end
{
    $colhead     &&  $h->_OL;
    $text  &&  $h->DL->DT->I->t("Description:")->_I->DD->t($text)->_DD->_DL;
    $h->HR;
    # todo: text before columns

    $matrixnames{$matrixsig} = $matrixname;
    @columns    = ();
    $matrixsig  = ''; 
    $matrixname = ''; 
    $text = '';
    $colhead = 0;
}


sub matrixref
{
    $h->A(href => "#Matrix_$matrixref")->t("Matrix $matrixsig $matrixname")->_A;
    $matrixref = '';
}

sub frame_start
{
    $h->BR->A(name => "Frame_$framesig")->H3
      ->t("Frame $framesig $framename")->_H3->_A;
}

sub frame_end
{
    $mathead  &&  $h->_UL->_DL;
    $mathead = 0;

    $framesig   = '';
    $framename  = '';
    $text  = '';

}

sub addmatrix
{
    !$mathead  &&  $h->DL->DT->I->t("Matrices:")->_I->DD->UL;
    $h->LI->A(href => "#Matrix_$refsig")->t("$refsig $matrixnames{$refsig}")->_A;
    $h->I->t(" $refocc ")->_I;

    $mathead = 1;
    $refsig = '';
    $refocc = '';
    $text = '';
}

sub matrixref_char
{
    $h->A(HREF=>"#Matrix_$refsig")->t($_[1])->_A;    
    $refsig = '';
}

sub description_start
{
    $h->DL->DT->I->t("Description:")->_I->DD;
    $text = '';
}

sub description_end
{
    $h->_DD->_DL;
}
