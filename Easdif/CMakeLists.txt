PROJECT(EaSDIF)

MESSAGE("===============================================================")
MESSAGE("== Configuring Easdif")
MESSAGE("===============================================================")

SET(PACKAGE "\"Easdif\"")

SET(EASDIF_VERSION_MAJ 1)
SET(EASDIF_VERSION_MIN 2)
SET(EASDIF_VERSION_RELEASE 7)
SET(EASDIF_VERSION  "${EASDIF_VERSION_MAJ}.${EASDIF_VERSION_MIN}.${EASDIF_VERSION_RELEASE}")



SET(CMAKE_VERBOSE_MAKEFILE false)
SET(CMAKE_SKIP_RPATH OFF)
SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmModules)




# # prevent the use of the autoconf default values 
# # we impose our own handling
# EXTERNAL_CXXFLAGS=$CXXFLAGS

# AM_INIT_AUTOMAKE($PACKAGE,$VERSION)

# AM_CONFIG_HEADER(easdif/easdif_config.hpp)


############################################################
# Checks for programs.

FIND_PROGRAM(HAVEDOT NAMES dot )


## Configure SDIF

MESSAGE("CHECK FOR HEADERS")
INCLUDE(CheckIncludeFile)

CHECK_INCLUDE_FILE(stdint.h    HAVE_STDINT_H)
CHECK_INCLUDE_FILE(stdlib.h    HAVE_STDLIB_H)
CHECK_INCLUDE_FILE(stdarg.h    HAVE_STDARG_H)
CHECK_INCLUDE_FILE(dlfcn.h     HAVE_DLFCN_H)
CHECK_INCLUDE_FILE(string.h    HAVE_STRING_H)
CHECK_INCLUDE_FILE(strings.h   HAVE_STRINGS_H)
CHECK_INCLUDE_FILE(inttypes.h  HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(memory.h    HAVE_MEMORY_H)
CHECK_INCLUDE_FILE(float.h     HAVE_FLOAT_H)
CHECK_INCLUDE_FILE(sys/stat.h  HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE(errno.h     HAVE_ERRNO_H)
CHECK_INCLUDE_FILE(unistd.h    HAVE_UNISTD_H)

# only very rough test
IF(HAVE_STDLIB_H AND HAVE_STDARG_H AND HAVE_STRING_H AND HAVE_FLOAT_H)
SET(STDC_HEADERS 1)
ENDIF(HAVE_STDLIB_H AND HAVE_STDARG_H AND HAVE_STRING_H AND HAVE_FLOAT_H)

INCLUDE(CheckFunctionExists)
CHECK_FUNCTION_EXISTS(getenv HAVE_GETENV)
CHECK_FUNCTION_EXISTS(ftruncate HAVE_FTRUNCATE)

INCLUDE(FindThreads)
OPTION(USE_THREADS "Enable threads" ON)

IF(USE_THREADS)
  IF(CMAKE_USE_PTHREADS_INIT)
    ADD_DEFINITIONS(-DHAVE_PTHREAD)
    SET(HAVE_PTHREAD 1)
    LINK_LIBRARIES (${CMAKE_THREAD_LIBS_INIT})
  ENDIF(CMAKE_USE_PTHREADS_INIT)
ENDIF(USE_THREADS)


############################################################
# Particular compiler characteristics
MESSAGE("PARTICULAR COMPILER CHARACTERISTICS")
#dnl Check for BigEndian (WORDS_BIGENDIAN)
INCLUDE(TestBigEndian)
TEST_BIG_ENDIAN(WORDS_BIGENDIAN)

#dnl Check for Long 64 bits
INCLUDE(CHECK_SIZEOF)
CHECK_SIZEOF(long 4)
#AC_CHECK_SIZEOF(long)
	

# EaSDIF Configure
IF   (CMAKE_BUILD_TYPE MATCHES debug)
  SET(DEBUGEXT -debug)
ELSE (CMAKE_BUILD_TYPE MATCHES debug)
  SET(DEBUGEXT )
ENDIF(CMAKE_BUILD_TYPE MATCHES debug)

SET(CMAKE_C_COMPILER ${CMAKE_CXX_COMPILER} )
INCLUDE(CheckIncludeFileCXX)
CHECK_INCLUDE_FILE_CXX(sstream HAVE_SSTREAM)
CHECK_INCLUDE_FILE_CXX(strstream HAVE_STRSTREAM)


############################################################
# dnl find SDIF objects that have to be included into Easdif
# AC_MSG_RESULT(FIND SDIF FILES)
# AC_SUBST(SDIFCPPLIB)
# SDIFCPPLIB=../SDIF/sdifcpp/libsdif-cpp.la

SET(PACKAGE_SAVE ${PACKAGE})
SET(VERSION_SAVE ${VERSION})

FILE(READ SDIF/configure.in SDIFCONFIG)

STRING(REGEX MATCH "PACKAGE=[^ \t\n\r]*" SDIFPACKAGE ${SDIFCONFIG})
STRING(REGEX REPLACE "PACKAGE=" "" TMP ${SDIFPACKAGE})
SET(PACKAGE "\"${TMP}\"")
STRING(REGEX MATCH "SDIF_VERSION_MAJOR=[^ \t\n\r]*" TMP ${SDIFCONFIG})
STRING(REGEX REPLACE "SDIF_VERSION_MAJOR=" "" SDIF_VERSION_MAJOR ${TMP})
STRING(REGEX MATCH "SDIF_VERSION_MINOR=[^ \t\n\r]*" TMP ${SDIFCONFIG})
STRING(REGEX REPLACE "SDIF_VERSION_MINOR=" "" SDIF_VERSION_MINOR ${TMP})
STRING(REGEX MATCH "SDIF_VERSION_RELEASE=[^ \t\n\r]*" TMP ${SDIFCONFIG})
STRING(REGEX REPLACE "SDIF_VERSION_RELEASE=" "" SDIF_VERSION_RELEASE ${TMP})
MESSAGE("SDIF VERSION = ${SDIF_VERSION_MAJOR}.${SDIF_VERSION_MINOR}.${SDIF_VERSION_RELEASE}")
SET(VERSION "\"${SDIF_VERSION_MAJOR}.${SDIF_VERSION_MINOR}.${SDIF_VERSION_RELEASE}\"")


#CONFIGURE_FILE(SDIF/sdif/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config/config.h)
FILE(READ ${CMAKE_CURRENT_SOURCE_DIR}/SDIF/sdif/config.h.in CONFIG)
STRING(REGEX REPLACE "#undef[ \t]*\([^ \t\n\r]*\)" "#cmakedefine \\1 @\\1@" SDIFCMCONFIG ${CONFIG})
STRING(CONFIGURE ${SDIFCMCONFIG} SDIFCMCONFIGURED)

IF(EXISTS ${CMAKE_CURRENT_BINARY_DIR}/config/config.h)
  FILE(READ ${CMAKE_CURRENT_BINARY_DIR}/config/config.h CURRENTCONFIG)
ENDIF(EXISTS ${CMAKE_CURRENT_BINARY_DIR}/config/config.h)

IF(NOT "${CURRENTCONFIG}" STREQUAL "${SDIFCMCONFIGURED}")
  MESSAGE("Writing sdif config")
  FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/config/config.h ${SDIFCMCONFIGURED})
ENDIF(NOT "${CURRENTCONFIG}" STREQUAL "${SDIFCMCONFIGURED}")


SET(VERSION "${SDIF_VERSION_MAJOR}.${SDIF_VERSION_MINOR}.${SDIF_VERSION_RELEASE}")
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/SDIF/include/sdif_version.h.in ${CMAKE_CURRENT_BINARY_DIR}/sdifconfig/sdif_version.h)

SET(PACKAGE ${PACKAGE_SAVE})

SET(VERSION "\"${EASDIF_VERSION_MAJ}.${EASDIF_VERSION_MIN}.${EASDIF_VERSION_RELEASE}\"")

#CONFIGURE_FILE(easdif/easdif_config.hpp.in ${CMAKE_BINARY_DIR}/easdif/easdif_config.hpp)
FILE(READ ${CMAKE_CURRENT_SOURCE_DIR}/easdif/easdif_config.hpp.in CONFIG)
STRING(REGEX REPLACE "#undef[ \t]*\([^ \t\n\r]*\)" "#cmakedefine \\1 @\\1@" EASDIFCMCONFIG ${CONFIG})
#FILE(WRITE ${CMAKE_BINARY_DIR}/config/config.h.cmake ${SDIFCMCONFIG})
STRING(CONFIGURE ${EASDIFCMCONFIG} EASDIFCMCONFIGURED)
IF(EXISTS  ${CMAKE_CURRENT_BINARY_DIR}/easdif/easdif_config.hpp)
  FILE(READ ${CMAKE_CURRENT_BINARY_DIR}/easdif/easdif_config.hpp CURRENTCONFIG)
ENDIF(EXISTS  ${CMAKE_CURRENT_BINARY_DIR}/easdif/easdif_config.hpp)

IF(NOT "${CURRENTCONFIG}" STREQUAL "${EASDIFCMCONFIGURED}")
  MESSAGE("Writing Easdif config")
  FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/easdif/easdif_config.hpp ${EASDIFCMCONFIGURED})
ENDIF(NOT "${CURRENTCONFIG}" STREQUAL "${EASDIFCMCONFIGURED}")

SET(VERSION "${EASDIF_VERSION_MAJ}.${EASDIF_VERSION_MIN}.${EASDIF_VERSION_RELEASE}")
CONFIGURE_FILE(easdif/easdif_version.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/easdif/easdif_version.hpp)
CONFIGURE_FILE(easdif/easdifintro.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/easdif/easdifintro.hpp)
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)

IF(APPLE)
  INCLUDE(REDIRECT_COMPILERS_TO_SYSROOT OPTIONAL)
ENDIF(APPLE)

# set default values for build type and install prefix
INCLUDE(SET_LOCAL_DEFAULTS OPTIONAL)

INCLUDE(GET_ARCH)

IF   ( "$ENV{SYS}" STREQUAL "" )
  SET(ARCHDIR ${ARCH})
  SET(INSTALL_LIB_DIR  /lib)
  SET(INSTALL_BIN_DIR  /bin)
ELSE ( "$ENV{SYS}" STREQUAL "" )
  SET(ARCHDIR $ENV{SYS})
  SET(INSTALL_LIB_DIR /lib/$ENV{SYS})
  SET(INSTALL_BIN_DIR /bin/$ENV{SYS})
ENDIF( "$ENV{SYS}" STREQUAL "" )

SET(INSTALL_INC_DIR /include)


# include special traget to remove cache, system and compiler info
IF(CMAKE_GENERATOR MATCHES "^Unix Makefiles")
  INCLUDE(CLEAN_CMAKE)
  INCLUDE(CVS_Targets)
  INCLUDE(BuildTypeTargets)
ENDIF(CMAKE_GENERATOR MATCHES "^Unix Makefiles")

ADD_DEFINITIONS("-DHAVE_CONFIG_H")

ADD_CUSTOM_TARGET(lib)
ADD_DEPENDENCIES(lib Easdif${DEBUGEXT})

INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR}/sdifconfig ${CMAKE_CURRENT_BINARY_DIR}/config ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/SDIF/include ${CMAKE_CURRENT_SOURCE_DIR}  )


ADD_SUBDIRECTORY( easdif ) 
ADD_SUBDIRECTORY( test ) 



########### install files ###############
IF(PKGCONFIGDIR STREQUAL default )
SET(PKGCONFIGDIR ${CMAKE_INSTALL_PREFIX}${INSTALL_LIB_DIR}/pkgconfig CACHE PATH "install path for pkgconfig support files" FORCE)
ELSE(PKGCONFIGDIR STREQUAL default )
SET(PKGCONFIGDIR ${CMAKE_INSTALL_PREFIX}${INSTALL_LIB_DIR}/pkgconfig CACHE PATH "install path for pkgconfig support files")
ENDIF(PKGCONFIGDIR STREQUAL default )


MESSAGE("Installation in:")
MESSAGE("Prefix         : ${CMAKE_INSTALL_PREFIX}")
MESSAGE("bin            : ${CMAKE_INSTALL_PREFIX}${INSTALL_BIN_DIR}")
MESSAGE("lib            : ${CMAKE_INSTALL_PREFIX}${INSTALL_LIB_DIR}")
MESSAGE("includes       : ${CMAKE_INSTALL_PREFIX}${INSTALL_INC_DIR}")
MESSAGE("pkgconfig      : ${PKGCONFIGDIR}")


SET(prefix ${CMAKE_INSTALL_PREFIX})
SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
CONFIGURE_FILE(Easdif${DEBUGEXT}.pc.in   Easdif${DEBUGEXT}.pc )


# Get PKGCONFIGDIR path relative too CMAKE_INSTALL_PREFIX
GET_FILENAME_COMPONENT(abspref  ${CMAKE_INSTALL_PREFIX} ABSOLUTE)
GET_FILENAME_COMPONENT(abspkg  ${PKGCONFIGDIR} ABSOLUTE)
STRING(REPLACE "${abspref}"  "" PKGCONFIG_REL ${abspkg} )
#if we have complete path that is outside of CMAKE_INSTALL_PREFIX
IF(PKGCONFIG_REL STREQUAL PKGCONFIGDIR)
SET(remainingpath ${CMAKE_INSTALL_PREFIX})
#MESSAGE("int remains ${remainingpath}")
SET(torelative)
WHILE(remainingpath)
#MESSAGE("remains ${remainingpath}")
#MESSAGE("last ${lastpath}")
GET_FILENAME_COMPONENT(lastpath ${remainingpath} NAME)
GET_FILENAME_COMPONENT(remainingpath ${remainingpath} PATH)
IF(lastpath)
SET(torelative "${torelative}../")
ENDIF(lastpath)
ENDWHILE(remainingpath)
#MESSAGE("torelative: ${torelative}")
SET( PKGCONFIG_REL /${torelative}${abspkg} )
ENDIF(PKGCONFIG_REL STREQUAL PKGCONFIGDIR)
#MESSAGE("pkgconfig      : ${PKGCONFIG_REL}")
INSTALL_FILES(${PKGCONFIG_REL} FILES Easdif${DEBUGEXT}.pc)



GET_DIRECTORY_PROPERTY(easdifDOCFILES DIRECTORY easdif DEFINITION DOCFILES)
SET(DOCFILES "${easdifDOCFILES}" CACHE INTERNAL "files containing doc sources" FORCE)
MESSAGE("doc files : ${DOCFILES}")

# Documentation generation with Doxygen
ADD_CUSTOM_TARGET(doc COMMAND  doxygen  ${CMAKE_BINARY_DIR}/Doxyfile DEPENDS CMakeLists.txt ${DOCFILES})
ADD_CUSTOM_TARGET(install_doc  
  COMMAND chmod -R  g+w doc/html 
  COMMAND ncftpput -u $ENV{USER} ${DOCSERVER} ${DOCDIR} doc/html/* 
  COMMAND chmod -R  g-w doc/html)
ADD_DEPENDENCIES(install_doc doc)



