<html><head><title>Library SDIF</title></head>
<body BGCOLOR=#FFFFFF ><h1>

<a name="topofdoc">Library SDIF</a></h1>
<hr><p></p></a>
<p><strong>[
<a href="file:///u/formes/schwarz/src/SDIF/doc/intern/cocoon/keyweb.html">Keywords</a> | 
<a href="#classes">Classes</a> | 
<a href="#data">Data</a> | 
<a href="#functions">Functions</a>
 ]</strong><p>
<h2>Quick Index</h2>
<dl>
</dl>
<p><br><p><a name="classes"><hr><p></p></a><h2>Classes</h2>
<dl><dl>
</dl></dl>
<p>Back to the <a href="#topofdoc">top</a> of  <i>SDIF</i><p>
<a name="data"><hr><p></p></a><h2>Data</h2>
<table>
<tr><td align=right valign=top>typedef struct SdifFileS </td><td><a href="#typedef_struct_SdifFileS_SdifFileT$"><font color=green>SdifFileT</font></a>;</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Error Handling</strong></td></tr>
<tr><td align=right valign=top>typedef enum SdifErrorTagE </td><td><a href="#typedef_enum_SdifErrorTagE_SdifErrorTagET$"><font color=green>SdifErrorTagET</font></a>;</td></tr>
<tr><td align=right valign=top>typedef enum SdifErrorLevelE </td><td><a href="#typedef_enum_SdifErrorLevelE_SdifErrorLevelET$"><font color=green>SdifErrorLevelET</font></a>;</td></tr>
<tr><td align=right valign=top>typedef struct SdifErrorS </td><td><a href="#typedef_struct_SdifErrorS_SdifErrorT$"><font color=green>SdifErrorT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifErrorS_$"><font color=green>SdifErrorS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifErrorLS </td><td><a href="#typedef_struct_SdifErrorLS_SdifErrorLT$"><font color=green>SdifErrorLT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifErrorLS_$"><font color=green>SdifErrorLS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef enum SdifErrorE </td><td><a href="#typedef_enum_SdifErrorE_SdifErrorEnum$"><font color=green>SdifErrorEnum</font></a>;</td></tr>
<tr><td align=right valign=top>typedef void (*</td><td><a href="#typedef_void_(*SdifExitFuncT)_(void)$"><font color=green>SdifExitFuncT</font></a>) (void);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	SDIF File Structure</strong></td></tr>
<tr><td align=right valign=top>typedef enum SdifFileModeE </td><td><a href="#typedef_enum_SdifFileModeE_SdifFileModeET_$"><font color=green>SdifFileModeET</font></a> ;</td></tr>
<tr><td align=right valign=top>enum </td><td><a href="#enum_SdifPassE_$"><font color=green>SdifPassE</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifFileS </td><td><a href="#typedef_struct_SdifFileS_SdifFileT$"><font color=green>SdifFileT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifFileS_$"><font color=green>SdifFileS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifFrameHeaderS </td><td><a href="#typedef_struct_SdifFrameHeaderS_SdifFrameHeaderT$"><font color=green>SdifFrameHeaderT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifFrameHeaderS_$"><font color=green>SdifFrameHeaderS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifFrameDataS </td><td><a href="#typedef_struct_SdifFrameDataS_SdifFrameDataT$"><font color=green>SdifFrameDataT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifFrameDataS_$"><font color=green>SdifFrameDataS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifComponentS </td><td><a href="#typedef_struct_SdifComponentS_SdifComponentT$"><font color=green>SdifComponentT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifComponentS_$"><font color=green>SdifComponentS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifFrameTypeS </td><td><a href="#typedef_struct_SdifFrameTypeS_SdifFrameTypeT$"><font color=green>SdifFrameTypeT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifFrameTypeS_$"><font color=green>SdifFrameTypeS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef enum SdifSignatureE </td><td><a href="#typedef_enum_SdifSignatureE_SdifSignatureET$"><font color=green>SdifSignatureET</font></a>;</td></tr>
<tr><td align=right valign=top>typedef enum SdifModifModeE </td><td><a href="#typedef_enum_SdifModifModeE_SdifModifModeET$"><font color=green>SdifModifModeET</font></a>;</td></tr>
<tr><td align=right valign=top>typedef enum SdifDataTypeE </td><td><a href="#typedef_enum_SdifDataTypeE_SdifDataTypeET$"><font color=green>SdifDataTypeET</font></a>;</td></tr>
<tr><td align=right valign=top>typedef enum SdifDataTypeE </td><td><a href="#typedef_enum_SdifDataTypeE_SdifDataTypeET$"><font color=green>SdifDataTypeET</font></a>;</td></tr>
<tr><td align=right valign=top>typedef char </td><td><a href="#typedef_char_SdifChar$"><font color=green>SdifChar</font></a>;</td></tr>
<tr><td align=right valign=top>typedef short </td><td><a href="#typedef_short_SdifInt2$"><font color=green>SdifInt2</font></a>;</td></tr>
<tr><td align=right valign=top>typedef unsigned short </td><td><a href="#typedef_unsigned_short_SdifUInt2$"><font color=green>SdifUInt2</font></a>;</td></tr>
<tr><td align=right valign=top>typedef int </td><td><a href="#typedef_int_SdifInt4$"><font color=green>SdifInt4</font></a>;</td></tr>
<tr><td align=right valign=top>typedef unsigned int </td><td><a href="#typedef_unsigned_int_SdifUInt4$"><font color=green>SdifUInt4</font></a>;</td></tr>
<tr><td align=right valign=top>typedef float </td><td><a href="#typedef_float_SdifFloat4$"><font color=green>SdifFloat4</font></a>;</td></tr>
<tr><td align=right valign=top>typedef double </td><td><a href="#typedef_double_SdifFloat8$"><font color=green>SdifFloat8</font></a>;</td></tr>
<tr><td align=right valign=top>typedef unsigned int </td><td><a href="#typedef_unsigned_int_SdifSignature$"><font color=green>SdifSignature</font></a>;</td></tr>
<tr><td align=right valign=top>typedef enum SdifMachineE </td><td><a href="#typedef_enum_SdifMachineE_SdifMachineET$"><font color=green>SdifMachineET</font></a>;</td></tr>
<tr><td align=right valign=top>typedef enum SdifBinaryMode </td><td><a href="#typedef_enum_SdifBinaryMode_SdifBinaryModeET_$"><font color=green>SdifBinaryModeET</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef enum SdifHashIndexTypeE </td><td><a href="#typedef_enum_SdifHashIndexTypeE_SdifHashIndexTypeET$"><font color=green>SdifHashIndexTypeET</font></a>;</td></tr>
<tr><td align=right valign=top>typedef union SdifHashIndexU </td><td><a href="#typedef_union_SdifHashIndexU_SdifHashIndexUT$"><font color=green>SdifHashIndexUT</font></a>;</td></tr>
<tr><td align=right valign=top>char* </td><td><a href="#char*_Char[1]$"><font color=green>Char</font></a>[1];</td></tr>
<tr><td align=right valign=top>unsigned int </td><td><a href="#unsigned_int_Int4$"><font color=green>Int4</font></a>;</td></tr>
<tr><td align=right valign=top>typedef struct SdifHashNS </td><td><a href="#typedef_struct_SdifHashNS_SdifHashNT$"><font color=green>SdifHashNT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifHashNS_$"><font color=green>SdifHashNS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifHashTableS </td><td><a href="#typedef_struct_SdifHashTableS_SdifHashTableT$"><font color=green>SdifHashTableT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifHashTableS_$"><font color=green>SdifHashTableS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef int (*</td><td><a href="#typedef_int_(*SdifMatrixCallbackT)_(SdifFileT_*file,_int_nummatrix,_void_*userdata)$"><font color=green>SdifMatrixCallbackT</font></a>) (SdifFileT *file, int nummatrix, void *userdata);</td></tr>
<tr><td align=right valign=top>typedef void (*</td><td><a href="#typedef_void_(*KillerFT)_(void_*)$"><font color=green>KillerFT</font></a>) (void *);</td></tr>
<tr><td align=right valign=top>typedef struct SdifListNS </td><td><a href="#typedef_struct_SdifListNS_SdifListNT$"><font color=green>SdifListNT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifListNS_$"><font color=green>SdifListNS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifListNStockS </td><td><a href="#typedef_struct_SdifListNStockS_SdifListNStockT$"><font color=green>SdifListNStockT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifListNStockS_$"><font color=green>SdifListNStockS</font></a> ;</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// lists management</strong></td></tr>
<tr><td align=right valign=top>typedef struct SdifListS </td><td><a href="#typedef_struct_SdifListS_SdifListT$"><font color=green>SdifListT</font></a>;</td></tr>
<tr><td align=right valign=top>typedef SdifListT *</td><td><a href="#typedef_SdifListT_*SdifListP$"><font color=green>SdifListP</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifListS_$"><font color=green>SdifListS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifMatrixHeaderS </td><td><a href="#typedef_struct_SdifMatrixHeaderS_SdifMatrixHeaderT$"><font color=green>SdifMatrixHeaderT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifMatrixHeaderS_$"><font color=green>SdifMatrixHeaderS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef union DataTypeU </td><td><a href="#typedef_union_DataTypeU_DataTypeUT$"><font color=green>DataTypeUT</font></a>;</td></tr>
<tr><td align=right valign=top>SdifFloat4 *</td><td><a href="#SdifFloat4_*Float4$"><font color=green>Float4</font></a>;</td></tr>
<tr><td align=right valign=top>SdifFloat8 *</td><td><a href="#SdifFloat8_*Float8$"><font color=green>Float8</font></a>;</td></tr>
<tr><td align=right valign=top>SdifInt2 *</td><td><a href="#SdifInt2_*Int2_$"><font color=green>Int2</font></a> ;</td></tr>
<tr><td align=right valign=top>SdifInt4 *</td><td><a href="#SdifInt4_*Int4_$"><font color=green>Int4</font></a> ;</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// SdifInt8 *Int8 ;</strong></td></tr>
<tr><td align=right valign=top>SdifUInt2 *</td><td><a href="#SdifUInt2_*UInt2_$"><font color=green>UInt2</font></a> ;</td></tr>
<tr><td align=right valign=top>SdifUInt4 *</td><td><a href="#SdifUInt4_*UInt4_$"><font color=green>UInt4</font></a> ;</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// SdifUInt8 *UInt8 ;</strong></td></tr>
<tr><td align=right valign=top>SdifChar *</td><td><a href="#SdifChar_*Char_$"><font color=green>Char</font></a> ;</td></tr>
<tr><td align=right valign=top>void *</td><td><a href="#void_*Void_$"><font color=green>Void</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifOneRowS </td><td><a href="#typedef_struct_SdifOneRowS_SdifOneRowT$"><font color=green>SdifOneRowT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifOneRowS_$"><font color=green>SdifOneRowS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifMatrixDataS </td><td><a href="#typedef_struct_SdifMatrixDataS_SdifMatrixDataT$"><font color=green>SdifMatrixDataT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifMatrixDataS_$"><font color=green>SdifMatrixDataS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifColumnDefS </td><td><a href="#typedef_struct_SdifColumnDefS_SdifColumnDefT$"><font color=green>SdifColumnDefT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifColumnDefS_$"><font color=green>SdifColumnDefS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifMatrixTypeS </td><td><a href="#typedef_struct_SdifMatrixTypeS_SdifMatrixTypeT$"><font color=green>SdifMatrixTypeT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifMatrixTypeS_$"><font color=green>SdifMatrixTypeS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifBlockNodeS </td><td><a href="#typedef_struct_SdifBlockNodeS_SdifBlockNodeT$"><font color=green>SdifBlockNodeT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifBlockNodeS_$"><font color=green>SdifBlockNodeS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifBlockListS </td><td><a href="#typedef_struct_SdifBlockListS_SdifBlockListT$"><font color=green>SdifBlockListT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifBlockListS_$"><font color=green>SdifBlockListS</font></a> ;</td></tr>
<tr><td align=right valign=top>char *</td><td><a href="#char_*SdifMrType$"><font color=green>SdifMrType</font></a>;</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// <p> * NameValue <p></strong></td></tr>
<tr><td align=right valign=top>typedef struct SdifNameValueS </td><td><a href="#typedef_struct_SdifNameValueS_SdifNameValueT$"><font color=green>SdifNameValueT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifNameValueS_$"><font color=green>SdifNameValueS</font></a> ;</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// <p> * NameValueTable <p></strong></td></tr>
<tr><td align=right valign=top>typedef struct SdifNameValueTableS </td><td><a href="#typedef_struct_SdifNameValueTableS_SdifNameValueTableT$"><font color=green>SdifNameValueTableT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifNameValueTableS_$"><font color=green>SdifNameValueTableS</font></a> ;</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// <p> * NameValueTableList <p></strong></td></tr>
<tr><td align=right valign=top>typedef struct SdifNameValuesLS </td><td><a href="#typedef_struct_SdifNameValuesLS_SdifNameValuesLT$"><font color=green>SdifNameValuesLT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifNameValuesLS_$"><font color=green>SdifNameValuesLS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef enum </td><td><a href="#typedef_enum_SdifSelectTokens$"><font color=green>SdifSelectTokens</font></a>;</td></tr>
<tr><td align=right valign=top>typedef struct </td><td><a href="#typedef_struct_SdifSelectElementIntT$"><font color=green>SdifSelectElementIntT</font></a>;</td></tr>
<tr><td align=right valign=top>typedef struct </td><td><a href="#typedef_struct_SdifSelectElementRealT$"><font color=green>SdifSelectElementRealT</font></a>;</td></tr>
<tr><td align=right valign=top>typedef union SdifSelectValueS </td><td><a href="#typedef_union_SdifSelectValueS_SdifSelectValueT$"><font color=green>SdifSelectValueT</font></a>;</td></tr>
<tr><td align=right valign=top>typedef struct SdifSelectElementS SdifSelectElementT, *</td><td><a href="#typedef_struct_SdifSelectElementS_SdifSelectElementT,_*SdifSelectElementP$"><font color=green>SdifSelectElementP</font></a>;</td></tr>
<tr><td align=right valign=top>typedef struct </td><td><a href="#typedef_struct_SdifSelectionT$"><font color=green>SdifSelectionT</font></a>;</td></tr>
<tr><td align=right valign=top>typedef struct SdifFileS </td><td><a href="#typedef_struct_SdifFileS_SdifFileT$"><font color=green>SdifFileT</font></a>;</td></tr>
<tr><td align=right valign=top>typedef struct SdifSignatureTabS </td><td><a href="#typedef_struct_SdifSignatureTabS_SdifSignatureTabT$"><font color=green>SdifSignatureTabT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifSignatureTabS_$"><font color=green>SdifSignatureTabS</font></a> ;</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 		Stream ID Table and Entries for 1IDS ASCII chunk</strong></td></tr>
<tr><td align=right valign=top>typedef struct SdifStreamIDS </td><td><a href="#typedef_struct_SdifStreamIDS_SdifStreamIDT$"><font color=green>SdifStreamIDT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifStreamIDS_$"><font color=green>SdifStreamIDS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifStreamIDTableS </td><td><a href="#typedef_struct_SdifStreamIDTableS_SdifStreamIDTableT$"><font color=green>SdifStreamIDTableT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifStreamIDTableS_$"><font color=green>SdifStreamIDTableS</font></a> ;</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// Structure declaration</strong></td></tr>
<tr><td align=right valign=top>typedef struct SdifStringS </td><td><a href="#typedef_struct_SdifStringS_SdifStringT$"><font color=green>SdifStringT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifStringS_$"><font color=green>SdifStringS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifTimePositionS </td><td><a href="#typedef_struct_SdifTimePositionS_SdifTimePositionT$"><font color=green>SdifTimePositionT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifTimePositionS_$"><font color=green>SdifTimePositionS</font></a> ;</td></tr>
<tr><td align=right valign=top>typedef struct SdifTimePositionLS </td><td><a href="#typedef_struct_SdifTimePositionLS_SdifTimePositionLT$"><font color=green>SdifTimePositionLT</font></a>;</td></tr>
<tr><td align=right valign=top>struct </td><td><a href="#struct_SdifTimePositionLS_$"><font color=green>SdifTimePositionLS</font></a> ;</td></tr>
</table>
<p>Back to the <a href="#topofdoc">top</a> of  <i>SDIF</i><p>
<a name="functions"><hr><p></p></a><h2>Global Functions</h2>
<table>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifCheckFileFormat_(const_char_*name)$"><font color=green>SdifCheckFileFormat</font></a> (const char *name);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifCheckFileFramesTab_(const_char_*name,_const_SdifSignatureTabT_*frames)$"><font color=green>SdifCheckFileFramesTab</font></a> (const char *name, const SdifSignatureTabT *frames);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifCheckFileFramesIndex_(const_char_*name,_const_SdifSignature_*frames)$"><font color=green>SdifCheckFileFramesIndex</font></a> (const char *name, const SdifSignature *frames);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifCheckNextFrame_(SdifFileT_*in,_const_SdifSignatureTabT_*frames,_int_*index)$"><font color=green>SdifCheckNextFrame</font></a> (SdifFileT *in, const SdifSignatureTabT *frames, int *index);</td></tr>
<tr><td align=right valign=top>SdifFileT* </td><td><a href="#SdifFileT*_SdifFTryOpen_(const_char_*Name,_SdifFileModeET_Mode)$"><font color=green>SdifFTryOpen</font></a> (const char *Name, SdifFileModeET Mode);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFConvToTextMatrixData_(SdifFileT_*SdifF)$"><font color=green>SdifFConvToTextMatrixData</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFConvToTextMatrixHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFConvToTextMatrixHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFConvToTextMatrix_(SdifFileT_*SdifF)$"><font color=green>SdifFConvToTextMatrix</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFConvToTextFrameData_(SdifFileT_*SdifF)$"><font color=green>SdifFConvToTextFrameData</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFConvToTextFrameHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFConvToTextFrameHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFConvToTextFrame_(SdifFileT_*SdifF)$"><font color=green>SdifFConvToTextFrame</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFConvToTextAllFrame_(SdifFileT_*SdifF)$"><font color=green>SdifFConvToTextAllFrame</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFConvToText_(SdifFileT_*SdifF)$"><font color=green>SdifFConvToText</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifToText_(SdifFileT_*SdifF,_char_*TextStreamName)$"><font color=green>SdifToText</font></a> (SdifFileT *SdifF, char *TextStreamName);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Error Handling</strong></td></tr>
<tr><td align=right valign=top>SdifErrorT* </td><td><a href="#SdifErrorT*_SdifCreateError_(SdifErrorTagET_Tag,_SdifErrorLevelET_Level,_const_char*_UserMess)$"><font color=green>SdifCreateError</font></a> (SdifErrorTagET Tag, SdifErrorLevelET Level, const char* UserMess);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillError_(void_*Error)$"><font color=green>SdifKillError</font></a> (void *Error);</td></tr>
<tr><td align=right valign=top>SdifErrorLT* </td><td><a href="#SdifErrorLT*_SdifCreateErrorL_(SdifFileT*_SdifF)$"><font color=green>SdifCreateErrorL</font></a> (SdifFileT* SdifF);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillErrorL_(SdifErrorLT_*ErrorL)$"><font color=green>SdifKillErrorL</font></a> (SdifErrorLT *ErrorL);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifInsertTailError_(SdifErrorLT*_ErrorL,_int_ErrorCount_[],_SdifErrorTagET_Tag,_const_char*_UserMess)$"><font color=green>SdifInsertTailError</font></a> (SdifErrorLT* ErrorL, int ErrorCount [], SdifErrorTagET Tag, const char* UserMess);</td></tr>
<tr><td align=right valign=top>SdifErrorT* </td><td><a href="#SdifErrorT*_SdifLastError_(SdifErrorLT_*ErrorL)$"><font color=green>SdifLastError</font></a> (SdifErrorLT *ErrorL);</td></tr>
<tr><td align=right valign=top>SdifErrorTagET </td><td><a href="#SdifErrorTagET_SdifLastErrorTag_(SdifErrorLT_*ErrorL)$"><font color=green>SdifLastErrorTag</font></a> (SdifErrorLT *ErrorL);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifFError_(SdifFileT*_SdifF,_SdifErrorTagET_ErrorTag,_const_char_*UserMess,_const_char_*file,_const_int_line)$"><font color=green>SdifFError</font></a> (SdifFileT* SdifF, SdifErrorTagET ErrorTag, const char *UserMess, const char *file, const int line);</td></tr>
<tr><td align=right valign=top>SdifInt4 </td><td><a href="#SdifInt4_SdifFsPrintError_(char*_oErrMess,_SdifFileT*_SdifF,_SdifErrorT*_Error,_const_char_*LibFile,_int_LibLine)$"><font color=green>SdifFsPrintError</font></a> (char* oErrMess, SdifFileT* SdifF, SdifErrorT* Error, const char *LibFile, int LibLine);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifEnableErrorOutput_(void)$"><font color=green>SdifEnableErrorOutput</font></a> (void);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifDisableErrorOutput_(void)$"><font color=green>SdifDisableErrorOutput</font></a> (void);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifSetExitFunc_(SdifExitFuncT_func)$"><font color=green>SdifSetExitFunc</font></a> (SdifExitFuncT func);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifErrorWarning(SdifErrorEnum_Error,_const_void_*ErrorMess)$"><font color=green>SdifErrorWarning</font></a>(SdifErrorEnum Error, const void *ErrorMess);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFGetSignature_(SdifFileT_*SdifF,_size_t_*NbCharRead)$"><font color=green>SdifFGetSignature</font></a> (SdifFileT *SdifF, size_t *NbCharRead);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFGetOneNameValue_(SdifFileT_*SdifF,_int_Verbose,_size_t_*NbCharRead)$"><font color=green>SdifFGetOneNameValue</font></a> (SdifFileT *SdifF, int Verbose, size_t *NbCharRead);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFGetNameValueLCurrNVT(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFGetNameValueLCurrNVT</font></a>(SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFNameValueLCurrNVTfromString_(SdifFileT_*SdifF,_char_*str)$"><font color=green>SdifFNameValueLCurrNVTfromString</font></a> (SdifFileT *SdifF, char *str);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFGetOneMatrixType_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFGetOneMatrixType</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFGetOneMatrixTypefromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><font color=green>SdifFGetOneMatrixTypefromSdifString</font></a>(SdifFileT *SdifF, SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFGetOneComponent_(SdifFileT_*SdifF,_int_Verbose,_SdifSignature_*MatrixSignature,_char_*ComponentName,_size_t_*NbCharRead)$"><font color=green>SdifFGetOneComponent</font></a> (SdifFileT *SdifF, int Verbose, SdifSignature *MatrixSignature, char *ComponentName, size_t *NbCharRead);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFGetOneComponentfromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString,_SdifSignature_*MatrixSignature,_char_*ComponentName)$"><font color=green>SdifFGetOneComponentfromSdifString</font></a>(SdifFileT *SdifF, SdifStringT *SdifString, SdifSignature *MatrixSignature, char *ComponentName);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFGetOneFrameType_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFGetOneFrameType</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFGetOneFrameTypefromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><font color=green>SdifFGetOneFrameTypefromSdifString</font></a>(SdifFileT *SdifF, SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFGetAllType_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFGetAllType</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFGetAllTypefromSdifString_(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><font color=green>SdifFGetAllTypefromSdifString</font></a> (SdifFileT *SdifF, SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFGetOneStreamID_(SdifFileT_*SdifF,_int_Verbose,_size_t_*NbBytesRead)$"><font color=green>SdifFGetOneStreamID</font></a> (SdifFileT *SdifF, int Verbose, size_t *NbBytesRead);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFgetOneStreamIDfromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><font color=green>SdifFgetOneStreamIDfromSdifString</font></a>(SdifFileT *SdifF, SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFGetAllStreamID_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFGetAllStreamID</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFGetAllStreamIDfromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><font color=green>SdifFGetAllStreamIDfromSdifString</font></a>(SdifFileT *SdifF, SdifStringT *SdifString);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// <p> * obsolete <p></strong></td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFGetNameValueCurrHT_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFGetNameValueCurrHT</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintGeneralHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFPrintGeneralHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintNameValueLCurrNVT_(SdifFileT_*SdifF)$"><font color=green>SdifFPrintNameValueLCurrNVT</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintAllNameValueNVT_(SdifFileT_*SdifF)$"><font color=green>SdifFPrintAllNameValueNVT</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintAllType_(SdifFileT_*SdifF)$"><font color=green>SdifFPrintAllType</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintAllStreamID_(SdifFileT_*SdifF)$"><font color=green>SdifFPrintAllStreamID</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintAllASCIIChunks_(SdifFileT_*SdifF)$"><font color=green>SdifFPrintAllASCIIChunks</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintMatrixHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFPrintMatrixHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintFrameHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFPrintFrameHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintOneRow_(SdifFileT_*SdifF)$"><font color=green>SdifFPrintOneRow</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintMatrixType_(SdifFileT_*SdifF,_SdifMatrixTypeT_*MatrixType)$"><font color=green>SdifFPrintMatrixType</font></a> (SdifFileT *SdifF, SdifMatrixTypeT *MatrixType);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintFrameType_(SdifFileT_*SdifF,_SdifFrameTypeT_*FrameType)$"><font color=green>SdifFPrintFrameType</font></a> (SdifFileT *SdifF, SdifFrameTypeT *FrameType);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// <p> * obsolete <p></strong></td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintNameValueCurrHT_(SdifFileT_*SdifF)$"><font color=green>SdifFPrintNameValueCurrHT</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPrintAllNameValueHT_(SdifFileT_*SdifF)$"><font color=green>SdifFPrintAllNameValueHT</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPutOneNameValue_(SdifFileT_*SdifF,_int_Verbose,_SdifNameValueT_*NameValue)$"><font color=green>SdifFPutOneNameValue</font></a> (SdifFileT *SdifF, int Verbose, SdifNameValueT *NameValue);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPutNameValueLCurrNVT_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFPutNameValueLCurrNVT</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFNameValueLCurrNVTtoSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><font color=green>SdifFNameValueLCurrNVTtoSdifString</font></a>(SdifFileT *SdifF, SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPutOneMatrixType_(SdifFileT_*SdifF,_int_Verbose,_SdifMatrixTypeT_*MatrixType)$"><font color=green>SdifFPutOneMatrixType</font></a> (SdifFileT *SdifF, int Verbose, SdifMatrixTypeT *MatrixType);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFOneMatrixTypeToSdifString(SdifMatrixTypeT_*MatrixType,_SdifStringT_*SdifString)$"><font color=green>SdifFOneMatrixTypeToSdifString</font></a>(SdifMatrixTypeT *MatrixType, SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPutAllMatrixType_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFPutAllMatrixType</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFAllMatrixTypeToSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifSTring)$"><font color=green>SdifFAllMatrixTypeToSdifString</font></a>(SdifFileT *SdifF, SdifStringT *SdifSTring);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPutOneComponent(SdifFileT_*SdifF,_int_Verbose,_SdifComponentT_*Component)$"><font color=green>SdifFPutOneComponent</font></a>(SdifFileT *SdifF, int Verbose, SdifComponentT *Component);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFOneComponentToSdifString(SdifComponentT_*Component,_SdifStringT_*SdifString)$"><font color=green>SdifFOneComponentToSdifString</font></a>(SdifComponentT *Component, SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPutOneFrameType(SdifFileT_*SdifF,_int_Verbose,_SdifFrameTypeT_*FrameType)$"><font color=green>SdifFPutOneFrameType</font></a>(SdifFileT *SdifF, int Verbose, SdifFrameTypeT *FrameType);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFOneFrameTypeToSdifString(SdifFrameTypeT_*FrameType,_SdifStringT_*SdifString)$"><font color=green>SdifFOneFrameTypeToSdifString</font></a>(SdifFrameTypeT *FrameType, SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPutAllFrameType_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFPutAllFrameType</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFAllFrameTypeToSdifString_(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><font color=green>SdifFAllFrameTypeToSdifString</font></a> (SdifFileT *SdifF, SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPutAllType_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFPutAllType</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPutOneStreamID_(SdifFileT_*SdifF,_int_Verbose,_SdifStreamIDT_*StreamID)$"><font color=green>SdifFPutOneStreamID</font></a> (SdifFileT *SdifF, int Verbose, SdifStreamIDT *StreamID);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFOneStreamIDToSDifString_(SdifStringT_*SdifString,_SdifStreamIDT_*StreamID)$"><font color=green>SdifFOneStreamIDToSDifString</font></a> (SdifStringT *SdifString, SdifStreamIDT *StreamID);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPutAllStreamID_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFPutAllStreamID</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFAllStreamIDToSdifString_(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><font color=green>SdifFAllStreamIDToSdifString</font></a> (SdifFileT *SdifF, SdifStringT *SdifString);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// <p> * obsolete <p></strong></td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPutNameValueCurrHT_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFPutNameValueCurrHT</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadGeneralHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFReadGeneralHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadChunkSize_(SdifFileT_*SdifF)$"><font color=green>SdifFReadChunkSize</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadNameValueLCurrNVT(SdifFileT_*SdifF)$"><font color=green>SdifFReadNameValueLCurrNVT</font></a>(SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadAllType_(SdifFileT_*SdifF)$"><font color=green>SdifFReadAllType</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadAllStreamID_(SdifFileT_*SdifF)$"><font color=green>SdifFReadAllStreamID</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadAllASCIIChunks_(SdifFileT_*SdifF)$"><font color=green>SdifFReadAllASCIIChunks</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadMatrixHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFReadMatrixHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadOneRow_(SdifFileT_*SdifF)$"><font color=green>SdifFReadOneRow</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadFrameHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFReadFrameHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFSkipMatrix_(SdifFileT_*SdifF)$"><font color=green>SdifFSkipMatrix</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// obsolete</strong></td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifSkipMatrix_(SdifFileT_*SdifF)$"><font color=green>SdifSkipMatrix</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFSkipMatrixData_(SdifFileT_*SdifF)$"><font color=green>SdifFSkipMatrixData</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// obsolete</strong></td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifSkipMatrixData_(SdifFileT_*SdifF)$"><font color=green>SdifSkipMatrixData</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFSkipFrameData_(SdifFileT_*SdifF)$"><font color=green>SdifFSkipFrameData</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// obsolete</strong></td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifSkipFrameData_(SdifFileT_*SdifF)$"><font color=green>SdifSkipFrameData</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadPadding_(SdifFileT_*SdifF,_size_t_Padding)$"><font color=green>SdifFReadPadding</font></a> (SdifFileT *SdifF, size_t Padding);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadUndeterminatedPadding_(SdifFileT_*SdifF)$"><font color=green>SdifFReadUndeterminatedPadding</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadAndIgnore_(SdifFileT_*SdifF,_size_t_bytes)$"><font color=green>SdifFReadAndIgnore</font></a> (SdifFileT *SdifF, size_t bytes);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadOneMatrixType_(SdifFileT_*SdifF)$"><font color=green>SdifFReadOneMatrixType</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadOneFrameType_(SdifFileT_*SdifF)$"><font color=green>SdifFReadOneFrameType</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadTextMatrix(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><font color=green>SdifFReadTextMatrix</font></a>(SdifFileT *SdifF, SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadTextMatrixData(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><font color=green>SdifFReadTextMatrixData</font></a>(SdifFileT *SdifF, SdifStringT *SdifString);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// <p> * obsolete <p></strong></td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFReadNameValueCurrHT_(SdifFileT_*SdifF)$"><font color=green>SdifFReadNameValueCurrHT</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFScanGeneralHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFScanGeneralHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFScanNameValueLCurrNVT_(SdifFileT_*SdifF)$"><font color=green>SdifFScanNameValueLCurrNVT</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFScanAllType_(SdifFileT_*SdifF)$"><font color=green>SdifFScanAllType</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFScanAllStreamID_(SdifFileT_*SdifF)$"><font color=green>SdifFScanAllStreamID</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFScanAllASCIIChunks_(SdifFileT_*SdifF)$"><font color=green>SdifFScanAllASCIIChunks</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifFScanMatrixHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFScanMatrixHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifFScanFrameHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFScanFrameHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifFScanOneRow_(SdifFileT_*SdifF)$"><font color=green>SdifFScanOneRow</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFScanMatrixType_(SdifFileT_*SdifF)$"><font color=green>SdifFScanMatrixType</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFScanFrameType_(SdifFileT_*SdifF)$"><font color=green>SdifFScanFrameType</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// <p> * obsolete <p></strong></td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFScanNameValueCurrHT_(SdifFileT_*SdifF)$"><font color=green>SdifFScanNameValueCurrHT</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteGeneralHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteGeneralHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteChunkHeader_(SdifFileT_*SdifF,_SdifSignature_ChunkSignature,_size_t_ChunkSize)$"><font color=green>SdifFWriteChunkHeader</font></a> (SdifFileT *SdifF, SdifSignature ChunkSignature, size_t ChunkSize);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteNameValueLCurrNVT_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteNameValueLCurrNVT</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteAllNameValueNVT_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteAllNameValueNVT</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteOneNameValue_(SdifFileT_*SdifF,_SdifNameValueT_*NameValue)$"><font color=green>SdifFWriteOneNameValue</font></a> (SdifFileT *SdifF, SdifNameValueT *NameValue);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteOneMatrixType_(SdifFileT_*SdifF,_SdifMatrixTypeT_*MatrixType)$"><font color=green>SdifFWriteOneMatrixType</font></a> (SdifFileT *SdifF, SdifMatrixTypeT *MatrixType);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteOneComponent_(SdifFileT_*SdifF,_SdifComponentT_*Component)$"><font color=green>SdifFWriteOneComponent</font></a> (SdifFileT *SdifF, SdifComponentT *Component);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteOneFrameType_(SdifFileT_*SdifF,_SdifFrameTypeT_*FrameType)$"><font color=green>SdifFWriteOneFrameType</font></a> (SdifFileT *SdifF, SdifFrameTypeT *FrameType);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteOneStreamID_(SdifFileT_*SdifF,_SdifStreamIDT_*StreamID)$"><font color=green>SdifFWriteOneStreamID</font></a> (SdifFileT *SdifF, SdifStreamIDT *StreamID);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteAllMatrixType_(SdifFileT*_SdifF)$"><font color=green>SdifFWriteAllMatrixType</font></a> (SdifFileT* SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteAllFrameType_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteAllFrameType</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteAllType_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteAllType</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteAllStreamID_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteAllStreamID</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteAllASCIIChunks_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteAllASCIIChunks</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteMatrixHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteMatrixHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteOneRow_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteOneRow</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteMatrixData_(SdifFileT_*SdifF,_void_*Data)$"><font color=green>SdifFWriteMatrixData</font></a> (SdifFileT *SdifF, void *Data);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteMatrix_(SdifFileT_*SdifF,_SdifSignature_Signature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol,_void_*Data)$"><font color=green>SdifFWriteMatrix</font></a> (SdifFileT *SdifF, SdifSignature Signature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol, void *Data);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteTextMatrix_(SdifFileT_*SdifF,_SdifSignature_Signature,_SdifUInt4_Length,_char_*Data)$"><font color=green>SdifFWriteTextMatrix</font></a> (SdifFileT *SdifF, SdifSignature Signature, SdifUInt4 Length, char *Data);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifAsciiToUTF8_(char_*ascii_in,_char_*utf8_out)$"><font color=green>SdifAsciiToUTF8</font></a> (char *ascii_in, char *utf8_out);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWritePadding_(SdifFileT_*SdifF,_size_t_Padding)$"><font color=green>SdifFWritePadding</font></a> (SdifFileT *SdifF, size_t Padding);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteFrameHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteFrameHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifUpdateChunkSize_(SdifFileT_*SdifF,_size_t_ChunkSize)$"><font color=green>SdifUpdateChunkSize</font></a> (SdifFileT *SdifF, size_t ChunkSize);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifUpdateFrameHeader_(SdifFileT_*SdifF,_size_t_ChunkSize,_SdifInt4_NumMatrix)$"><font color=green>SdifUpdateFrameHeader</font></a> (SdifFileT *SdifF, size_t ChunkSize, SdifInt4 NumMatrix);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteFrameAndOneMatrix_(SdifFileT_*SdifF,_SdifSignature_FrameSignature,_SdifUInt4_NumID,_SdifFloat8_Time,_SdifSignature_MatrixSignature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol,_void_*Data)$"><font color=green>SdifFWriteFrameAndOneMatrix</font></a> (SdifFileT *SdifF, SdifSignature FrameSignature, SdifUInt4 NumID, SdifFloat8 Time, SdifSignature MatrixSignature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol, void *Data);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifSizeOfFrameHeader_(void)$"><font color=green>SdifSizeOfFrameHeader</font></a> (void);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifSizeOfMatrix_(SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol)$"><font color=green>SdifSizeOfMatrix</font></a> (SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteTextFrame(SdifFileT_*SdifF,_SdifSignature_FrameSignature,_SdifUInt4_NumID,_SdifFloat8_Time,_SdifSignature_MatrixSignature,_char_*str,_size_t_length)$"><font color=green>SdifFWriteTextFrame</font></a>(SdifFileT *SdifF, SdifSignature FrameSignature, SdifUInt4 NumID, SdifFloat8 Time, SdifSignature MatrixSignature, char *str, size_t length);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteTextFrameSdifString(SdifFileT_*SdifF,_SdifSignature_FrameSignature,_SdifUInt4_NumID,_SdifFloat8_Time,_SdifSignature_MatrixSignature,_SdifStringT_*SdifString)$"><font color=green>SdifFWriteTextFrameSdifString</font></a>(SdifFileT *SdifF, SdifSignature FrameSignature, SdifUInt4 NumID, SdifFloat8 Time, SdifSignature MatrixSignature, SdifStringT *SdifString);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// <p> * obsolete <p></strong></td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteNameValueCurrHT_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteNameValueCurrHT</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFWriteAllNameValueHT_(SdifFileT_*SdifF)$"><font color=green>SdifFWriteAllNameValueHT</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Opening and Closing of Files</strong></td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// DOC: <p></strong></td></tr>
<tr><td align=right valign=top>SdifFileT* </td><td><a href="#SdifFileT*_SdifFOpen_(const_char_*Name,_SdifFileModeET_Mode)$"><font color=green>SdifFOpen</font></a> (const char *Name, SdifFileModeET Mode);</td></tr>
<tr><td align=right valign=top>SdifFileT* </td><td><a href="#SdifFileT*_SdifOpenFile_(const_char_*Name,_SdifFileModeET_Mode)$"><font color=green>SdifOpenFile</font></a> (const char *Name, SdifFileModeET Mode);</td></tr>
<tr><td align=right valign=top>SdifFileT* </td><td><a href="#SdifFileT*_SdifFOpenText_(SdifFileT_*SdifF,_const_char*_Name,_SdifFileModeET_Mode)$"><font color=green>SdifFOpenText</font></a> (SdifFileT *SdifF, const char* Name, SdifFileModeET Mode);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// DOC: <p></strong></td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifFClose_(SdifFileT_*SdifF)$"><font color=green>SdifFClose</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifCloseFile_(SdifFileT_*SdifF)$"><font color=green>SdifCloseFile</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifFrameHeaderT* </td><td><a href="#SdifFrameHeaderT*_SdifFCreateCurrFramH_(SdifFileT_*SdifF,_SdifSignature_Signature)$"><font color=green>SdifFCreateCurrFramH</font></a> (SdifFileT *SdifF, SdifSignature Signature);</td></tr>
<tr><td align=right valign=top>SdifMatrixHeaderT* </td><td><a href="#SdifMatrixHeaderT*_SdifFCreateCurrMtrxH_(SdifFileT_*SdifF)$"><font color=green>SdifFCreateCurrMtrxH</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>FILE* </td><td><a href="#FILE*_SdifFGetFILE_SwitchVerbose_(SdifFileT_*SdifF,_int_Verbose)$"><font color=green>SdifFGetFILE_SwitchVerbose</font></a> (SdifFileT *SdifF, int Verbose);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifTakeCodedPredefinedTypes_(SdifFileT_*SdifF)$"><font color=green>SdifTakeCodedPredefinedTypes</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifFLoadPredefinedTypes_(SdifFileT_*SdifF,_char_*TypesFileName)$"><font color=green>SdifFLoadPredefinedTypes</font></a> (SdifFileT *SdifF, char *TypesFileName);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Init/Deinit of the Library</strong></td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifGenInit_(char_*PredefinedTypesFile)$"><font color=green>SdifGenInit</font></a> (char *PredefinedTypesFile);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifGenInitCond_(char_*PredefinedTypesFile)$"><font color=green>SdifGenInitCond</font></a> (char *PredefinedTypesFile);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifGenKill_(void)$"><font color=green>SdifGenKill</font></a> (void);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintVersion(void)$"><font color=green>SdifPrintVersion</font></a>(void);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Current Header Access Functions</strong></td></tr>
<tr><td align=right valign=top>SdifFrameHeaderT* </td><td><a href="#SdifFrameHeaderT*_SdifFSetCurrFrameHeader_(SdifFileT_*SdifF,_SdifSignature_Signature,_SdifUInt4_Size,_SdifUInt4_NbMatrix,_SdifUInt4_NumID,_SdifFloat8_Time)$"><font color=green>SdifFSetCurrFrameHeader</font></a> (SdifFileT *SdifF, SdifSignature Signature, SdifUInt4 Size, SdifUInt4 NbMatrix, SdifUInt4 NumID, SdifFloat8 Time);</td></tr>
<tr><td align=right valign=top>SdifMatrixHeaderT* </td><td><a href="#SdifMatrixHeaderT*_SdifFSetCurrMatrixHeader_(SdifFileT_*SdifF,_SdifSignature_Signature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol)$"><font color=green>SdifFSetCurrMatrixHeader</font></a> (SdifFileT *SdifF, SdifSignature Signature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol);</td></tr>
<tr><td align=right valign=top>SdifOneRowT* </td><td><a href="#SdifOneRowT*_SdifFSetCurrOneRow_(SdifFileT_*SdifF,_void_*Values)$"><font color=green>SdifFSetCurrOneRow</font></a> (SdifFileT *SdifF, void *Values);</td></tr>
<tr><td align=right valign=top>SdifOneRowT* </td><td><a href="#SdifOneRowT*_SdifFSetCurrOneRowCol_(SdifFileT_*SdifF,_SdifUInt4_numCol,_SdifFloat8_Value)$"><font color=green>SdifFSetCurrOneRowCol</font></a> (SdifFileT *SdifF, SdifUInt4 numCol, SdifFloat8 Value);</td></tr>
<tr><td align=right valign=top>SdifFloat8 </td><td><a href="#SdifFloat8_SdifFCurrOneRowCol_(SdifFileT_*SdifF,_SdifUInt4_numCol)$"><font color=green>SdifFCurrOneRowCol</font></a> (SdifFileT *SdifF, SdifUInt4 numCol);</td></tr>
<tr><td align=right valign=top>SdifFloat8 </td><td><a href="#SdifFloat8_SdifFCurrOneRowColName_(SdifFileT_*SdifF,_SdifMatrixTypeT_*MatrixType,_char_*NameCD)$"><font color=green>SdifFCurrOneRowColName</font></a> (SdifFileT *SdifF, SdifMatrixTypeT *MatrixType, char *NameCD);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifFCurrSignature_(SdifFileT_*SdifF)$"><font color=green>SdifFCurrSignature</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifFCleanCurrSignature_(SdifFileT_*SdifF)$"><font color=green>SdifFCleanCurrSignature</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifFCurrFrameSignature_(SdifFileT_*SdifF)$"><font color=green>SdifFCurrFrameSignature</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifFCurrMatrixSignature_(SdifFileT_*SdifF)$"><font color=green>SdifFCurrMatrixSignature</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifOneRowT* </td><td><a href="#SdifOneRowT*_SdifFCurrOneRow_(SdifFileT_*SdifF)$"><font color=green>SdifFCurrOneRow</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>void* </td><td><a href="#void*_SdifFCurrOneRowData_(SdifFileT_*SdifF)$"><font color=green>SdifFCurrOneRowData</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifFCurrNbCol_(SdifFileT_*SdifF)$"><font color=green>SdifFCurrNbCol</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifFCurrNbRow_(SdifFileT_*SdifF)$"><font color=green>SdifFCurrNbRow</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifDataTypeET </td><td><a href="#SdifDataTypeET_SdifFCurrDataType_(SdifFileT_*SdifF)$"><font color=green>SdifFCurrDataType</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifFCurrNbMatrix_(SdifFileT_*SdifF)$"><font color=green>SdifFCurrNbMatrix</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifFCurrID_(SdifFileT_*SdifF)$"><font color=green>SdifFCurrID</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifFloat8 </td><td><a href="#SdifFloat8_SdifFCurrTime_(SdifFileT_*SdifF)$"><font color=green>SdifFCurrTime</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	File Data Access Functions</strong></td></tr>
<tr><td align=right valign=top>SdifNameValuesLT *</td><td><a href="#SdifNameValuesLT_*SdifFNameValueList_(SdifFileT_*file)$"><font color=green>SdifFNameValueList</font></a> (SdifFileT *file);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFNameValueNum_(SdifFileT_*file)$"><font color=green>SdifFNameValueNum</font></a> (SdifFileT *file);</td></tr>
<tr><td align=right valign=top>SdifStreamIDTableT *</td><td><a href="#SdifStreamIDTableT_*SdifFStreamIDTable_(SdifFileT_*file)$"><font color=green>SdifFStreamIDTable</font></a> (SdifFileT *file);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFAddUserData_(SdifFileT_*file,_void_*data)$"><font color=green>SdifFAddUserData</font></a> (SdifFileT *file, void *data);</td></tr>
<tr><td align=right valign=top>void *</td><td><a href="#void_*SdifFGetUserData_(SdifFileT_*file,_int_index)$"><font color=green>SdifFGetUserData</font></a> (SdifFileT *file, int index);</td></tr>
<tr><td align=right valign=top>SdifFileT* </td><td><a href="#SdifFileT*_SdifFReInitMtrxUsed_(SdifFileT_*SdifF)$"><font color=green>SdifFReInitMtrxUsed</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifFileT* </td><td><a href="#SdifFileT*_SdifFPutInMtrxUsed_(SdifFileT_*SdifF,_SdifSignature_Sign)$"><font color=green>SdifFPutInMtrxUsed</font></a> (SdifFileT *SdifF, SdifSignature Sign);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifFIsInMtrxUsed_(SdifFileT_*SdifF,_SdifSignature_Sign)$"><font color=green>SdifFIsInMtrxUsed</font></a> (SdifFileT *SdifF, SdifSignature Sign);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Error flag for file</strong></td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFNumErrors_(SdifFileT_*SdifF,_SdifErrorLevelET_upto)$"><font color=green>SdifFNumErrors</font></a> (SdifFileT *SdifF, SdifErrorLevelET upto);</td></tr>
<tr><td align=right valign=top>SdifErrorT* </td><td><a href="#SdifErrorT*_SdifFLastError_(SdifFileT_*SdifF)$"><font color=green>SdifFLastError</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifErrorTagET </td><td><a href="#SdifErrorTagET_SdifFLastErrorTag_(SdifFileT_*SdifF)$"><font color=green>SdifFLastErrorTag</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>SdifFrameHeaderT* </td><td><a href="#SdifFrameHeaderT*_SdifCreateFrameHeader(SdifSignature_Signature,_SdifUInt4_Size,_SdifUInt4_NbMatrix,_SdifUInt4_NumID,_SdifFloat8_Time)$"><font color=green>SdifCreateFrameHeader</font></a>(SdifSignature Signature, SdifUInt4 Size, SdifUInt4 NbMatrix, SdifUInt4 NumID, SdifFloat8 Time);</td></tr>
<tr><td align=right valign=top>SdifFrameHeaderT* </td><td><a href="#SdifFrameHeaderT*_SdifCreateFrameHeaderEmpty(SdifSignature_Signature)$"><font color=green>SdifCreateFrameHeaderEmpty</font></a>(SdifSignature Signature);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillFrameHeader_(SdifFrameHeaderT_*FrameHeader)$"><font color=green>SdifKillFrameHeader</font></a> (SdifFrameHeaderT *FrameHeader);</td></tr>
<tr><td align=right valign=top>SdifFrameDataT* </td><td><a href="#SdifFrameDataT*_SdifCreateFrameData(SdifHashTableT_*FrameTypesTable,_SdifSignature_FrameSignature,_SdifUInt4_NumID,_SdifFloat8_Time)$"><font color=green>SdifCreateFrameData</font></a>(SdifHashTableT *FrameTypesTable, SdifSignature FrameSignature, SdifUInt4 NumID, SdifFloat8 Time);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillFrameData_(SdifHashTableT_*FrameTypesTable,_SdifFrameDataT_*FrameData)$"><font color=green>SdifKillFrameData</font></a> (SdifHashTableT *FrameTypesTable, SdifFrameDataT *FrameData);</td></tr>
<tr><td align=right valign=top>SdifFrameDataT* </td><td><a href="#SdifFrameDataT*_SdifFrameDataPutNthMatrixData(SdifFrameDataT_*FrameData,_unsigned_int_NthMatrix,_SdifMatrixDataT_*MatrixData)$"><font color=green>SdifFrameDataPutNthMatrixData</font></a>(SdifFrameDataT *FrameData, unsigned int NthMatrix, SdifMatrixDataT *MatrixData);</td></tr>
<tr><td align=right valign=top>SdifFrameDataT* </td><td><a href="#SdifFrameDataT*_SdifFrameDataPutComponentMatrixData(SdifHashTableT_*FrameTypesTable,_SdifFrameDataT_*FrameData,_char_*CompoName,_SdifMatrixDataT_*MatrixData)$"><font color=green>SdifFrameDataPutComponentMatrixData</font></a>(SdifHashTableT *FrameTypesTable, SdifFrameDataT *FrameData, char *CompoName, SdifMatrixDataT *MatrixData);</td></tr>
<tr><td align=right valign=top>SdifMatrixDataT* </td><td><a href="#SdifMatrixDataT*_SdifFrameDataGetNthMatrixData(SdifFrameDataT_*FrameData,_unsigned_int_NthMatrix)$"><font color=green>SdifFrameDataGetNthMatrixData</font></a>(SdifFrameDataT *FrameData, unsigned int NthMatrix);</td></tr>
<tr><td align=right valign=top>SdifMatrixDataT* </td><td><a href="#SdifMatrixDataT*_SdifFrameDataGetComponentMatrixData(SdifHashTableT_*FrameTypesTable,_SdifFrameDataT_*FrameData,_char_*CompoName)$"><font color=green>SdifFrameDataGetComponentMatrixData</font></a>(SdifHashTableT *FrameTypesTable, SdifFrameDataT *FrameData, char *CompoName);</td></tr>
<tr><td align=right valign=top>SdifComponentT* </td><td><a href="#SdifComponentT*_SdifCreateComponent_(SdifSignature_MtrxS,_char_*Name,_SdifUInt4_Num)$"><font color=green>SdifCreateComponent</font></a> (SdifSignature MtrxS, char *Name, SdifUInt4 Num);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillComponent_(SdifComponentT_*Component)$"><font color=green>SdifKillComponent</font></a> (SdifComponentT *Component);</td></tr>
<tr><td align=right valign=top>SdifFrameTypeT* </td><td><a href="#SdifFrameTypeT*_SdifCreateFrameType_(SdifSignature_FramS,_SdifFrameTypeT_*PredefinedFrameType)$"><font color=green>SdifCreateFrameType</font></a> (SdifSignature FramS, SdifFrameTypeT *PredefinedFrameType);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillFrameType_(SdifFrameTypeT_*FrameType)$"><font color=green>SdifKillFrameType</font></a> (SdifFrameTypeT *FrameType);</td></tr>
<tr><td align=right valign=top>SdifComponentT* </td><td><a href="#SdifComponentT*_SdifFrameTypeGetComponent_MtrxS_(SdifFrameTypeT_*FrameType,_SdifSignature_MtrxS)$"><font color=green>SdifFrameTypeGetComponent_MtrxS</font></a> (SdifFrameTypeT *FrameType, SdifSignature MtrxS);</td></tr>
<tr><td align=right valign=top>SdifComponentT* </td><td><a href="#SdifComponentT*_SdifFrameTypeGetComponent_(SdifFrameTypeT_*FrameType,_char_*NameC)$"><font color=green>SdifFrameTypeGetComponent</font></a> (SdifFrameTypeT *FrameType, char *NameC);</td></tr>
<tr><td align=right valign=top>SdifComponentT* </td><td><a href="#SdifComponentT*_SdifFrameTypeGetNthComponent_(SdifFrameTypeT_*FrameType,_SdifUInt4_NumC)$"><font color=green>SdifFrameTypeGetNthComponent</font></a> (SdifFrameTypeT *FrameType, SdifUInt4 NumC);</td></tr>
<tr><td align=right valign=top>SdifFrameTypeT* </td><td><a href="#SdifFrameTypeT*_SdifFrameTypePutComponent_(SdifFrameTypeT_*FrameType,_SdifSignature_MtrxS,_char_*NameC)$"><font color=green>SdifFrameTypePutComponent</font></a> (SdifFrameTypeT *FrameType, SdifSignature MtrxS, char *NameC);</td></tr>
<tr><td align=right valign=top>SdifFrameTypeT* </td><td><a href="#SdifFrameTypeT*_SdifGetFrameType_(SdifHashTableT_*FrameTypeHT,_SdifSignature_FramS)$"><font color=green>SdifGetFrameType</font></a> (SdifHashTableT *FrameTypeHT, SdifSignature FramS);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPutFrameType_(SdifHashTableT_*FrameTypeHT,_SdifFrameTypeT_*FrameType)$"><font color=green>SdifPutFrameType</font></a> (SdifHashTableT *FrameTypeHT, SdifFrameTypeT *FrameType);</td></tr>
<tr><td align=right valign=top>SdifUInt2 </td><td><a href="#SdifUInt2_SdifExistUserFrameType_(SdifHashTableT_*FrameTypeHT)$"><font color=green>SdifExistUserFrameType</font></a> (SdifHashTableT *FrameTypeHT);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$"><font color=green>SdifSignatureConst</font></a> (SdifUInt4 four_char_code);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	utility functions</strong></td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// DOC: <p></strong></td></tr>
<tr><td align=right valign=top>char* </td><td><a href="#char*_SdifSignatureToString(SdifSignature_Signature)$"><font color=green>SdifSignatureToString</font></a>(SdifSignature Signature);</td></tr>
<tr><td align=right valign=top>short </td><td><a href="#short_SdifSignatureCmpNoVersion(SdifSignature_Signature1,_SdifSignature_Signature2)$"><font color=green>SdifSignatureCmpNoVersion</font></a>(SdifSignature Signature1, SdifSignature Signature2);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifSizeofDataType_(SdifDataTypeET_DataType)$"><font color=green>SdifSizeofDataType</font></a> (SdifDataTypeET DataType);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifDataTypeKnown_(SdifDataTypeET_DataType)$"><font color=green>SdifDataTypeKnown</font></a> (SdifDataTypeET DataType);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// DOC: <p></strong></td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifPaddingCalculate_(size_t_NbBytes)$"><font color=green>SdifPaddingCalculate</font></a> (size_t NbBytes);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// DOC: <p></strong></td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFPaddingCalculate_(FILE_*f,_size_t_NbBytes)$"><font color=green>SdifFPaddingCalculate</font></a> (FILE *f, size_t NbBytes);</td></tr>
<tr><td align=right valign=top>short </td><td><a href="#short_SdifFloat8Equ(SdifFloat8_f1,_SdifFloat8_f2)$"><font color=green>SdifFloat8Equ</font></a>(SdifFloat8 f1, SdifFloat8 f2);</td></tr>
<tr><td align=right valign=top>SdifMachineET </td><td><a href="#SdifMachineET_SdifGetMachineType(void)$"><font color=green>SdifGetMachineType</font></a>(void);</td></tr>
<tr><td align=right valign=top>SdifMachineET </td><td><a href="#SdifMachineET_SdifInitMachineType(void)$"><font color=green>SdifInitMachineType</font></a>(void);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifLittleToBig(void_*BigPtr,_void_*LittlePtr,_size_t_size)$"><font color=green>SdifLittleToBig</font></a>(void *BigPtr, void *LittlePtr, size_t size);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifBigToLittle(void_*InOutPtr,_size_t_size)$"><font color=green>SdifBigToLittle</font></a>(void *InOutPtr, size_t size);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifStrLen_(const_char_*s)$"><font color=green>SdifStrLen</font></a> (const char *s);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifStrCmp_(const_char_*s1,_const_char_*s2)$"><font color=green>SdifStrCmp</font></a> (const char *s1, const char *s2);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifStrEq(const_char_*s1,_const_char_*s2)$"><font color=green>SdifStrEq</font></a>(const char *s1, const char *s2);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifStrNCmp_(const_char_*s1,_const_char_*s2,_unsigned_int_n)$"><font color=green>SdifStrNCmp</font></a> (const char *s1, const char *s2, unsigned int n);</td></tr>
<tr><td align=right valign=top>char* </td><td><a href="#char*_SdifStrNCpy_(char_*s1,_const_char_*s2,_unsigned_int_n)$"><font color=green>SdifStrNCpy</font></a> (char *s1, const char *s2, unsigned int n);</td></tr>
<tr><td align=right valign=top>char* </td><td><a href="#char*_SdifCreateStrNCpy_(const_char*_Source,_size_t_Size)$"><font color=green>SdifCreateStrNCpy</font></a> (const char* Source, size_t Size);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillStr_(char*_String)$"><font color=green>SdifKillStr</font></a> (char* String);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifSetStdIOBinary_(void)$"><font color=green>SdifSetStdIOBinary</font></a> (void);</td></tr>
<tr><td align=right valign=top>FILE* </td><td><a href="#FILE*_SdiffBinOpen_(const_char_*_Name,_SdifBinaryModeET_Mode)$"><font color=green>SdiffBinOpen</font></a> (const char * Name, SdifBinaryModeET Mode);</td></tr>
<tr><td align=right valign=top>SdifInt4 </td><td><a href="#SdifInt4_SdiffBinClose_(FILE_*f)$"><font color=green>SdiffBinClose</font></a> (FILE *f);</td></tr>
<tr><td align=right valign=top>SdifHashTableT* </td><td><a href="#SdifHashTableT*_SdifCreateHashTable(unsigned_int_HashSize,_SdifHashIndexTypeET_IndexType,_void_(*Killer)())$"><font color=green>SdifCreateHashTable</font></a>(unsigned int HashSize, SdifHashIndexTypeET IndexType, void (*Killer)());</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifMakeEmptyHashTable_(SdifHashTableT*_HTable)$"><font color=green>SdifMakeEmptyHashTable</font></a> (SdifHashTableT* HTable);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillHashTable_(SdifHashTableT*_HTable)$"><font color=green>SdifKillHashTable</font></a> (SdifHashTableT* HTable);</td></tr>
<tr><td align=right valign=top>unsigned int </td><td><a href="#unsigned_int_SdifHashChar(const_char*_s,_unsigned_int_nchar,_unsigned_int_HashSize)$"><font color=green>SdifHashChar</font></a>(const char* s, unsigned int nchar, unsigned int HashSize);</td></tr>
<tr><td align=right valign=top>void* </td><td><a href="#void*_SdifHashTableSearchChar(SdifHashTableT*_HTable,_const_char_*s,_unsigned_int_nchar)$"><font color=green>SdifHashTableSearchChar</font></a>(SdifHashTableT* HTable, const char *s, unsigned int nchar);</td></tr>
<tr><td align=right valign=top>SdifHashTableT* </td><td><a href="#SdifHashTableT*_SdifHashTablePutChar_(SdifHashTableT*_HTable,_const_char_*s,_unsigned_int_nchar,_void*_Data)$"><font color=green>SdifHashTablePutChar</font></a> (SdifHashTableT* HTable, const char *s, unsigned int nchar, void* Data);</td></tr>
<tr><td align=right valign=top>unsigned int </td><td><a href="#unsigned_int_SdifHashInt4(unsigned_int_i,_unsigned_int_HashSize)$"><font color=green>SdifHashInt4</font></a>(unsigned int i, unsigned int HashSize);</td></tr>
<tr><td align=right valign=top>void* </td><td><a href="#void*_SdifHashTableSearchInt4(SdifHashTableT*_HTable,_unsigned_int_i)$"><font color=green>SdifHashTableSearchInt4</font></a>(SdifHashTableT* HTable, unsigned int i);</td></tr>
<tr><td align=right valign=top>SdifHashTableT* </td><td><a href="#SdifHashTableT*_SdifHashTablePutInt4_(SdifHashTableT*_HTable,_const_unsigned_int_i,_void*_Data)$"><font color=green>SdifHashTablePutInt4</font></a> (SdifHashTableT* HTable, const unsigned int i, void* Data);</td></tr>
<tr><td align=right valign=top>void* </td><td><a href="#void*_SdifHashTableSearch_(SdifHashTableT*_HTable,_void_*ptr,_unsigned_int_nobj)$"><font color=green>SdifHashTableSearch</font></a> (SdifHashTableT* HTable, void *ptr, unsigned int nobj);</td></tr>
<tr><td align=right valign=top>SdifHashTableT* </td><td><a href="#SdifHashTableT*_SdifHashTablePut_(SdifHashTableT*_HTable,_const_void_*ptr,_unsigned_int_nobj,_void*_Data)$"><font color=green>SdifHashTablePut</font></a> (SdifHashTableT* HTable, const void *ptr, unsigned int nobj, void* Data);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFReadNextSelectedFrameHeader_(SdifFileT_*file)$"><font color=green>SdifFReadNextSelectedFrameHeader</font></a> (SdifFileT *file);</td></tr>
<tr><td align=right valign=top></td><td><a href="#SdifFWriteMatrixColumns_(SdifFileT_*file,_SdifSignature_Signature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol,_void_*columns_[])$"><font color=green>SdifFWriteMatrixColumns</font></a> (SdifFileT *file, SdifSignature Signature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol, void *columns []);</td></tr>
<tr><td align=right valign=top></td><td><a href="#SdifFWriteTextMatrix_(SdifFileT_f,_SdifSignature_matrixsig,_const_char_*str)_$"><font color=green>SdifFWriteTextMatrix</font></a> (SdifFileT f, SdifSignature matrixsig, const char *str) ;</td></tr>
<tr><td align=right valign=top></td><td><a href="#SdifReadSimple_(char_*filename,_SdifMatrixCallbackT_matrixfunc,_void_*userdata)$"><font color=green>SdifReadSimple</font></a> (char *filename, SdifMatrixCallbackT matrixfunc, void *userdata);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// see SdifFRead</strong></td></tr>
<tr><td align=right valign=top></td><td><a href="#SdifFReadMatrixAs_TYPE__()$"><font color=green>SdifFReadMatrixAs_TYPE_</font></a> ();</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFReadMatrix_(SdifFileT_*file)$"><font color=green>SdifFReadMatrix</font></a> (SdifFileT *file);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// with type conversion</strong></td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFReadMatrixAs_(SdifFileT_*file,_SdifDataTypeET_as_type)$"><font color=green>SdifFReadMatrixAs</font></a> (SdifFileT *file, SdifDataTypeET as_type);</td></tr>
<tr><td align=right valign=top>char *</td><td><a href="#char_*SdifFReadTextMatrix_(SdifFileT_*file)$"><font color=green>SdifFReadTextMatrix</font></a> (SdifFileT *file);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFReadMatrixData_(SdifFileT_*file,_void_*target)$"><font color=green>SdifFReadMatrixData</font></a> (SdifFileT *file, void *target);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// with type conversion</strong></td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFReadMatrixDataAs_(SdifFileT_*file,_void_*target,_SdifDataTypeET_as_type)$"><font color=green>SdifFReadMatrixDataAs</font></a> (SdifFileT *file, void *target, SdifDataTypeET as_type);</td></tr>
<tr><td align=right valign=top>void *</td><td><a href="#void_*SdifFCurrMatrixData_(SdifFileT_*file)_$"><font color=green>SdifFCurrMatrixData</font></a> (SdifFileT *file) ;</td></tr>
<tr><td align=right valign=top>void *</td><td><a href="#void_*SdifGetColumn_()$"><font color=green>SdifGetColumn</font></a> ();</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// Error handling</strong></td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFCheckStatus_(SdifFileT_*file)_$"><font color=green>SdifFCheckStatus</font></a> (SdifFileT *file) ;</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFCheckStatusPrint_(SdifFileT_*file)_$"><font color=green>SdifFCheckStatusPrint</font></a> (SdifFileT *file) ;</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// stocks management</strong></td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifInitListNStock_(SdifListNStockT_*Stock,_unsigned_int_SizeOfOneStock)$"><font color=green>SdifInitListNStock</font></a> (SdifListNStockT *Stock, unsigned int SizeOfOneStock);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifNewStock_(SdifListNStockT_*Stock)$"><font color=green>SdifNewStock</font></a> (SdifListNStockT *Stock);</td></tr>
<tr><td align=right valign=top>SdifListNT* </td><td><a href="#SdifListNT*_SdifGetNewNodeFromTrash_(SdifListNStockT_*Stock)$"><font color=green>SdifGetNewNodeFromTrash</font></a> (SdifListNStockT *Stock);</td></tr>
<tr><td align=right valign=top>SdifListNT* </td><td><a href="#SdifListNT*_SdifGetNewNodeFromStock_(SdifListNStockT_*Stock)$"><font color=green>SdifGetNewNodeFromStock</font></a> (SdifListNStockT *Stock);</td></tr>
<tr><td align=right valign=top>SdifListNT* </td><td><a href="#SdifListNT*_SdifGetNewNode_(SdifListNStockT_*Stock)$"><font color=green>SdifGetNewNode</font></a> (SdifListNStockT *Stock);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPutNodeInTrash_(SdifListNStockT_*Stock,_SdifListNT*_OldNode)$"><font color=green>SdifPutNodeInTrash</font></a> (SdifListNStockT *Stock, SdifListNT* OldNode);</td></tr>
<tr><td align=right valign=top>SdifListNT* </td><td><a href="#SdifListNT*_SdifKillListNStock_(SdifListNT*_OldStock)$"><font color=green>SdifKillListNStock</font></a> (SdifListNT* OldStock);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifListNStockMakeEmpty_(SdifListNStockT_*Stock)$"><font color=green>SdifListNStockMakeEmpty</font></a> (SdifListNStockT *Stock);</td></tr>
<tr><td align=right valign=top>SdifListNStockT* </td><td><a href="#SdifListNStockT*_SdifListNodeStock_(void)$"><font color=green>SdifListNodeStock</font></a> (void);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifInitListNodeStock_(unsigned_int_SizeOfOneStock)$"><font color=green>SdifInitListNodeStock</font></a> (unsigned int SizeOfOneStock);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifDrainListNodeStock_(void)$"><font color=green>SdifDrainListNodeStock</font></a> (void);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// nodes management</strong></td></tr>
<tr><td align=right valign=top>SdifListNT* </td><td><a href="#SdifListNT*_SdifCreateListNode_(SdifListNT_*Next,_void_*Data)$"><font color=green>SdifCreateListNode</font></a> (SdifListNT *Next, void *Data);</td></tr>
<tr><td align=right valign=top>SdifListNT* </td><td><a href="#SdifListNT*_SdifKillListNode_(SdifListNT_*Node,_KillerFT_Killer)$"><font color=green>SdifKillListNode</font></a> (SdifListNT *Node, KillerFT Killer);</td></tr>
<tr><td align=right valign=top>SdifListT* </td><td><a href="#SdifListT*_SdifCreateList_(KillerFT_Killer)$"><font color=green>SdifCreateList</font></a> (KillerFT Killer);</td></tr>
<tr><td align=right valign=top>SdifListT* </td><td><a href="#SdifListT*_SdifKillListHead_(SdifListT*_List)$"><font color=green>SdifKillListHead</font></a> (SdifListT* List);</td></tr>
<tr><td align=right valign=top>SdifListT* </td><td><a href="#SdifListT*_SdifMakeEmptyList_(SdifListT*_List)$"><font color=green>SdifMakeEmptyList</font></a> (SdifListT* List);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillList_(SdifListT*_List)$"><font color=green>SdifKillList</font></a> (SdifListT* List);</td></tr>
<tr><td align=right valign=top>void* </td><td><a href="#void*_SdifListGetHead_(SdifListT*_List)$"><font color=green>SdifListGetHead</font></a> (SdifListT* List);</td></tr>
<tr><td align=right valign=top>void* </td><td><a href="#void*_SdifListGetTail_(SdifListT*_List)$"><font color=green>SdifListGetTail</font></a> (SdifListT* List);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifListIsNext_(SdifListT*_List)$"><font color=green>SdifListIsNext</font></a> (SdifListT* List);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifListIsEmpty_(SdifListT*_List)$"><font color=green>SdifListIsEmpty</font></a> (SdifListT* List);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifListInitLoop_(SdifListT*_List)$"><font color=green>SdifListInitLoop</font></a> (SdifListT* List);</td></tr>
<tr><td align=right valign=top>void* </td><td><a href="#void*_SdifListGetNext_(SdifListT*_List)$"><font color=green>SdifListGetNext</font></a> (SdifListT* List);</td></tr>
<tr><td align=right valign=top>void* </td><td><a href="#void*_SdifListGetCurr_(SdifListT*_List)$"><font color=green>SdifListGetCurr</font></a> (SdifListT* List);</td></tr>
<tr><td align=right valign=top>SdifListT* </td><td><a href="#SdifListT*_SdifListPutTail_(SdifListT*_List,_void_*pData)$"><font color=green>SdifListPutTail</font></a> (SdifListT* List, void *pData);</td></tr>
<tr><td align=right valign=top>SdifListT* </td><td><a href="#SdifListT*_SdifListPutHead_(SdifListT*_List,_void_*pData)$"><font color=green>SdifListPutHead</font></a> (SdifListT* List, void *pData);</td></tr>
<tr><td align=right valign=top>unsigned int </td><td><a href="#unsigned_int_SdifListGetNbData_(SdifListT*_List)$"><font color=green>SdifListGetNbData</font></a> (SdifListT* List);</td></tr>
<tr><td align=right valign=top>SdifMatrixHeaderT* </td><td><a href="#SdifMatrixHeaderT*_SdifCreateMatrixHeader_(SdifSignature_Signature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol)$"><font color=green>SdifCreateMatrixHeader</font></a> (SdifSignature Signature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol);</td></tr>
<tr><td align=right valign=top>SdifMatrixHeaderT* </td><td><a href="#SdifMatrixHeaderT*_SdifCreateMatrixHeaderEmpty_(void)$"><font color=green>SdifCreateMatrixHeaderEmpty</font></a> (void);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillMatrixHeader_(SdifMatrixHeaderT_*MatrixHeader)$"><font color=green>SdifKillMatrixHeader</font></a> (SdifMatrixHeaderT *MatrixHeader);</td></tr>
<tr><td align=right valign=top>SdifOneRowT* </td><td><a href="#SdifOneRowT*_SdifCreateOneRow_(SdifDataTypeET_DataType,_SdifUInt4_NbGranuleAlloc)$"><font color=green>SdifCreateOneRow</font></a> (SdifDataTypeET DataType, SdifUInt4 NbGranuleAlloc);</td></tr>
<tr><td align=right valign=top>SdifOneRowT* </td><td><a href="#SdifOneRowT*_SdifReInitOneRow_(SdifOneRowT_*OneRow,_SdifDataTypeET_DataType,_SdifUInt4_NbData)$"><font color=green>SdifReInitOneRow</font></a> (SdifOneRowT *OneRow, SdifDataTypeET DataType, SdifUInt4 NbData);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillOneRow_(SdifOneRowT_*OneRow)$"><font color=green>SdifKillOneRow</font></a> (SdifOneRowT *OneRow);</td></tr>
<tr><td align=right valign=top>SdifOneRowT* </td><td><a href="#SdifOneRowT*_SdifOneRowPutValue_(SdifOneRowT_*OneRow,_SdifUInt4_numCol,_SdifFloat8_Value)$"><font color=green>SdifOneRowPutValue</font></a> (SdifOneRowT *OneRow, SdifUInt4 numCol, SdifFloat8 Value);</td></tr>
<tr><td align=right valign=top>SdifFloat8 </td><td><a href="#SdifFloat8_SdifOneRowGetValue_(SdifOneRowT_*OneRow,_SdifUInt4_numCol)$"><font color=green>SdifOneRowGetValue</font></a> (SdifOneRowT *OneRow, SdifUInt4 numCol);</td></tr>
<tr><td align=right valign=top>SdifFloat8 </td><td><a href="#SdifFloat8_SdifOneRowGetValueColName_(SdifOneRowT_*OneRow,_SdifMatrixTypeT_*MatrixType,_char_*_NameCD)$"><font color=green>SdifOneRowGetValueColName</font></a> (SdifOneRowT *OneRow, SdifMatrixTypeT *MatrixType, char * NameCD);</td></tr>
<tr><td align=right valign=top>SdifMatrixDataT* </td><td><a href="#SdifMatrixDataT*_SdifCreateMatrixData_(SdifSignature_Signature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol)$"><font color=green>SdifCreateMatrixData</font></a> (SdifSignature Signature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillMatrixData_(SdifMatrixDataT_*MatrixData)$"><font color=green>SdifKillMatrixData</font></a> (SdifMatrixDataT *MatrixData);</td></tr>
<tr><td align=right valign=top>SdifMatrixDataT* </td><td><a href="#SdifMatrixDataT*_SdifMatrixDataPutValue_(SdifMatrixDataT_*MatrixData,_SdifUInt4_numRow,_SdifUInt4_numCol,_SdifFloat8_Value)$"><font color=green>SdifMatrixDataPutValue</font></a> (SdifMatrixDataT *MatrixData, SdifUInt4 numRow, SdifUInt4 numCol, SdifFloat8 Value);</td></tr>
<tr><td align=right valign=top>SdifFloat8 </td><td><a href="#SdifFloat8_SdifMatrixDataGetValue_(SdifMatrixDataT_*MatrixData,_SdifUInt4_numRow,_SdifUInt4_numCol)$"><font color=green>SdifMatrixDataGetValue</font></a> (SdifMatrixDataT *MatrixData, SdifUInt4 numRow, SdifUInt4 numCol);</td></tr>
<tr><td align=right valign=top>SdifColumnDefT* </td><td><a href="#SdifColumnDefT*_SdifCreateColumnDef_(char_*Name,_unsigned_int_Num)$"><font color=green>SdifCreateColumnDef</font></a> (char *Name, unsigned int Num);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillColumnDef_(void_*ColumnDef)$"><font color=green>SdifKillColumnDef</font></a> (void *ColumnDef);</td></tr>
<tr><td align=right valign=top>SdifMatrixTypeT* </td><td><a href="#SdifMatrixTypeT*_SdifCreateMatrixType_(SdifSignature_Signature,_SdifMatrixTypeT_*PredefinedMatrixType)$"><font color=green>SdifCreateMatrixType</font></a> (SdifSignature Signature, SdifMatrixTypeT *PredefinedMatrixType);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillMatrixType_(SdifMatrixTypeT_*MatrixType)$"><font color=green>SdifKillMatrixType</font></a> (SdifMatrixTypeT *MatrixType);</td></tr>
<tr><td align=right valign=top>SdifMatrixTypeT* </td><td><a href="#SdifMatrixTypeT*_SdifMatrixTypeInsertTailColumnDef_(SdifMatrixTypeT_*MatrixType,_char_*NameCD)$"><font color=green>SdifMatrixTypeInsertTailColumnDef</font></a> (SdifMatrixTypeT *MatrixType, char *NameCD);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifMatrixTypeGetNumColumnDef_(SdifMatrixTypeT_*MatrixType,_char_*NameCD)$"><font color=green>SdifMatrixTypeGetNumColumnDef</font></a> (SdifMatrixTypeT *MatrixType, char *NameCD);</td></tr>
<tr><td align=right valign=top>SdifColumnDefT* </td><td><a href="#SdifColumnDefT*_SdifMatrixTypeGetColumnDef_(SdifMatrixTypeT_*MatrixType,_char_*NameCD)$"><font color=green>SdifMatrixTypeGetColumnDef</font></a> (SdifMatrixTypeT *MatrixType, char *NameCD);</td></tr>
<tr><td align=right valign=top>SdifColumnDefT* </td><td><a href="#SdifColumnDefT*_SdifMatrixTypeGetNthColumnDef_(SdifMatrixTypeT_*MatrixType,_SdifUInt4_NumCD)$"><font color=green>SdifMatrixTypeGetNthColumnDef</font></a> (SdifMatrixTypeT *MatrixType, SdifUInt4 NumCD);</td></tr>
<tr><td align=right valign=top>SdifMatrixTypeT* </td><td><a href="#SdifMatrixTypeT*_SdifGetMatrixType_(SdifHashTableT_*MatrixTypesTable,_SdifSignature_Signature)$"><font color=green>SdifGetMatrixType</font></a> (SdifHashTableT *MatrixTypesTable, SdifSignature Signature);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPutMatrixType(SdifHashTableT_*MatrixTypesTable,_SdifMatrixTypeT*_MatrixType)$"><font color=green>SdifPutMatrixType</font></a>(SdifHashTableT *MatrixTypesTable, SdifMatrixTypeT* MatrixType);</td></tr>
<tr><td align=right valign=top>SdifUInt2 </td><td><a href="#SdifUInt2_SdifExistUserMatrixType(SdifHashTableT_*MatrixTypesTable)$"><font color=green>SdifExistUserMatrixType</font></a>(SdifHashTableT *MatrixTypesTable);</td></tr>
<tr><td align=right valign=top>SdifBlockNodeT* </td><td><a href="#SdifBlockNodeT*_SdifCreateBlockNode_(SdifBlockNodeT*_Next,_char_*file,_int_line,_char*_type,_void*_ptr,_size_t_size,_size_t_nobj)$"><font color=green>SdifCreateBlockNode</font></a> (SdifBlockNodeT* Next, char *file, int line, char* type, void* ptr, size_t size, size_t nobj);</td></tr>
<tr><td align=right valign=top>SdifBlockNodeT* </td><td><a href="#SdifBlockNodeT*_SdifKillBlockNode_(SdifBlockNodeT*_BlockNode)$"><font color=green>SdifKillBlockNode</font></a> (SdifBlockNodeT* BlockNode);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintBlockNode_(int_sizealloc,_char*_mess,_SdifBlockNodeT*_BlockNode)$"><font color=green>SdifPrintBlockNode</font></a> (int sizealloc, char* mess, SdifBlockNodeT* BlockNode);</td></tr>
<tr><td align=right valign=top>void* </td><td><a href="#void*_SdifMr_alloc_(SdifBlockListT*_L,_size_t_size,_size_t_nobj)$"><font color=green>SdifMr_alloc</font></a> (SdifBlockListT* L, size_t size, size_t nobj);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifMr_free_(SdifBlockListT*_L,_void*_ptr)$"><font color=green>SdifMr_free</font></a> (SdifBlockListT* L, void* ptr);</td></tr>
<tr><td align=right valign=top>void* </td><td><a href="#void*_SdifMr_realloc_(SdifBlockListT*_L,_void*_oldptr,_size_t_size,_size_t_nobj)$"><font color=green>SdifMr_realloc</font></a> (SdifBlockListT* L, void* oldptr, size_t size, size_t nobj);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifMrDrainBlockList_(SdifBlockListT*_L)$"><font color=green>SdifMrDrainBlockList</font></a> (SdifBlockListT* L);</td></tr>
<tr><td align=right valign=top>SdifNameValueT* </td><td><a href="#SdifNameValueT*_SdifCreateNameValue(const_char_*Name,_const_char_*Value)$"><font color=green>SdifCreateNameValue</font></a>(const char *Name, const char *Value);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillNameValue(SdifNameValueT_*NameValue)$"><font color=green>SdifKillNameValue</font></a>(SdifNameValueT *NameValue);</td></tr>
<tr><td align=right valign=top>SdifNameValueTableT* </td><td><a href="#SdifNameValueTableT*_SdifCreateNameValueTable(_SdifUInt4_StreamID,_SdifUInt4_HashSize,_SdifUInt4_NumTable)$"><font color=green>SdifCreateNameValueTable</font></a>( SdifUInt4 StreamID, SdifUInt4 HashSize, SdifUInt4 NumTable);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillNameValueTable_(void*_NVTable)$"><font color=green>SdifKillNameValueTable</font></a> (void* NVTable);</td></tr>
<tr><td align=right valign=top>SdifNameValueT* </td><td><a href="#SdifNameValueT*_SdifNameValueTableGetNV_(SdifNameValueTableT*_NVTable,_const_char_*Name)$"><font color=green>SdifNameValueTableGetNV</font></a> (SdifNameValueTableT* NVTable, const char *Name);</td></tr>
<tr><td align=right valign=top>SdifNameValueT* </td><td><a href="#SdifNameValueT*_SdifNameValueTablePutNV_(SdifNameValueTableT*_NVTable,_const_char_*Name,_const_char_*Value)$"><font color=green>SdifNameValueTablePutNV</font></a> (SdifNameValueTableT* NVTable, const char *Name, const char *Value);</td></tr>
<tr><td align=right valign=top>SdifFloat8 </td><td><a href="#SdifFloat8_SdifNameValueTableGetTime_(SdifNameValueTableT*_NVTable)$"><font color=green>SdifNameValueTableGetTime</font></a> (SdifNameValueTableT* NVTable);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifNameValueTableGetNumTable_(SdifNameValueTableT*_NVTable)$"><font color=green>SdifNameValueTableGetNumTable</font></a> (SdifNameValueTableT* NVTable);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifNameValueTableGetStreamID_(SdifNameValueTableT*_NVTable)$"><font color=green>SdifNameValueTableGetStreamID</font></a> (SdifNameValueTableT* NVTable);</td></tr>
<tr><td align=right valign=top>SdifNameValuesLT* </td><td><a href="#SdifNameValuesLT*_SdifCreateNameValuesL_(SdifUInt4_HashSize)$"><font color=green>SdifCreateNameValuesL</font></a> (SdifUInt4 HashSize);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillNameValuesL_(SdifNameValuesLT_*NameValuesL)$"><font color=green>SdifKillNameValuesL</font></a> (SdifNameValuesLT *NameValuesL);</td></tr>
<tr><td align=right valign=top>SdifNameValuesLT* </td><td><a href="#SdifNameValuesLT*_SdifNameValuesLNewTable_(SdifNameValuesLT_*NameValuesL,_SdifUInt4_StreamID)$"><font color=green>SdifNameValuesLNewTable</font></a> (SdifNameValuesLT *NameValuesL, SdifUInt4 StreamID);</td></tr>
<tr><td align=right valign=top>SdifNameValueTableT*</td><td><a href="#SdifNameValueTableT*SdifNameValuesLSetCurrNVT_(SdifNameValuesLT_*NameValuesL,_SdifUInt4_NumCurrNVT)$"><font color=green>SdifNameValuesLSetCurrNVT</font></a> (SdifNameValuesLT *NameValuesL, SdifUInt4 NumCurrNVT);</td></tr>
<tr><td align=right valign=top>SdifNameValueT* </td><td><a href="#SdifNameValueT*_SdifNameValuesLGet_(SdifNameValuesLT_*NameValuesL,_char_*Name)$"><font color=green>SdifNameValuesLGet</font></a> (SdifNameValuesLT *NameValuesL, char *Name);</td></tr>
<tr><td align=right valign=top>SdifNameValueT* </td><td><a href="#SdifNameValueT*_SdifNameValuesLGetCurrNVT_(SdifNameValuesLT_*NameValuesL,_const_char_*Name)$"><font color=green>SdifNameValuesLGetCurrNVT</font></a> (SdifNameValuesLT *NameValuesL, const char *Name);</td></tr>
<tr><td align=right valign=top>SdifNameValueT* </td><td><a href="#SdifNameValueT*_SdifNameValuesLPutCurrNVT_(SdifNameValuesLT_*NameValuesL,_const_char_*Name,_const_char_*Value)$"><font color=green>SdifNameValuesLPutCurrNVT</font></a> (SdifNameValuesLT *NameValuesL, const char *Name, const char *Value);</td></tr>
<tr><td align=right valign=top>SdifUInt2 </td><td><a href="#SdifUInt2_SdifNameValuesLIsNotEmpty_(SdifNameValuesLT_*NameValuesL)$"><font color=green>SdifNameValuesLIsNotEmpty</font></a> (SdifNameValuesLT *NameValuesL);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// <p> * Obsolete <p></strong></td></tr>
<tr><td align=right valign=top>SdifNameValuesLT* </td><td><a href="#SdifNameValuesLT*_SdifNameValuesLNewHT_(SdifNameValuesLT_*NameValuesL)$"><font color=green>SdifNameValuesLNewHT</font></a> (SdifNameValuesLT *NameValuesL);</td></tr>
<tr><td align=right valign=top>SdifHashTableT* </td><td><a href="#SdifHashTableT*_SdifNameValuesLSetCurrHT(SdifNameValuesLT_*NameValuesL,_SdifUInt4_NumCurrHT)$"><font color=green>SdifNameValuesLSetCurrHT</font></a>(SdifNameValuesLT *NameValuesL, SdifUInt4 NumCurrHT);</td></tr>
<tr><td align=right valign=top>SdifNameValueT* </td><td><a href="#SdifNameValueT*_SdifNameValuesLGetCurrHT(SdifNameValuesLT_*NameValuesL,_char_*Name)$"><font color=green>SdifNameValuesLGetCurrHT</font></a>(SdifNameValuesLT *NameValuesL, char *Name);</td></tr>
<tr><td align=right valign=top>SdifNameValueT* </td><td><a href="#SdifNameValueT*_SdifNameValuesLPutCurrHT(SdifNameValuesLT_*NameValuesL,_const_char_*Name,_const_char_*Value)$"><font color=green>SdifNameValuesLPutCurrHT</font></a>(SdifNameValuesLT *NameValuesL, const char *Name, const char *Value);</td></tr>
<tr><td align=right valign=top>SdifFrameTypeT* </td><td><a href="#SdifFrameTypeT*_CreateF_1FOB(void)$"><font color=green>CreateF_1FOB</font></a>(void);</td></tr>
<tr><td align=right valign=top>SdifFrameTypeT* </td><td><a href="#SdifFrameTypeT*_CreateF_1REB(void)$"><font color=green>CreateF_1REB</font></a>(void);</td></tr>
<tr><td align=right valign=top>SdifFrameTypeT* </td><td><a href="#SdifFrameTypeT*_CreateF_1NOI(void)$"><font color=green>CreateF_1NOI</font></a>(void);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifCreatePredefinedTypes(SdifHashTableT_*MatrixTypesHT,_SdifHashTableT_*FrameTypesHT)$"><font color=green>SdifCreatePredefinedTypes</font></a>(SdifHashTableT *MatrixTypesHT, SdifHashTableT *FrameTypesHT);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintMatrixType(FILE_*fw,_SdifMatrixTypeT_*MatrixType)$"><font color=green>SdifPrintMatrixType</font></a>(FILE *fw, SdifMatrixTypeT *MatrixType);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintAllMatrixType(FILE_*fw,_SdifFileT_*SdifF)$"><font color=green>SdifPrintAllMatrixType</font></a>(FILE *fw, SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintFrameType(FILE_*fw,_SdifFrameTypeT_*FrameType)$"><font color=green>SdifPrintFrameType</font></a>(FILE *fw, SdifFrameTypeT *FrameType);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintAllFrameType(FILE_*fw,_SdifFileT_*SdifF)$"><font color=green>SdifPrintAllFrameType</font></a>(FILE *fw, SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintMatrixHeader(FILE_*f,_SdifMatrixHeaderT_*MatrixHeader)$"><font color=green>SdifPrintMatrixHeader</font></a>(FILE *f, SdifMatrixHeaderT *MatrixHeader);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintOneRow(FILE_*f,_SdifOneRowT_*OneRow)$"><font color=green>SdifPrintOneRow</font></a>(FILE *f, SdifOneRowT *OneRow);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintMatrixRows(FILE*_f,_SdifMatrixDataT_*MatrixData)$"><font color=green>SdifPrintMatrixRows</font></a>(FILE* f, SdifMatrixDataT *MatrixData);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintFrameHeader(FILE_*f,_SdifFrameHeaderT*_FrameHeader)$"><font color=green>SdifPrintFrameHeader</font></a>(FILE *f, SdifFrameHeaderT* FrameHeader);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintAllType(FILE_*fw,_SdifFileT_*SdifF)$"><font color=green>SdifPrintAllType</font></a>(FILE *fw, SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_Sdiffread_(void_*ptr,_size_t_size,_size_t_nobj,_FILE_*stream)$"><font color=green>Sdiffread</font></a> (void *ptr, size_t size, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_Sdiffwrite_(void_*ptr,_size_t_size,_size_t_nobj,_FILE_*stream)$"><font color=green>Sdiffwrite</font></a> (void *ptr, size_t size, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffReadChar_(SdifChar_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffReadChar</font></a> (SdifChar *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffReadInt2_(SdifInt2_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffReadInt2</font></a> (SdifInt2 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffReadUInt2_(SdifUInt2_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffReadUInt2</font></a> (SdifUInt2 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffReadInt4_(SdifInt4_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffReadInt4</font></a> (SdifInt4 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffReadUInt4_(SdifUInt4_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffReadUInt4</font></a> (SdifUInt4 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffReadFloat4_(SdifFloat4_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffReadFloat4</font></a> (SdifFloat4 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffReadFloat8_(SdifFloat8_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffReadFloat8</font></a> (SdifFloat8 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffWriteChar_(SdifChar_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffWriteChar</font></a> (SdifChar *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffWriteInt2_(SdifInt2_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffWriteInt2</font></a> (SdifInt2 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffWriteUInt2_(SdifUInt2_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffWriteUInt2</font></a> (SdifUInt2 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffWriteInt4_(SdifInt4_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffWriteInt4</font></a> (SdifInt4 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffWriteUInt4_(SdifUInt4_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffWriteUInt4</font></a> (SdifUInt4 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffWriteFloat4_(SdifFloat4_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffWriteFloat4</font></a> (SdifFloat4 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffWriteFloat8_(SdifFloat8_*ptr,_size_t_nobj,_FILE_*stream)$"><font color=green>SdiffWriteFloat8</font></a> (SdifFloat8 *ptr, size_t nobj, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffWriteSignature_(SdifSignature_*Signature,_FILE_*stream)$"><font color=green>SdiffWriteSignature</font></a> (SdifSignature *Signature, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffWriteString_(char*_ptr,_FILE_*stream)$"><font color=green>SdiffWriteString</font></a> (char* ptr, FILE *stream);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffReadSpace_(FILE*_fr)$"><font color=green>SdiffReadSpace</font></a> (FILE* fr);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffReadSpacefromSdifString(SdifStringT_*SdifString)$"><font color=green>SdiffReadSpacefromSdifString</font></a>(SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifIsAReservedChar_(char_c)$"><font color=green>SdifIsAReservedChar</font></a> (char c);</td></tr>
<tr><td align=right valign=top>char *</td><td><a href="#char_*SdifStringToNV_(_char_*str)$"><font color=green>SdifStringToNV</font></a> ( char *str);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdiffGetString_(FILE*_fr,_char*_s,_size_t_ncMax,_size_t_*NbCharRead)$"><font color=green>SdiffGetString</font></a> (FILE* fr, char* s, size_t ncMax, size_t *NbCharRead);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdiffGetSignature_(FILE*_fr,_SdifSignature_*Signature,_size_t_*NbCharRead)$"><font color=green>SdiffGetSignature</font></a> (FILE* fr, SdifSignature *Signature, size_t *NbCharRead);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdiffGetSignaturefromSdifString(SdifStringT_*SdifString,_SdifSignature_*Signature)$"><font color=green>SdiffGetSignaturefromSdifString</font></a>(SdifStringT *SdifString, SdifSignature *Signature);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdiffGetWordUntil_(FILE*_fr,_char*_s,_size_t_ncMax,_size_t_*NbCharRead,_char_*CharsEnd)$"><font color=green>SdiffGetWordUntil</font></a> (FILE* fr, char* s, size_t ncMax, size_t *NbCharRead, char *CharsEnd);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdiffGetWordUntilfromSdifString(SdifStringT_*SdifString,_char*_s,_size_t_ncMax,char_*CharsEnd)$"><font color=green>SdiffGetWordUntilfromSdifString</font></a>(SdifStringT *SdifString, char* s, size_t ncMax,char *CharsEnd);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdiffGetStringUntil_(FILE*_fr,_char*_s,_size_t_ncMax,_size_t_*NbCharRead,_char_*CharsEnd)$"><font color=green>SdiffGetStringUntil</font></a> (FILE* fr, char* s, size_t ncMax, size_t *NbCharRead, char *CharsEnd);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdiffGetStringUntilfromSdifString(SdifStringT_*SdifString,_char_*s,_size_t_ncMax,_char_*CharsEnd)$"><font color=green>SdiffGetStringUntilfromSdifString</font></a>(SdifStringT *SdifString, char *s, size_t ncMax, char *CharsEnd);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdiffGetStringWeakUntil(FILE*_fr,_char*_s,_size_t_ncMax,_size_t_*NbCharRead,_char_*CharsEnd)$"><font color=green>SdiffGetStringWeakUntil</font></a>(FILE* fr, char* s, size_t ncMax, size_t *NbCharRead, char *CharsEnd);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdiffGetStringWeakUntilfromSdifString(SdifStringT_*SdifString,_char*_s,_size_t_ncMax,_char_*CharsEnd)$"><font color=green>SdiffGetStringWeakUntilfromSdifString</font></a>(SdifStringT *SdifString, char* s, size_t ncMax, char *CharsEnd);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifSkipASCIIUntil_(FILE*_fr,_size_t_*NbCharRead,_char_*CharsEnd)$"><font color=green>SdifSkipASCIIUntil</font></a> (FILE* fr, size_t *NbCharRead, char *CharsEnd);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffScan_TYPE_(FILE_*stream,_Sdif_TYPE_*ptr,_size_t_nobj)$"><font color=green>SdiffScan_TYPE</font></a> (FILE *stream, Sdif_TYPE *ptr, size_t nobj);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffScanFloat4_(FILE_*stream,_SdifFloat4_*ptr,_size_t_nobj)$"><font color=green>SdiffScanFloat4</font></a> (FILE *stream, SdifFloat4 *ptr, size_t nobj);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdiffScanFloat8_(FILE_*stream,_SdifFloat8_*ptr,_size_t_nobj)$"><font color=green>SdiffScanFloat8</font></a> (FILE *stream, SdifFloat8 *ptr, size_t nobj);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifStringToSignature_(char_*str)$"><font color=green>SdifStringToSignature</font></a> (char *str);</td></tr>
<tr><td align=right valign=top>char *</td><td><a href="#char_*SdifBaseName_(const_char*_inPathFileName)$"><font color=green>SdifBaseName</font></a> (const char* inPathFileName);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Init/Deinit</strong></td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifInitSelect_(void)$"><font color=green>SdifInitSelect</font></a> (void);</td></tr>
<tr><td align=right valign=top>SdifSelectionT *</td><td><a href="#SdifSelectionT_*SdifCreateSelection_(void)$"><font color=green>SdifCreateSelection</font></a> (void);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// DOC: <p></strong></td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifInitSelection_(SdifSelectionT_*sel,_const_char_*filename,_int_namelen)$"><font color=green>SdifInitSelection</font></a> (SdifSelectionT *sel, const char *filename, int namelen);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// DOC: <p></strong></td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFreeSelection_(SdifSelectionT_*sel)$"><font color=green>SdifFreeSelection</font></a> (SdifSelectionT *sel);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Parse and Set Selection</strong></td></tr>
<tr><td align=right valign=top>char *</td><td><a href="#char_*SdifSelectFindSelection_(const_char_*filename)$"><font color=green>SdifSelectFindSelection</font></a> (const char *filename);</td></tr>
<tr><td align=right valign=top>char *</td><td><a href="#char_*SdifGetFilenameAndSelection_(_const_char_*filename,_SdifSelectionT_*sel)$"><font color=green>SdifGetFilenameAndSelection</font></a> ( const char *filename, SdifSelectionT *sel);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// DOC: <p></strong></td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifPrintSelection_(FILE_*out,_SdifSelectionT_*sel,_int_options)$"><font color=green>SdifPrintSelection</font></a> (FILE *out, SdifSelectionT *sel, int options);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Add Selections to Element Lists</strong></td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifSelectAdd_TYPE__(SdifListT_*list,__datatype__value)$"><font color=green>SdifSelectAdd_TYPE_</font></a> (SdifListT *list, _datatype_ value);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifSelectAdd_TYPE_Range_(SdifListT_*list,__datatype__value,_SdifSelectTokens_rt,__datatype__range)$"><font color=green>SdifSelectAdd_TYPE_Range</font></a> (SdifListT *list, _datatype_ value, SdifSelectTokens rt, _datatype_ range);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifSelectAddIntRange_(SdifListT_*list,_int_value,_SdifSelectTokens_rt,_int_range)_$"><font color=green>SdifSelectAddIntRange</font></a> (SdifListT *list, int value, SdifSelectTokens rt, int range) ;</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifSelectAddReal_(SdifListT_*list,_double_value)_$"><font color=green>SdifSelectAddReal</font></a> (SdifListT *list, double value) ;</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifSelectAddRealRange_(SdifListT_*list,_double_value,_SdifSelectTokens_rt,_double_range)_$"><font color=green>SdifSelectAddRealRange</font></a> (SdifListT *list, double value, SdifSelectTokens rt, double range) ;</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifSelectAddSignature_(SdifListT_*list,_SdifSignature_value)_$"><font color=green>SdifSelectAddSignature</font></a> (SdifListT *list, SdifSignature value) ;</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifSelectAddSignatureRange_(SdifListT_*list,_SdifSignature_value,_SdifSelectTokens_rt,_SdifSignature_range)_$"><font color=green>SdifSelectAddSignatureRange</font></a> (SdifListT *list, SdifSignature value, SdifSelectTokens rt, SdifSignature range) ;</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifSelectAddString_(SdifListT_*list,_char_*_value)_$"><font color=green>SdifSelectAddString</font></a> (SdifListT *list, char * value) ;</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifSelectAddStringRange_(SdifListT_*list,_char_*_value,_SdifSelectTokens_rt,_char_*_range)_$"><font color=green>SdifSelectAddStringRange</font></a> (SdifListT *list, char * value, SdifSelectTokens rt, char * range) ;</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Query parsed ranges (list of ranges).</strong></td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifSelectGetNextIntRange_(_SdifListP_list,_SdifSelectElementIntT_*range,_int_force_range)$"><font color=green>SdifSelectGetNextIntRange</font></a> ( SdifListP list, SdifSelectElementIntT *range, int force_range);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifSelectGetNextRealRange_(_SdifListP_list,_SdifSelectElementRealT_*range,_int_force_range)$"><font color=green>SdifSelectGetNextRealRange</font></a> ( SdifListP list, SdifSelectElementRealT *range, int force_range);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifSelectGetNextSignature_(_SdifListP_list)$"><font color=green>SdifSelectGetNextSignature</font></a> ( SdifListP list);</td></tr>
<tr><td align=right valign=top>char *</td><td><a href="#char_*SdifSelectGetNextString_(_SdifListP_list)$"><font color=green>SdifSelectGetNextString</font></a> ( SdifListP list);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifSelectGetFirstInt_(SdifListP_l,_int_defval)$"><font color=green>SdifSelectGetFirstInt</font></a> (SdifListP l, int defval);</td></tr>
<tr><td align=right valign=top>double </td><td><a href="#double_SdifSelectGetFirstReal_(SdifListP_l,_double_defval)$"><font color=green>SdifSelectGetFirstReal</font></a> (SdifListP l, double defval);</td></tr>
<tr><td align=right valign=top>char *</td><td><a href="#char_*SdifSelectGetFirstString_(SdifListP_l,_char_*defval)$"><font color=green>SdifSelectGetFirstString</font></a> (SdifListP l, char *defval);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifSelectGetFirstSignature_(SdifListP_l,_SdifSignature_defval)$"><font color=green>SdifSelectGetFirstSignature</font></a> (SdifListP l, SdifSignature defval);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Selection Testing Functions</strong></td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifSelectTestIntRange_(SdifSelectElementT_*elem,_int_cand)$"><font color=green>SdifSelectTestIntRange</font></a> (SdifSelectElementT *elem, int cand);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifSelectTestRealRange_(SdifSelectElementT_*elem,_double_cand)$"><font color=green>SdifSelectTestRealRange</font></a> (SdifSelectElementT *elem, double cand);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifSelectTestInt_(SdifListT_*list,_int_cand)$"><font color=green>SdifSelectTestInt</font></a> (SdifListT *list, int cand);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifSelectTestReal_(SdifListT_*list,_double_cand)$"><font color=green>SdifSelectTestReal</font></a> (SdifListT *list, double cand);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifSelectTestSignature_(SdifListT_*list,_const_SdifSignature_cand)$"><font color=green>SdifSelectTestSignature</font></a> (SdifListT *list, const SdifSignature cand);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifSelectTestString_(SdifListT_*list,_const_char_*cand)$"><font color=green>SdifSelectTestString</font></a> (SdifListT *list, const char *cand);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Using a Selection in File I/O.</strong></td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFrameIsSelected_(SdifFrameHeaderT_*FramH,_SdifSelectionT_*sel)$"><font color=green>SdifFrameIsSelected</font></a> (SdifFrameHeaderT *FramH, SdifSelectionT *sel);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifMatrixIsSelected_(SdifMatrixHeaderT_*MtrxH,_SdifSelectionT_*sel)$"><font color=green>SdifMatrixIsSelected</font></a> (SdifMatrixHeaderT *MtrxH, SdifSelectionT *sel);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFCurrFrameIsSelected_(SdifFileT_*file)$"><font color=green>SdifFCurrFrameIsSelected</font></a> (SdifFileT *file);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFCurrMatrixIsSelected_(SdifFileT_*file)$"><font color=green>SdifFCurrMatrixIsSelected</font></a> (SdifFileT *file);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Handling of a Table of Signatures</strong></td></tr>
<tr><td align=right valign=top>SdifSignatureTabT* </td><td><a href="#SdifSignatureTabT*_SdifCreateSignatureTab_(const_SdifUInt4_NbSignMax)$"><font color=green>SdifCreateSignatureTab</font></a> (const SdifUInt4 NbSignMax);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillSignatureTab_(SdifSignatureTabT_*SignTab)$"><font color=green>SdifKillSignatureTab</font></a> (SdifSignatureTabT *SignTab);</td></tr>
<tr><td align=right valign=top>SdifSignatureTabT* </td><td><a href="#SdifSignatureTabT*_SdifReAllocSignatureTab(SdifSignatureTabT_*SignTab,_const_SdifUInt4_NewNbSignMax)$"><font color=green>SdifReAllocSignatureTab</font></a>(SdifSignatureTabT *SignTab, const SdifUInt4 NewNbSignMax);</td></tr>
<tr><td align=right valign=top>SdifSignatureTabT* </td><td><a href="#SdifSignatureTabT*_SdifReInitSignatureTab_(SdifSignatureTabT_*SignTab,_const_SdifUInt4_NewNbSignMax)$"><font color=green>SdifReInitSignatureTab</font></a> (SdifSignatureTabT *SignTab, const SdifUInt4 NewNbSignMax);</td></tr>
<tr><td align=right valign=top>SdifSignatureTabT* </td><td><a href="#SdifSignatureTabT*_SdifPutInSignatureTab_(SdifSignatureTabT_*SignTab,_const_SdifSignature_Sign)$"><font color=green>SdifPutInSignatureTab</font></a> (SdifSignatureTabT *SignTab, const SdifSignature Sign);</td></tr>
<tr><td align=right valign=top>SdifSignatureTabT* </td><td><a href="#SdifSignatureTabT*_SdifAddToSignatureTab_(SdifSignatureTabT_*SignTab,_const_SdifSignature_Sign)$"><font color=green>SdifAddToSignatureTab</font></a> (SdifSignatureTabT *SignTab, const SdifSignature Sign);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifGetFromSignatureTab(const_SdifSignatureTabT*_SignTab,_const_int_index)$"><font color=green>SdifGetFromSignatureTab</font></a>(const SdifSignatureTabT* SignTab, const int index);</td></tr>
<tr><td align=right valign=top>SdifSignature </td><td><a href="#SdifSignature_SdifIsInSignatureTab_(const_SdifSignatureTabT_*SignTab,_const_SdifSignature_Sign)$"><font color=green>SdifIsInSignatureTab</font></a> (const SdifSignatureTabT *SignTab, const SdifSignature Sign);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFindInSignatureTab_(const_SdifSignatureTabT*_SignTab,_const_SdifSignature_Sign)$"><font color=green>SdifFindInSignatureTab</font></a> (const SdifSignatureTabT* SignTab, const SdifSignature Sign);</td></tr>
<tr><td></td></tr><tr><td></td><td><strong>// 	Stream ID Tables for 1IDS ASCII chunk</strong></td></tr>
<tr><td align=right valign=top>SdifStreamIDT* </td><td><a href="#SdifStreamIDT*_SdifCreateStreamID(SdifUInt4_NumID,_char_*Source,_char_*TreeWay)$"><font color=green>SdifCreateStreamID</font></a>(SdifUInt4 NumID, char *Source, char *TreeWay);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillStreamID(SdifStreamIDT_*StreamID)$"><font color=green>SdifKillStreamID</font></a>(SdifStreamIDT *StreamID);</td></tr>
<tr><td align=right valign=top>SdifStreamIDTableT* </td><td><a href="#SdifStreamIDTableT*_SdifCreateStreamIDTable_(SdifUInt4_HashSize)$"><font color=green>SdifCreateStreamIDTable</font></a> (SdifUInt4 HashSize);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillStreamIDTable_(SdifStreamIDTableT_*SIDTable)$"><font color=green>SdifKillStreamIDTable</font></a> (SdifStreamIDTableT *SIDTable);</td></tr>
<tr><td align=right valign=top>SdifStreamIDT* </td><td><a href="#SdifStreamIDT*_SdifStreamIDTablePutSID_(SdifStreamIDTableT_*SIDTable,_SdifUInt4_NumID,_char_*Source,_char_*TreeWay)$"><font color=green>SdifStreamIDTablePutSID</font></a> (SdifStreamIDTableT *SIDTable, SdifUInt4 NumID, char *Source, char *TreeWay);</td></tr>
<tr><td align=right valign=top>SdifStreamIDT* </td><td><a href="#SdifStreamIDT*_SdifStreamIDTableGetSID_(SdifStreamIDTableT_*SIDTable,_SdifUInt4_NumID)$"><font color=green>SdifStreamIDTableGetSID</font></a> (SdifStreamIDTableT *SIDTable, SdifUInt4 NumID);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifStreamIDTableGetNbData_(SdifStreamIDTableT_*SIDTable)$"><font color=green>SdifStreamIDTableGetNbData</font></a> (SdifStreamIDTableT *SIDTable);</td></tr>
<tr><td align=right valign=top>SdifUInt4 </td><td><a href="#SdifUInt4_SdifStreamIDEntryGetSID_(SdifStreamIDT_*SID)$"><font color=green>SdifStreamIDEntryGetSID</font></a> (SdifStreamIDT *SID);</td></tr>
<tr><td align=right valign=top>char *</td><td><a href="#char_*SdifStreamIDEntryGetSource_(SdifStreamIDT_*SID)$"><font color=green>SdifStreamIDEntryGetSource</font></a> (SdifStreamIDT *SID);</td></tr>
<tr><td align=right valign=top>char *</td><td><a href="#char_*SdifStreamIDEntryGetTreeWay_(SdifStreamIDT_*SID)$"><font color=green>SdifStreamIDEntryGetTreeWay</font></a> (SdifStreamIDT *SID);</td></tr>
<tr><td align=right valign=top>SdifStringT * </td><td><a href="#SdifStringT_*_SdifStringNew(void)$"><font color=green>SdifStringNew</font></a>(void);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifStringFree(SdifStringT_*_SdifString)$"><font color=green>SdifStringFree</font></a>(SdifStringT * SdifString);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifStringAppend(SdifStringT_*_SdifString_,char_*strToAppend)$"><font color=green>SdifStringAppend</font></a>(SdifStringT * SdifString ,char *strToAppend);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifStringGetC(SdifStringT_*_SdifString)$"><font color=green>SdifStringGetC</font></a>(SdifStringT * SdifString);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifStringUngetC(SdifStringT_*_SdifString)$"><font color=green>SdifStringUngetC</font></a>(SdifStringT * SdifString);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifStringIsEOS(SdifStringT_*SdifString)$"><font color=green>SdifStringIsEOS</font></a>(SdifStringT *SdifString);</td></tr>
<tr><td align=right valign=top>SdifMatrixTypeT* </td><td><a href="#SdifMatrixTypeT*_SdifTestMatrixType_(SdifFileT_*SdifF,_SdifSignature_Signature)$"><font color=green>SdifTestMatrixType</font></a> (SdifFileT *SdifF, SdifSignature Signature);</td></tr>
<tr><td align=right valign=top>SdifFrameTypeT* </td><td><a href="#SdifFrameTypeT*_SdifTestFrameType_(SdifFileT_*SdifF,_SdifSignature_Signature)$"><font color=green>SdifTestFrameType</font></a> (SdifFileT *SdifF, SdifSignature Signature);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFTestMatrixWithFrameHeader_(SdifFileT*_SdifF)$"><font color=green>SdifFTestMatrixWithFrameHeader</font></a> (SdifFileT* SdifF);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFTestDataType_(SdifFileT*_SdifF)$"><font color=green>SdifFTestDataType</font></a> (SdifFileT* SdifF);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFTestNbColumns_(SdifFileT*_SdifF)$"><font color=green>SdifFTestNbColumns</font></a> (SdifFileT* SdifF);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFTestNotEmptyMatrix_(SdifFileT*_SdifF)$"><font color=green>SdifFTestNotEmptyMatrix</font></a> (SdifFileT* SdifF);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifFTestMatrixHeader_(SdifFileT*_SdifF)$"><font color=green>SdifFTestMatrixHeader</font></a> (SdifFileT* SdifF);</td></tr>
<tr><td align=right valign=top>SdifColumnDefT* </td><td><a href="#SdifColumnDefT*_SdifTestColumnDef_(SdifFileT_*SdifF,_SdifMatrixTypeT_*MtrxT,_char_*NameCD)$"><font color=green>SdifTestColumnDef</font></a> (SdifFileT *SdifF, SdifMatrixTypeT *MtrxT, char *NameCD);</td></tr>
<tr><td align=right valign=top>SdifComponentT* </td><td><a href="#SdifComponentT*_SdifTestComponent_(SdifFileT*_SdifF,_SdifFrameTypeT_*FramT,_char_*NameCD)$"><font color=green>SdifTestComponent</font></a> (SdifFileT* SdifF, SdifFrameTypeT *FramT, char *NameCD);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifTestSignature_(SdifFileT_*SdifF,_int_CharEnd,_SdifSignature_Signature,_char_*Mess)$"><font color=green>SdifTestSignature</font></a> (SdifFileT *SdifF, int CharEnd, SdifSignature Signature, char *Mess);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifTestCharEnd_(SdifFileT_*SdifF,_int_CharEnd,_char_MustBe,_char_*StringRead,_int_ErrCondition,_char_*Mess)$"><font color=green>SdifTestCharEnd</font></a> (SdifFileT *SdifF, int CharEnd, char MustBe, char *StringRead, int ErrCondition, char *Mess);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifTestMatrixTypeModifMode_(SdifFileT_*SdifF,_SdifMatrixTypeT_*MatrixType)$"><font color=green>SdifTestMatrixTypeModifMode</font></a> (SdifFileT *SdifF, SdifMatrixTypeT *MatrixType);</td></tr>
<tr><td align=right valign=top>int </td><td><a href="#int_SdifTestFrameTypeModifMode_(SdifFileT_*SdifF,_SdifFrameTypeT_*FrameType)$"><font color=green>SdifTestFrameTypeModifMode</font></a> (SdifFileT *SdifF, SdifFrameTypeT *FrameType);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFTextConvMatrixData_(SdifFileT_*SdifF)$"><font color=green>SdifFTextConvMatrixData</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFTextConvMatrix_(SdifFileT_*SdifF)$"><font color=green>SdifFTextConvMatrix</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFTextConvFrameData_(SdifFileT_*SdifF)$"><font color=green>SdifFTextConvFrameData</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFTextConvFrameHeader_(SdifFileT_*SdifF)$"><font color=green>SdifFTextConvFrameHeader</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFTextConvFrame_(SdifFileT_*SdifF)$"><font color=green>SdifFTextConvFrame</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFTextConvAllFrame_(SdifFileT_*SdifF)$"><font color=green>SdifFTextConvAllFrame</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFTextConvFramesChunk_(SdifFileT_*SdifF)$"><font color=green>SdifFTextConvFramesChunk</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifFTextConv_(SdifFileT_*SdifF)$"><font color=green>SdifFTextConv</font></a> (SdifFileT *SdifF);</td></tr>
<tr><td align=right valign=top>size_t </td><td><a href="#size_t_SdifTextToSdif_(SdifFileT_*SdifF,_char_*TextStreamName)$"><font color=green>SdifTextToSdif</font></a> (SdifFileT *SdifF, char *TextStreamName);</td></tr>
<tr><td align=right valign=top>SdifTimePositionT* </td><td><a href="#SdifTimePositionT*_SdifCreateTimePosition(SdifFloat8_Time,_SdiffPosT_Position)$"><font color=green>SdifCreateTimePosition</font></a>(SdifFloat8 Time, SdiffPosT Position);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillTimePosition(void*_TimePosition)$"><font color=green>SdifKillTimePosition</font></a>(void* TimePosition);</td></tr>
<tr><td align=right valign=top>SdifTimePositionLT* </td><td><a href="#SdifTimePositionLT*_SdifCreateTimePositionL(void)$"><font color=green>SdifCreateTimePositionL</font></a>(void);</td></tr>
<tr><td align=right valign=top>void </td><td><a href="#void_SdifKillTimePositionL_(SdifTimePositionLT_*TimePositionL)$"><font color=green>SdifKillTimePositionL</font></a> (SdifTimePositionLT *TimePositionL);</td></tr>
<tr><td align=right valign=top>SdifTimePositionLT* </td><td><a href="#SdifTimePositionLT*_SdifTimePositionLPutTail(SdifTimePositionLT*_TimePositionL,_SdifFloat8_Time,_SdiffPosT_Position)$"><font color=green>SdifTimePositionLPutTail</font></a>(SdifTimePositionLT* TimePositionL, SdifFloat8 Time, SdiffPosT Position);</td></tr>
<tr><td align=right valign=top>SdifTimePositionT* </td><td><a href="#SdifTimePositionT*_SdifTimePositionLGetTail(SdifTimePositionLT*_TimePositionL)$"><font color=green>SdifTimePositionLGetTail</font></a>(SdifTimePositionLT* TimePositionL);</td></tr>
</table>
<p>Back to the <a href="#topofdoc">top</a> of  <i>SDIF</i><p>
<a name="int_SdifCheckFileFormat_(const_char_*name)$"><hr><p></p><h3>int SdifCheckFileFormat (const char *name);</h3></a>
<strong>#include "<a href="SdifCheck.h">SdifCheck.h</a>"</strong><p>
  DOC: 
  Test if file is an SDIF file.
<p>
  [] Returns:	0 if not an SDIF file (the first 4 chars are not "SDIF"),
		or file can not be opened, else 1.  
<p>
  Warning: This function doesn't work with stdio.   
<p><pre>
int SdifCheckFileFormat (const char *name);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifCheckFileFramesTab_(const_char_*name,_const_SdifSignatureTabT_*frames)$"><hr><p></p><h3>SdifSignature SdifCheckFileFramesTab (const char *name, const SdifSignatureTabT *frames);</h3></a>
<strong>#include "<a href="SdifCheck.h">SdifCheck.h</a>"</strong><p>
  DOC: 
  Test if file contains frames of certain types.
<p>
  [in]  name	Filename + selection
	frames  Table of frame signatures to look for
  []	return	The first signature from frames found, or eEmptySignature if 
		no frames could be found (or if file is not SDIF).
<p>
  Warning: This function doesn't work with stdio.   
<p><pre>
SdifSignature SdifCheckFileFramesTab   (const char		*name, 
					const SdifSignatureTabT *frames);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifCheckFileFramesIndex_(const_char_*name,_const_SdifSignature_*frames)$"><hr><p></p><h3>int SdifCheckFileFramesIndex (const char *name, const SdifSignature *frames);</h3></a>
<strong>#include "<a href="SdifCheck.h">SdifCheck.h</a>"</strong><p>
  DOC: 
  Test if file contains frames of certain types.
<p>
  [in]  name	Filename + selection
	frames  Array of frame signatures to look for, terminated with 
		eEmptySignature.
  []	return	The index in frames of the first signature found, or -1
		if no frames could be found (or if file is not SDIF).
<p>
  Warning: This function doesn't work with stdio.   
<p><pre>
int	      SdifCheckFileFramesIndex (const char	        *name, 
					const SdifSignature     *frames);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifCheckNextFrame_(SdifFileT_*in,_const_SdifSignatureTabT_*frames,_int_*index)$"><hr><p></p><h3>SdifSignature SdifCheckNextFrame (SdifFileT *in, const SdifSignatureTabT *frames, int *index);</h3></a>
<strong>#include "<a href="SdifCheck.h">SdifCheck.h</a>"</strong><p>
  DOC: 
  Test if file contains frames of certain types.
<p>
  [in]  in	open SDIF file
	frames  Table of frame signatures to look for
  [out] index   If the int pointer index is not NULL, it will receive
		the index in frames of the first signature found, or -1
		if no frames could be found (or if file is not SDIF).
  []	return	The first signature from frames found, or eEmptySignature if 
		no frames could be found (or if file is not SDIF).
<p>
  Warning: This function doesn't work with stdio.   
<p><pre>
SdifSignature SdifCheckNextFrame       (SdifFileT		*in, 
					const SdifSignatureTabT *frames,
					int			*index);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFileT*_SdifFTryOpen_(const_char_*Name,_SdifFileModeET_Mode)$"><hr><p></p><h3>SdifFileT* SdifFTryOpen (const char *Name, SdifFileModeET Mode);</h3></a>
<strong>#include "<a href="SdifCheck.h">SdifCheck.h</a>"</strong><p>
  DOC: 
  TODO: Test if file is an SDIF file (only when opening for read or
  append) and open it.
<p>
  [Return] NULL if not an SDIF file (the first 4 chars are not "SDIF"),
  or file can not be opened.    
<p><pre>
SdifFileT*	   SdifFTryOpen			(const char *Name, SdifFileModeET Mode);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFConvToTextMatrixData_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFConvToTextMatrixData (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifConvToText.h">SdifConvToText.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFConvToTextMatrixData     (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFConvToTextMatrixHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFConvToTextMatrixHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifConvToText.h">SdifConvToText.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFConvToTextMatrixHeader   (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFConvToTextMatrix_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFConvToTextMatrix (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifConvToText.h">SdifConvToText.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFConvToTextMatrix         (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFConvToTextFrameData_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFConvToTextFrameData (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifConvToText.h">SdifConvToText.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFConvToTextFrameData      (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFConvToTextFrameHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFConvToTextFrameHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifConvToText.h">SdifConvToText.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFConvToTextFrameHeader    (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFConvToTextFrame_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFConvToTextFrame (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifConvToText.h">SdifConvToText.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFConvToTextFrame          (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFConvToTextAllFrame_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFConvToTextAllFrame (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifConvToText.h">SdifConvToText.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFConvToTextAllFrame       (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFConvToText_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFConvToText (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifConvToText.h">SdifConvToText.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFConvToText               (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifToText_(SdifFileT_*SdifF,_char_*TextStreamName)$"><hr><p></p><h3>size_t SdifToText (SdifFileT *SdifF, char *TextStreamName);</h3></a>
<strong>#include "<a href="SdifConvToText.h">SdifConvToText.h</a>"</strong><p>
  DOC: 
  Converti un fichier texte pseudo-SDIF de nom TextStreamName en un
  fichier SDIF binaire de non SdifF->Name. Le fichier doit avoir t
  ouvert en criture (eWriteFile).    
<p><pre>
size_t SdifToText (SdifFileT *SdifF, char *TextStreamName);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifFileS_SdifFileT$"><hr><p></p><h3>typedef struct SdifFileS SdifFileT;</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifFileS SdifFileT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifErrorTagE_SdifErrorTagET$"><hr><p></p><h3>typedef enum SdifErrorTagE SdifErrorTagET;</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
  <p>
   DATA GROUP:	Error Handling
  <p>
<p><pre>
typedef enum SdifErrorTagE
{
	eUnknow,
	eNoError,
	eTypeDataNotSupported,
	eNameLength,
	eReDefined,
	eUnDefined,
	eSyntax,
	eBadTypesFile,
	eBadType,
	eBadHeader,
	eRecursiveDetect,
	eUnInterpreted,
	eOnlyOneChunkOf,
	eUserDefInFileYet,
	eBadMode,
	eBadStdFile,
	eBadNbData,
	eReadWriteOnSameFile,
    eBadFormatVersion,
    eMtrxUsedYet,
    eMtrxNotInFrame
} SdifErrorTagET;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifErrorLevelE_SdifErrorLevelET$"><hr><p></p><h3>typedef enum SdifErrorLevelE SdifErrorLevelET;</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef enum SdifErrorLevelE
{
	eFatal,
	eError,
	eWarning,
	eRemark,
	eNoLevel,
	eNumLevels	/* level count, must always be last */
} SdifErrorLevelET;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifErrorS_SdifErrorT$"><hr><p></p><h3>typedef struct SdifErrorS SdifErrorT;</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifErrorS SdifErrorT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifErrorS_$"><hr><p></p><h3>struct SdifErrorS ;</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifErrorS
{
	SdifErrorTagET		Tag;
	SdifErrorLevelET	Level;
	char*				UserMess;
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifErrorLS_SdifErrorLT$"><hr><p></p><h3>typedef struct SdifErrorLS SdifErrorLT;</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifErrorLS SdifErrorLT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifErrorLS_$"><hr><p></p><h3>struct SdifErrorLS ;</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifErrorLS
{
  SdifListT*    ErrorList;
  SdifFileT*	SdifF; /* only a link */
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifErrorT*_SdifCreateError_(SdifErrorTagET_Tag,_SdifErrorLevelET_Level,_const_char*_UserMess)$"><hr><p></p><h3>SdifErrorT* SdifCreateError (SdifErrorTagET Tag, SdifErrorLevelET Level, const char* UserMess);</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
  <p>
   FUNCTION GROUP:	Error Handling
  <p>
<p><pre>
SdifErrorT*	SdifCreateError		(SdifErrorTagET Tag,
					 SdifErrorLevelET Level, 
					 const char* UserMess);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillError_(void_*Error)$"><hr><p></p><h3>void SdifKillError (void *Error);</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void		SdifKillError		(void *Error);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifErrorLT*_SdifCreateErrorL_(SdifFileT*_SdifF)$"><hr><p></p><h3>SdifErrorLT* SdifCreateErrorL (SdifFileT* SdifF);</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifErrorLT*	SdifCreateErrorL	(SdifFileT* SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillErrorL_(SdifErrorLT_*ErrorL)$"><hr><p></p><h3>void SdifKillErrorL (SdifErrorLT *ErrorL);</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void		SdifKillErrorL		(SdifErrorLT *ErrorL);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifInsertTailError_(SdifErrorLT*_ErrorL,_int_ErrorCount_[],_SdifErrorTagET_Tag,_const_char*_UserMess)$"><hr><p></p><h3>SdifUInt4 SdifInsertTailError (SdifErrorLT* ErrorL, int ErrorCount [], SdifErrorTagET Tag, const char* UserMess);</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifUInt4       SdifInsertTailError     (SdifErrorLT* ErrorL, 
					 int ErrorCount [], 
					 SdifErrorTagET Tag, 
					 const char* UserMess);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifErrorT*_SdifLastError_(SdifErrorLT_*ErrorL)$"><hr><p></p><h3>SdifErrorT* SdifLastError (SdifErrorLT *ErrorL);</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifErrorT*	SdifLastError		(SdifErrorLT *ErrorL);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifErrorTagET_SdifLastErrorTag_(SdifErrorLT_*ErrorL)$"><hr><p></p><h3>SdifErrorTagET SdifLastErrorTag (SdifErrorLT *ErrorL);</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifErrorTagET	SdifLastErrorTag	(SdifErrorLT *ErrorL);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifFError_(SdifFileT*_SdifF,_SdifErrorTagET_ErrorTag,_const_char_*UserMess,_const_char_*file,_const_int_line)$"><hr><p></p><h3>SdifUInt4 SdifFError (SdifFileT* SdifF, SdifErrorTagET ErrorTag, const char *UserMess, const char *file, const int line);</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifUInt4	SdifFError		(SdifFileT* SdifF, 
					 SdifErrorTagET ErrorTag, 
					 const char *UserMess, 
					 const char *file, 
					 const int line);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifInt4_SdifFsPrintError_(char*_oErrMess,_SdifFileT*_SdifF,_SdifErrorT*_Error,_const_char_*LibFile,_int_LibLine)$"><hr><p></p><h3>SdifInt4 SdifFsPrintError (char* oErrMess, SdifFileT* SdifF, SdifErrorT* Error, const char *LibFile, int LibLine);</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifInt4	SdifFsPrintError	(char* oErrMess, SdifFileT* SdifF,
					 SdifErrorT* Error,
					 const char *LibFile, int LibLine);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifEnableErrorOutput_(void)$"><hr><p></p><h3>void SdifEnableErrorOutput (void);</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
  DOC:
  Switch output of error messages on stderr by _SdifFError on. 
  <p>
<p><pre>
void	SdifEnableErrorOutput  (void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifDisableErrorOutput_(void)$"><hr><p></p><h3>void SdifDisableErrorOutput (void);</h3></a>
<strong>#include "<a href="SdifErrMess.h">SdifErrMess.h</a>"</strong><p>
  DOC:
  Switch output of error messages on stderr by _SdifFError off. 
  <p>
<p><pre>
void	SdifDisableErrorOutput (void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifErrorE_SdifErrorEnum$"><hr><p></p><h3>typedef enum SdifErrorE SdifErrorEnum;</h3></a>
<strong>#include "<a href="SdifError.h">SdifError.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef enum SdifErrorE
{
  eFalse = 0,
  eTrue = 1,
  eFreeNull = 256,
  eAllocFail,
  eArrayPosition,
  eEof,
  eFileNotFound,
  eInvalidPreType,
  eAffectationOrder,
  eNoModifErr,
  eNotInDataTypeUnion,
  eNotFound,
  eExistYet,
  eWordCut,
  eTokenLength
} SdifErrorEnum;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_void_(*SdifExitFuncT)_(void)$"><hr><p></p><h3>typedef void (*SdifExitFuncT) (void);</h3></a>
<strong>#include "<a href="SdifError.h">SdifError.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef void (*SdifExitFuncT) (void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifSetExitFunc_(SdifExitFuncT_func)$"><hr><p></p><h3>void SdifSetExitFunc (SdifExitFuncT func);</h3></a>
<strong>#include "<a href="SdifError.h">SdifError.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void SdifSetExitFunc (SdifExitFuncT func);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifErrorWarning(SdifErrorEnum_Error,_const_void_*ErrorMess)$"><hr><p></p><h3>void SdifErrorWarning(SdifErrorEnum Error, const void *ErrorMess);</h3></a>
<strong>#include "<a href="SdifError.h">SdifError.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void <a href="#void_SdifErrorWarning(SdifErrorEnum_Error,_const_void_*ErrorMess)$">SdifErrorWarning</a>(SdifErrorEnum Error, const void *ErrorMess);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFGetSignature_(SdifFileT_*SdifF,_size_t_*NbCharRead)$"><hr><p></p><h3>int SdifFGetSignature (SdifFileT *SdifF, size_t *NbCharRead);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC: 
  Lit 4 bytes, les considre comme une signature qui est place dans
  SdifF->CurrSignature, incrmente NbCharRead du nombre de bytes lus
  et renvoie le dernier caractre lu convert en int (-1 si erreur).    
<p><pre>
int    SdifFGetSignature	(SdifFileT *SdifF, size_t *NbCharRead);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFGetOneNameValue_(SdifFileT_*SdifF,_int_Verbose,_size_t_*NbCharRead)$"><hr><p></p><h3>int SdifFGetOneNameValue (SdifFileT *SdifF, int Verbose, size_t *NbCharRead);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int    SdifFGetOneNameValue     (SdifFileT *SdifF, int Verbose, size_t *NbCharRead);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFGetNameValueLCurrNVT(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFGetNameValueLCurrNVT(SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t <a href="#size_t_SdifFGetNameValueLCurrNVT(SdifFileT_*SdifF,_int_Verbose)$">SdifFGetNameValueLCurrNVT</a>(SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFNameValueLCurrNVTfromString_(SdifFileT_*SdifF,_char_*str)$"><hr><p></p><h3>int SdifFNameValueLCurrNVTfromString (SdifFileT *SdifF, char *str);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int    SdifFNameValueLCurrNVTfromString (SdifFileT *SdifF, char *str);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFGetOneMatrixType_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFGetOneMatrixType (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the old SDIF Specification (before June 1999)
  Get the current matrix type from a file
  <p>
<p><pre>
size_t SdifFGetOneMatrixType    (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFGetOneMatrixTypefromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><hr><p></p><h3>size_t SdifFGetOneMatrixTypefromSdifString(SdifFileT *SdifF, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Return the current matrix type from a SdifStringT
  <p>
<p><pre>
size_t <a href="#size_t_SdifFGetOneMatrixTypefromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$">SdifFGetOneMatrixTypefromSdifString</a>(SdifFileT *SdifF, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFGetOneComponent_(SdifFileT_*SdifF,_int_Verbose,_SdifSignature_*MatrixSignature,_char_*ComponentName,_size_t_*NbCharRead)$"><hr><p></p><h3>int SdifFGetOneComponent (SdifFileT *SdifF, int Verbose, SdifSignature *MatrixSignature, char *ComponentName, size_t *NbCharRead);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the old SDIF Specification (before June 1999)
  Get the current component from a file
  <p>
<p><pre>
int    SdifFGetOneComponent     (SdifFileT *SdifF, int Verbose,
				 SdifSignature *MatrixSignature,
				 char *ComponentName,
				 size_t *NbCharRead);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFGetOneComponentfromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString,_SdifSignature_*MatrixSignature,_char_*ComponentName)$"><hr><p></p><h3>int SdifFGetOneComponentfromSdifString(SdifFileT *SdifF, SdifStringT *SdifString, SdifSignature *MatrixSignature, char *ComponentName);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Return the current component from a SdifStringT
  <p>
<p><pre>
int    <a href="#int_SdifFGetOneComponentfromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString,_SdifSignature_*MatrixSignature,_char_*ComponentName)$">SdifFGetOneComponentfromSdifString</a>(SdifFileT *SdifF,
					  SdifStringT *SdifString,
					  SdifSignature *MatrixSignature,
					  char *ComponentName);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFGetOneFrameType_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFGetOneFrameType (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the old SDIF Specification (before June 1999)
  Get the current Frame type from a file
  <p>
<p><pre>
size_t SdifFGetOneFrameType     (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFGetOneFrameTypefromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><hr><p></p><h3>size_t SdifFGetOneFrameTypefromSdifString(SdifFileT *SdifF, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Return the current frame type from a SdifStringT
  <p>
<p><pre>
size_t <a href="#size_t_SdifFGetOneFrameTypefromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$">SdifFGetOneFrameTypefromSdifString</a>(SdifFileT *SdifF, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFGetAllType_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFGetAllType (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the old SDIF Specification (before June 1999)
  Get all types from a file
  <p>
<p><pre>
size_t SdifFGetAllType          (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFGetAllTypefromSdifString_(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><hr><p></p><h3>size_t SdifFGetAllTypefromSdifString (SdifFileT *SdifF, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Get all types from a SdifStringT
  <p>
<p><pre>
size_t    SdifFGetAllTypefromSdifString   (SdifFileT *SdifF, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFGetOneStreamID_(SdifFileT_*SdifF,_int_Verbose,_size_t_*NbBytesRead)$"><hr><p></p><h3>int SdifFGetOneStreamID (SdifFileT *SdifF, int Verbose, size_t *NbBytesRead);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the old SDIF Specification (before June 1999)
  Get the current Stream ID from a file
  <p>
<p><pre>
int    SdifFGetOneStreamID      (SdifFileT *SdifF, int Verbose, size_t *NbBytesRead);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFgetOneStreamIDfromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><hr><p></p><h3>int SdifFgetOneStreamIDfromSdifString(SdifFileT *SdifF, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function is implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Get the current Stream ID from a SdifStringT
  <p>
<p><pre>
int <a href="#int_SdifFgetOneStreamIDfromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$">SdifFgetOneStreamIDfromSdifString</a>(SdifFileT *SdifF, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFGetAllStreamID_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFGetAllStreamID (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the old SDIF Specification (before June 1999)
  Get all Stream ID from a file
  <p>
<p><pre>
size_t SdifFGetAllStreamID      (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFGetAllStreamIDfromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><hr><p></p><h3>size_t SdifFGetAllStreamIDfromSdifString(SdifFileT *SdifF, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Get the current Stream ID from a SdifStringT
  <p>
<p><pre>
size_t <a href="#size_t_SdifFGetAllStreamIDfromSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$">SdifFGetAllStreamIDfromSdifString</a>(SdifFileT *SdifF, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFGetNameValueCurrHT_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFGetNameValueCurrHT (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFGet.h">SdifFGet.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFGetNameValueCurrHT (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintGeneralHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFPrintGeneralHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintGeneralHeader      (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintNameValueLCurrNVT_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFPrintNameValueLCurrNVT (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintNameValueLCurrNVT  (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintAllNameValueNVT_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFPrintAllNameValueNVT (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintAllNameValueNVT    (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintAllType_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFPrintAllType (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintAllType            (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintAllStreamID_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFPrintAllStreamID (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintAllStreamID        (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintAllASCIIChunks_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFPrintAllASCIIChunks (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintAllASCIIChunks     (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintMatrixHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFPrintMatrixHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintMatrixHeader       (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintFrameHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFPrintFrameHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintFrameHeader        (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintOneRow_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFPrintOneRow (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintOneRow             (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintMatrixType_(SdifFileT_*SdifF,_SdifMatrixTypeT_*MatrixType)$"><hr><p></p><h3>size_t SdifFPrintMatrixType (SdifFileT *SdifF, SdifMatrixTypeT *MatrixType);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintMatrixType         (SdifFileT *SdifF, SdifMatrixTypeT *MatrixType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintFrameType_(SdifFileT_*SdifF,_SdifFrameTypeT_*FrameType)$"><hr><p></p><h3>size_t SdifFPrintFrameType (SdifFileT *SdifF, SdifFrameTypeT *FrameType);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintFrameType          (SdifFileT *SdifF, SdifFrameTypeT  *FrameType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintNameValueCurrHT_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFPrintNameValueCurrHT (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintNameValueCurrHT (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPrintAllNameValueHT_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFPrintAllNameValueHT (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFPrint.h">SdifFPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPrintAllNameValueHT  (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPutOneNameValue_(SdifFileT_*SdifF,_int_Verbose,_SdifNameValueT_*NameValue)$"><hr><p></p><h3>size_t SdifFPutOneNameValue (SdifFileT *SdifF, int Verbose, SdifNameValueT *NameValue);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPutOneNameValue         (SdifFileT *SdifF, int Verbose, SdifNameValueT *NameValue);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPutNameValueLCurrNVT_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFPutNameValueLCurrNVT (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPutNameValueLCurrNVT    (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFNameValueLCurrNVTtoSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><hr><p></p><h3>int SdifFNameValueLCurrNVTtoSdifString(SdifFileT *SdifF, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  This function put NameValue to SdifString
  <p>
<p><pre>
int <a href="#int_SdifFNameValueLCurrNVTtoSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifString)$">SdifFNameValueLCurrNVTtoSdifString</a>(SdifFileT *SdifF, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPutOneMatrixType_(SdifFileT_*SdifF,_int_Verbose,_SdifMatrixTypeT_*MatrixType)$"><hr><p></p><h3>size_t SdifFPutOneMatrixType (SdifFileT *SdifF, int Verbose, SdifMatrixTypeT *MatrixType);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPutOneMatrixType        (SdifFileT *SdifF, int Verbose,
				     SdifMatrixTypeT *MatrixType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFOneMatrixTypeToSdifString(SdifMatrixTypeT_*MatrixType,_SdifStringT_*SdifString)$"><hr><p></p><h3>int SdifFOneMatrixTypeToSdifString(SdifMatrixTypeT *MatrixType, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Append matrix type declaration in SdifString
  <p>
<p><pre>
int <a href="#int_SdifFOneMatrixTypeToSdifString(SdifMatrixTypeT_*MatrixType,_SdifStringT_*SdifString)$">SdifFOneMatrixTypeToSdifString</a>(SdifMatrixTypeT *MatrixType, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPutAllMatrixType_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFPutAllMatrixType (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPutAllMatrixType        (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFAllMatrixTypeToSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifSTring)$"><hr><p></p><h3>int SdifFAllMatrixTypeToSdifString(SdifFileT *SdifF, SdifStringT *SdifSTring);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Write all Matrix type in SdifString
  <p>
<p><pre>
int <a href="#int_SdifFAllMatrixTypeToSdifString(SdifFileT_*SdifF,_SdifStringT_*SdifSTring)$">SdifFAllMatrixTypeToSdifString</a>(SdifFileT *SdifF, SdifStringT *SdifSTring);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPutOneComponent(SdifFileT_*SdifF,_int_Verbose,_SdifComponentT_*Component)$"><hr><p></p><h3>size_t SdifFPutOneComponent(SdifFileT *SdifF, int Verbose, SdifComponentT *Component);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t <a href="#size_t_SdifFPutOneComponent(SdifFileT_*SdifF,_int_Verbose,_SdifComponentT_*Component)$">SdifFPutOneComponent</a>(SdifFileT *SdifF, int Verbose, SdifComponentT *Component);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFOneComponentToSdifString(SdifComponentT_*Component,_SdifStringT_*SdifString)$"><hr><p></p><h3>int SdifFOneComponentToSdifString(SdifComponentT *Component, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Append one Component to SdifString
  <p>
<p><pre>
int <a href="#int_SdifFOneComponentToSdifString(SdifComponentT_*Component,_SdifStringT_*SdifString)$">SdifFOneComponentToSdifString</a>(SdifComponentT *Component, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPutOneFrameType(SdifFileT_*SdifF,_int_Verbose,_SdifFrameTypeT_*FrameType)$"><hr><p></p><h3>size_t SdifFPutOneFrameType(SdifFileT *SdifF, int Verbose, SdifFrameTypeT *FrameType);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t <a href="#size_t_SdifFPutOneFrameType(SdifFileT_*SdifF,_int_Verbose,_SdifFrameTypeT_*FrameType)$">SdifFPutOneFrameType</a>(SdifFileT *SdifF, int Verbose, SdifFrameTypeT *FrameType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFOneFrameTypeToSdifString(SdifFrameTypeT_*FrameType,_SdifStringT_*SdifString)$"><hr><p></p><h3>int SdifFOneFrameTypeToSdifString(SdifFrameTypeT *FrameType, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Append one frame type to SdifString
  <p>
<p><pre>
int <a href="#int_SdifFOneFrameTypeToSdifString(SdifFrameTypeT_*FrameType,_SdifStringT_*SdifString)$">SdifFOneFrameTypeToSdifString</a>(SdifFrameTypeT *FrameType, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPutAllFrameType_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFPutAllFrameType (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPutAllFrameType         (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFAllFrameTypeToSdifString_(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><hr><p></p><h3>int SdifFAllFrameTypeToSdifString (SdifFileT *SdifF, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Write all frame type in SdifString
  <p>
<p><pre>
int SdifFAllFrameTypeToSdifString   (SdifFileT *SdifF, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPutAllType_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFPutAllType (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPutAllType              (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPutOneStreamID_(SdifFileT_*SdifF,_int_Verbose,_SdifStreamIDT_*StreamID)$"><hr><p></p><h3>size_t SdifFPutOneStreamID (SdifFileT *SdifF, int Verbose, SdifStreamIDT *StreamID);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPutOneStreamID          (SdifFileT *SdifF, int Verbose, SdifStreamIDT *StreamID);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFOneStreamIDToSDifString_(SdifStringT_*SdifString,_SdifStreamIDT_*StreamID)$"><hr><p></p><h3>int SdifFOneStreamIDToSDifString (SdifStringT *SdifString, SdifStreamIDT *StreamID);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Append one StreamID to SdifString
  <p>
<p><pre>
int SdifFOneStreamIDToSDifString (SdifStringT *SdifString, SdifStreamIDT *StreamID);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPutAllStreamID_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFPutAllStreamID (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPutAllStreamID          (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFAllStreamIDToSdifString_(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><hr><p></p><h3>int SdifFAllStreamIDToSdifString (SdifFileT *SdifF, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Write all StreamID in SdifString
  <p>
<p><pre>
int SdifFAllStreamIDToSdifString (SdifFileT *SdifF, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPutNameValueCurrHT_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>size_t SdifFPutNameValueCurrHT (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFPut.h">SdifFPut.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFPutNameValueCurrHT      (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadGeneralHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadGeneralHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC: 
  Lit l'entte du fichier, c'est  dire 'SDIF' puis 4 bytes.  affiche
  un message en cas de non reconnaissance du format.    
<p><pre>
size_t SdifFReadGeneralHeader    (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadChunkSize_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadChunkSize (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFReadChunkSize        (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadNameValueLCurrNVT(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadNameValueLCurrNVT(SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t <a href="#size_t_SdifFReadNameValueLCurrNVT(SdifFileT_*SdifF)$">SdifFReadNameValueLCurrNVT</a>(SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadAllType_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadAllType (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFReadAllType          (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadAllStreamID_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadAllStreamID (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFReadAllStreamID      (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadAllASCIIChunks_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadAllASCIIChunks (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC: 
  Cette fonction permet de lire tous les Chunk ASCII qui se
  trouveraient en dbut de fichier juste aprs l'entte gnrale. Elle
  s'arrte lorsqu'elle ne reconnat pas la signature de chunk comme un
  ASCII Chunk. Cette signature est donc normalement celle d'un
  frame. Elle est stocke dans SdifF->CurrSignature. <strong>Il n'est
  donc pas ncessaire de la relire</strong>.    
<p><pre>
size_t SdifFReadAllASCIIChunks   (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadMatrixHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadMatrixHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC: 
  Cette fonction lit une entte de matrice <strong>signature
  incluse</strong>.  Elle vrifie le type de matrice, le champ
  DataType. Toute les donnes se trouvent stockes dans
  SdifF->CurrMtrxH. La plupart de ses champs sont directement
  accessible par les fonctions indpendantes du mode d'ouverture du
  fichier.  <strong>Elle effectue une mise  jour de l'allocation
  mmoire de SdifF->CurrOneRow en fonction des paramtres de l'entte
  de matrice.</strong> Ainsi, on est normalement prs pour lire chaque
  ligne de la matrice courrante.    
<p><pre>
size_t SdifFReadMatrixHeader     (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadOneRow_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadOneRow (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC: 
  Cette fonction permet de lire 1 ligne de matrice. Les donnes lues
  sont stockes dans SdifF->CurrOneRow (jusqu' une prochaine lecture
  d'entte de matrice qui rinitialise ses paramtres).    
<p><pre>
size_t SdifFReadOneRow           (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadFrameHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadFrameHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC: 
  Cette fonction lit l'entte d'un frame  partir de la taille et
  jusqu'au temps. Donc <strong>elle ne lit pas la signature</strong>
  mais donne  SdifF->CurrFramH->Signature la valeur de
  SdifF->CurrSignature.  La lecture doit se faire avant, avec
  SdifFGetSignature.    
<p><pre>
size_t SdifFReadFrameHeader      (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFSkipMatrix_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFSkipMatrix (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC: 
  Cette fonction permet de passer une matrice toute entire entte
  incluse. Elle est utile lorsque qu'un frame contient plus de
  matrices que le programme lecteur n'en connat. Il peut ainsi les
  passer pour retomber sur un autre frame.    
<p><pre>
size_t SdifFSkipMatrix            (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifSkipMatrix_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifSkipMatrix (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifSkipMatrix            (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFSkipMatrixData_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFSkipMatrixData (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC: 
  Cette fonction permet de passer une matrice mais aprs la lecture de
  l'entte. On s'en sert lorsque le type de matrice est mauvais,
  inconnu, non interprtable par le programme lecteur.
<p>
  Note:  The matrix padding is skipped also.   
<p><pre>
size_t SdifFSkipMatrixData        (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifSkipMatrixData_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifSkipMatrixData (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifSkipMatrixData        (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFSkipFrameData_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFSkipFrameData (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC: 
  Cette fonction  le mme sens que SdifSkipMatrixData mais pour les
  frames. Il faut donc pour l'utiliser avoir au pralable lu la
  signature et l'entte.    
<p><pre>
size_t SdifFSkipFrameData         (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifSkipFrameData_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifSkipFrameData (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifSkipFrameData         (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadPadding_(SdifFileT_*SdifF,_size_t_Padding)$"><hr><p></p><h3>size_t SdifFReadPadding (SdifFileT *SdifF, size_t Padding);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC: 
  Cette fonction permet de lire le Padding en fin de matrice.
  l'utilisation classique de cette fonctin est:<br> 
  <code> SizeR =  <a href="#size_t_SdifFReadPadding_(SdifFileT_*SdifF,_size_t_Padding)$">SdifFReadPadding</a>(SdifF, <a href="#size_t_SdifFPaddingCalculate_(FILE_*f,_size_t_NbBytes)$">SdifFPaddingCalculate</a>(SdifF->Stream, SizeR));</code><br> 
  o SizeR est la taille en bytes lue depuis le
  dbut de la matrice, c'est  dire NbRow*NbCol*DataWith. En ralit,
  pour que SdifFPaddingCalculate fonctionne, il est seulement
  ncessaire que SizeR soit le nombre de bytes qui s'pare la position
  actuelle dans le fichier et un byte, repre d'allignement sur 64
  bits.    
<p><pre>
size_t SdifFReadPadding          (SdifFileT *SdifF, size_t Padding);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadUndeterminatedPadding_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadUndeterminatedPadding (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFReadUndeterminatedPadding (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadAndIgnore_(SdifFileT_*SdifF,_size_t_bytes)$"><hr><p></p><h3>size_t SdifFReadAndIgnore (SdifFileT *SdifF, size_t bytes);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC:
  Read and throw away <i>num</i> bytes from the file.   
<p><pre>
size_t SdifFReadAndIgnore (SdifFileT *SdifF, size_t bytes);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadOneMatrixType_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadOneMatrixType (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFReadOneMatrixType    (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadOneFrameType_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadOneFrameType (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFReadOneFrameType     (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadTextMatrix(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><hr><p></p><h3>size_t SdifFReadTextMatrix(SdifFileT *SdifF, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC:
  Function to read text matrix.
  Read header.
  Read data.
  Read padding.
  <p>
<p><pre>
size_t <a href="#char_*SdifFReadTextMatrix_(SdifFileT_*file)$">SdifFReadTextMatrix</a>(SdifFileT *SdifF, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadTextMatrixData(SdifFileT_*SdifF,_SdifStringT_*SdifString)$"><hr><p></p><h3>size_t SdifFReadTextMatrixData(SdifFileT *SdifF, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
  DOC:
  Function to read text matrix data.
  Make reallocation.
  Read data.
  Read padding.
  <p>
<p><pre>
size_t <a href="#size_t_SdifFReadTextMatrixData(SdifFileT_*SdifF,_SdifStringT_*SdifString)$">SdifFReadTextMatrixData</a>(SdifFileT *SdifF, SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFReadNameValueCurrHT_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFReadNameValueCurrHT (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFRead.h">SdifFRead.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFReadNameValueCurrHT  (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFScanGeneralHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFScanGeneralHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFScan.h">SdifFScan.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFScanGeneralHeader      (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFScanNameValueLCurrNVT_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFScanNameValueLCurrNVT (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFScan.h">SdifFScan.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFScanNameValueLCurrNVT  (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFScanAllType_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFScanAllType (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFScan.h">SdifFScan.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFScanAllType            (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFScanAllStreamID_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFScanAllStreamID (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFScan.h">SdifFScan.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFScanAllStreamID        (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFScanAllASCIIChunks_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFScanAllASCIIChunks (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFScan.h">SdifFScan.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFScanAllASCIIChunks     (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifFScanMatrixHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>void SdifFScanMatrixHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFScan.h">SdifFScan.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void    SdifFScanMatrixHeader       (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifFScanFrameHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>void SdifFScanFrameHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFScan.h">SdifFScan.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void    SdifFScanFrameHeader        (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifFScanOneRow_(SdifFileT_*SdifF)$"><hr><p></p><h3>void SdifFScanOneRow (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFScan.h">SdifFScan.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void    SdifFScanOneRow             (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFScanMatrixType_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFScanMatrixType (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFScan.h">SdifFScan.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFScanMatrixType         (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFScanFrameType_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFScanFrameType (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFScan.h">SdifFScan.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFScanFrameType          (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFScanNameValueCurrHT_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFScanNameValueCurrHT (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFScan.h">SdifFScan.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFScanNameValueCurrHT    (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteGeneralHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteGeneralHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC: 
  crit sur le fichier 'SDIF' puis 4 bytes chunk size.    
<p><pre>
size_t  SdifFWriteGeneralHeader   (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteChunkHeader_(SdifFileT_*SdifF,_SdifSignature_ChunkSignature,_size_t_ChunkSize)$"><hr><p></p><h3>size_t SdifFWriteChunkHeader (SdifFileT *SdifF, SdifSignature ChunkSignature, size_t ChunkSize);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteChunkHeader     (SdifFileT *SdifF, SdifSignature ChunkSignature, size_t ChunkSize);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteNameValueLCurrNVT_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteNameValueLCurrNVT (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteNameValueLCurrNVT (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteAllNameValueNVT_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteAllNameValueNVT (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteAllNameValueNVT   (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteOneNameValue_(SdifFileT_*SdifF,_SdifNameValueT_*NameValue)$"><hr><p></p><h3>size_t SdifFWriteOneNameValue (SdifFileT *SdifF, SdifNameValueT *NameValue);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteOneNameValue    (SdifFileT *SdifF, SdifNameValueT  *NameValue);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteOneMatrixType_(SdifFileT_*SdifF,_SdifMatrixTypeT_*MatrixType)$"><hr><p></p><h3>size_t SdifFWriteOneMatrixType (SdifFileT *SdifF, SdifMatrixTypeT *MatrixType);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteOneMatrixType   (SdifFileT *SdifF, SdifMatrixTypeT *MatrixType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteOneComponent_(SdifFileT_*SdifF,_SdifComponentT_*Component)$"><hr><p></p><h3>size_t SdifFWriteOneComponent (SdifFileT *SdifF, SdifComponentT *Component);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteOneComponent    (SdifFileT *SdifF, SdifComponentT  *Component);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteOneFrameType_(SdifFileT_*SdifF,_SdifFrameTypeT_*FrameType)$"><hr><p></p><h3>size_t SdifFWriteOneFrameType (SdifFileT *SdifF, SdifFrameTypeT *FrameType);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteOneFrameType    (SdifFileT *SdifF, SdifFrameTypeT  *FrameType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteOneStreamID_(SdifFileT_*SdifF,_SdifStreamIDT_*StreamID)$"><hr><p></p><h3>size_t SdifFWriteOneStreamID (SdifFileT *SdifF, SdifStreamIDT *StreamID);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteOneStreamID     (SdifFileT *SdifF, SdifStreamIDT   *StreamID);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteAllMatrixType_(SdifFileT*_SdifF)$"><hr><p></p><h3>size_t SdifFWriteAllMatrixType (SdifFileT* SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteAllMatrixType   (SdifFileT* SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteAllFrameType_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteAllFrameType (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteAllFrameType    (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteAllType_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteAllType (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteAllType         (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteAllStreamID_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteAllStreamID (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC:
  Remark:
         This function implements the new SDIF Specification (June 1999):
	 Name Value Table, Matrix and Frame Type declaration, Stream ID declaration are
	 defined in text matrix:
	 1NVT 1NVT
	 1TYP 1TYP
	 1IDS 1IDS
  Removed test for _SdifFormatVersion
  Now we write type in 1IDS frame which contains a 1IDS matrix
  <p>
<p><pre>
size_t  SdifFWriteAllStreamID     (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteAllASCIIChunks_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteAllASCIIChunks (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC: 
  crit tous les chunks ASCII. C'est  dire: les tables de names
  values, les types crs ou complts, et les Stream ID. Il faut donc
  au pralable avoir rempli compltement les tables avant de la
  lancer. Cette fonction de peut donc pas tre executer une 2nd fois
  durant une criture.    
<p><pre>
size_t  SdifFWriteAllASCIIChunks  (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteMatrixHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteMatrixHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC: 
  Aprs avoir donner une valeur  chaque champ de SdifF->CurrMtrxH
  grce  la fonction SdifFSetCurrMatrixHeader, SdifFWriteMatrixHeader
  crit toute l'entte de la matrice.  Cette fonction ralise aussi
  une mise  jour de SdifF->CurrOneRow, tant au niveau de l'allocation
  mmoire que du type de donnes.    
<p><pre>
size_t  SdifFWriteMatrixHeader    (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteOneRow_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteOneRow (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC: 
  Aprs avoir donner les valeurs  chaque case de SdifF->CurrOneRow 
  l'aide de SdifFSetCurrOneRow ou de SdifFSetCurrOneRowCol (suivant
  que l'on possde dj un tableau flottant ou respectivement une
  mthode pour retrouver une valeur de colonne), SdifFWriteOneRow
  crit 1 ligne de matrice suivant les paramtres de SdifF->CurrMtrxH.    
<p><pre>
size_t  SdifFWriteOneRow          (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteMatrixData_(SdifFileT_*SdifF,_void_*Data)$"><hr><p></p><h3>size_t SdifFWriteMatrixData (SdifFileT *SdifF, void *Data);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC: 
  Write whole matrix data, (after having set the matrix header with 
  SdifFSetCurrMatrixHeader (file, matrixsig, datatype, nrow, ncol).
  Data points to nbrow * nbcol * SdifSizeofDataType (datatype) bytes in 
  row-major order.  Padding still has to be written.    
<p><pre>
size_t SdifFWriteMatrixData (SdifFileT *SdifF, void *Data);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteMatrix_(SdifFileT_*SdifF,_SdifSignature_Signature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol,_void_*Data)$"><hr><p></p><h3>size_t SdifFWriteMatrix (SdifFileT *SdifF, SdifSignature Signature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol, void *Data);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC:
  Write whole matrix: header, data, and padding.
  Data points to NbRow * NbCol * SdifSizeofDataType (DataType) bytes in
  row-major order.   
<p><pre>
size_t SdifFWriteMatrix (SdifFileT     *SdifF,
			 SdifSignature  Signature,
			 SdifDataTypeET DataType,
			 SdifUInt4      NbRow,
			 SdifUInt4      NbCol,
			 void	       *Data);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteTextMatrix_(SdifFileT_*SdifF,_SdifSignature_Signature,_SdifUInt4_Length,_char_*Data)$"><hr><p></p><h3>size_t SdifFWriteTextMatrix (SdifFileT *SdifF, SdifSignature Signature, SdifUInt4 Length, char *Data);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC:
  Write a matrix with datatype text (header, data, and padding).
  Data points to Length bytes(!) of UTF-8 encoded text.  Length
  includes the terminating '\0' character!!!  That is, to write a
  C-String, use SdifFWriteTextMatrix (f, sig, strlen (str) + 1, str);
  to include it.   
<p><pre>
size_t SdifFWriteTextMatrix (SdifFileT     *SdifF,
			     SdifSignature  Signature,
			     SdifUInt4      Length,
			     char	   *Data);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifAsciiToUTF8_(char_*ascii_in,_char_*utf8_out)$"><hr><p></p><h3>size_t SdifAsciiToUTF8 (char *ascii_in, char *utf8_out);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC: 
  TBI: Convert ASCII C-String to UTF-8 encoded string, returning
  length (including terminating null character).   
<p><pre>
size_t SdifAsciiToUTF8 (char *ascii_in, char *utf8_out);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWritePadding_(SdifFileT_*SdifF,_size_t_Padding)$"><hr><p></p><h3>size_t SdifFWritePadding (SdifFileT *SdifF, size_t Padding);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC: 
  Cette fonction permet en fin d'criture de matrice d'ajouter le
  Padding ncessaire. Il faut cependant avoir la taille de ce
  Padding. On utilise <a href="#size_t_SdifFPaddingCalculate_(FILE_*f,_size_t_NbBytes)$">SdifFPaddingCalculate</a>(SdifF->Stream,
  SizeSinceAlignement) o SizeSinceAllignement est un
  <code>size_t</code> dsignant le nombre de bytes qui spare la
  position actuelle d'criture avec une position connue o le fichier
  est align sur 64 bits (en gnral, c'est la taille de la matrice en
  cours d'criture: NbRow*NbCol*DatWitdh).    
<p><pre>
size_t  SdifFWritePadding         (SdifFileT *SdifF, size_t Padding);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteFrameHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteFrameHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC: 
  Aprs avoir donner une valueur  chaque champ de SdifF->CurrFramH
  grce  la fonction SdifFSetCurrFrameHeader, SdifFWriteFrameHeader
  crit toute l'entte de frame.  Lorsque la taille est inconnue au
  moment de l'criture, donner la valeur _SdifUnknownSize. Ensuite,
  compter le nombre de bytes crit dans le frame et raliser un
  SdifUpdateChunkSize avec la taille calcule.    
<p><pre>
size_t  SdifFWriteFrameHeader     (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifUpdateChunkSize_(SdifFileT_*SdifF,_size_t_ChunkSize)$"><hr><p></p><h3>void SdifUpdateChunkSize (SdifFileT *SdifF, size_t ChunkSize);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC: 
  Execute un retour fichier de ChunkSize bytes et l'crit, donc on
  crase la taille du chunk ou du frame.  Dans le cas o le fichier
  est stderr ou stdout, l'action n'est pas ralise.    
<p><pre>
void    SdifUpdateChunkSize       (SdifFileT *SdifF, size_t ChunkSize);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifUpdateFrameHeader_(SdifFileT_*SdifF,_size_t_ChunkSize,_SdifInt4_NumMatrix)$"><hr><p></p><h3>int SdifUpdateFrameHeader (SdifFileT *SdifF, size_t ChunkSize, SdifInt4 NumMatrix);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC: 
  Rewrite given frame size and number of matrices in frame header.
  Return -1 on error or if file is not seekable (stdout or stderr).   
<p><pre>
int     SdifUpdateFrameHeader	  (SdifFileT *SdifF, size_t ChunkSize, 
				   SdifInt4 NumMatrix);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteFrameAndOneMatrix_(SdifFileT_*SdifF,_SdifSignature_FrameSignature,_SdifUInt4_NumID,_SdifFloat8_Time,_SdifSignature_MatrixSignature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol,_void_*Data)$"><hr><p></p><h3>size_t SdifFWriteFrameAndOneMatrix (SdifFileT *SdifF, SdifSignature FrameSignature, SdifUInt4 NumID, SdifFloat8 Time, SdifSignature MatrixSignature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol, void *Data);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC:
  Write a whole frame containing one matrix: 
  frame header, matrix header, matrix data, and padding.
  Data points to NbRow * NbCol * SdifSizeofDataType (DataType) bytes in
  row-major order. 
<p>
  This function has the big advantage that the frame size is known in
  advance, so there's no need to rewind and update after the matrix
  has been written.    
<p><pre>
size_t  SdifFWriteFrameAndOneMatrix (SdifFileT	    *SdifF,
				     SdifSignature  FrameSignature,
				     SdifUInt4      NumID,
				     SdifFloat8     Time,
				     SdifSignature  MatrixSignature,
				     SdifDataTypeET DataType,
				     SdifUInt4      NbRow,
				     SdifUInt4      NbCol,
				     void	    *Data);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifSizeOfFrameHeader_(void)$"><hr><p></p><h3>size_t SdifSizeOfFrameHeader (void);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC:
  Return (constant) size of frame header after signature and size field. 
  Use this to calculate the Size argument for SdifFSetCurrFrameHeader.   
<p><pre>
size_t SdifSizeOfFrameHeader (void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifSizeOfMatrix_(SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol)$"><hr><p></p><h3>size_t SdifSizeOfMatrix (SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC:
  Return size of matrix (header, data, padding).
  Use this to calculate the Size argument for SdifFSetCurrFrameHeader.   
<p><pre>
size_t SdifSizeOfMatrix (SdifDataTypeET DataType,
			 SdifUInt4      NbRow,
			 SdifUInt4      NbCol);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteTextFrame(SdifFileT_*SdifF,_SdifSignature_FrameSignature,_SdifUInt4_NumID,_SdifFloat8_Time,_SdifSignature_MatrixSignature,_char_*str,_size_t_length)$"><hr><p></p><h3>size_t SdifFWriteTextFrame(SdifFileT *SdifF, SdifSignature FrameSignature, SdifUInt4 NumID, SdifFloat8 Time, SdifSignature MatrixSignature, char *str, size_t length);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC:
  Write a text matrix using a string.
  Return number of bytes written.
  <p>
<p><pre>
size_t <a href="#size_t_SdifFWriteTextFrame(SdifFileT_*SdifF,_SdifSignature_FrameSignature,_SdifUInt4_NumID,_SdifFloat8_Time,_SdifSignature_MatrixSignature,_char_*str,_size_t_length)$">SdifFWriteTextFrame</a>(SdifFileT     *SdifF,
			   SdifSignature FrameSignature,
			   SdifUInt4     NumID,
			   SdifFloat8    Time,
			   SdifSignature MatrixSignature,
			   char          *str,
			   size_t        length);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteTextFrameSdifString(SdifFileT_*SdifF,_SdifSignature_FrameSignature,_SdifUInt4_NumID,_SdifFloat8_Time,_SdifSignature_MatrixSignature,_SdifStringT_*SdifString)$"><hr><p></p><h3>size_t SdifFWriteTextFrameSdifString(SdifFileT *SdifF, SdifSignature FrameSignature, SdifUInt4 NumID, SdifFloat8 Time, SdifSignature MatrixSignature, SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
  DOC:
  Write a text matrix using a SdifString.
  Return number of bytes written.
  <p>
<p><pre>
size_t <a href="#size_t_SdifFWriteTextFrameSdifString(SdifFileT_*SdifF,_SdifSignature_FrameSignature,_SdifUInt4_NumID,_SdifFloat8_Time,_SdifSignature_MatrixSignature,_SdifStringT_*SdifString)$">SdifFWriteTextFrameSdifString</a>(SdifFileT     *SdifF,
				     SdifSignature FrameSignature,
				     SdifUInt4     NumID,
				     SdifFloat8    Time,
				     SdifSignature MatrixSignature,
				     SdifStringT   *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteNameValueCurrHT_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteNameValueCurrHT (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteNameValueCurrHT (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFWriteAllNameValueHT_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFWriteAllNameValueHT (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFWrite.h">SdifFWrite.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t  SdifFWriteAllNameValueHT  (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFileT*_SdifFOpen_(const_char_*Name,_SdifFileModeET_Mode)$"><hr><p></p><h3>SdifFileT* SdifFOpen (const char *Name, SdifFileModeET Mode);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFileT*         SdifFOpen                    (const char *Name, SdifFileModeET Mode);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFileT*_SdifOpenFile_(const_char_*Name,_SdifFileModeET_Mode)$"><hr><p></p><h3>SdifFileT* SdifOpenFile (const char *Name, SdifFileModeET Mode);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFileT*         SdifOpenFile                 (const char *Name, SdifFileModeET Mode);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFileT*_SdifFOpenText_(SdifFileT_*SdifF,_const_char*_Name,_SdifFileModeET_Mode)$"><hr><p></p><h3>SdifFileT* SdifFOpenText (SdifFileT *SdifF, const char* Name, SdifFileModeET Mode);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFileT*         SdifFOpenText                (SdifFileT *SdifF, const char* Name, SdifFileModeET Mode);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifFClose_(SdifFileT_*SdifF)$"><hr><p></p><h3>void SdifFClose (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void               SdifFClose                   (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifCloseFile_(SdifFileT_*SdifF)$"><hr><p></p><h3>void SdifCloseFile (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void               SdifCloseFile                (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameHeaderT*_SdifFCreateCurrFramH_(SdifFileT_*SdifF,_SdifSignature_Signature)$"><hr><p></p><h3>SdifFrameHeaderT* SdifFCreateCurrFramH (SdifFileT *SdifF, SdifSignature Signature);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameHeaderT*  SdifFCreateCurrFramH         (SdifFileT *SdifF, SdifSignature Signature);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixHeaderT*_SdifFCreateCurrMtrxH_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifMatrixHeaderT* SdifFCreateCurrMtrxH (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifMatrixHeaderT* SdifFCreateCurrMtrxH         (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="FILE*_SdifFGetFILE_SwitchVerbose_(SdifFileT_*SdifF,_int_Verbose)$"><hr><p></p><h3>FILE* SdifFGetFILE_SwitchVerbose (SdifFileT *SdifF, int Verbose);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
FILE*              SdifFGetFILE_SwitchVerbose   (SdifFileT *SdifF, int Verbose);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifTakeCodedPredefinedTypes_(SdifFileT_*SdifF)$"><hr><p></p><h3>void SdifTakeCodedPredefinedTypes (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void               SdifTakeCodedPredefinedTypes (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifFLoadPredefinedTypes_(SdifFileT_*SdifF,_char_*TypesFileName)$"><hr><p></p><h3>void SdifFLoadPredefinedTypes (SdifFileT *SdifF, char *TypesFileName);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void               SdifFLoadPredefinedTypes     (SdifFileT *SdifF, char *TypesFileName);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifGenInit_(char_*PredefinedTypesFile)$"><hr><p></p><h3>void SdifGenInit (char *PredefinedTypesFile);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Initialise the SDIF library, providing a name for an optional additional
  file with type definitions or "".
  <b>This function has to be called once and only once per process 
  before any other call to the SDIF library.</b>   
<p><pre>
void SdifGenInit (char *PredefinedTypesFile); 
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifGenInitCond_(char_*PredefinedTypesFile)$"><hr><p></p><h3>void SdifGenInitCond (char *PredefinedTypesFile);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC:
  Initialise the SDIF library if it has not been initialised before.
  This function has to be called at least once, but can be called as
  many times as desired.  Especially useful for dynamic libraries.
<p>
  [in] PredefinedTypesFile:
	name for an optional additional file with type definitions or "".   
<p><pre>
void SdifGenInitCond (char *PredefinedTypesFile);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifGenKill_(void)$"><hr><p></p><h3>void SdifGenKill (void);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC:
  Deinitialise the SDIF library   
<p><pre>
void SdifGenKill (void); 
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintVersion(void)$"><hr><p></p><h3>void SdifPrintVersion(void);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC:
  Print version information to standard error.   
<p><pre>
void <a href="#void_SdifPrintVersion(void)$">SdifPrintVersion</a>(void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameHeaderT*_SdifFSetCurrFrameHeader_(SdifFileT_*SdifF,_SdifSignature_Signature,_SdifUInt4_Size,_SdifUInt4_NbMatrix,_SdifUInt4_NumID,_SdifFloat8_Time)$"><hr><p></p><h3>SdifFrameHeaderT* SdifFSetCurrFrameHeader (SdifFileT *SdifF, SdifSignature Signature, SdifUInt4 Size, SdifUInt4 NbMatrix, SdifUInt4 NumID, SdifFloat8 Time);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Permet de donner des valeurs  chaque champ de l'entte de frame
  temporaire de SdifF.<p> 
<p>
  Exemple:
  <code>SdifSetCurrFrameHeader(SdifF, '1FOB', _SdifUnknownSize, 3, streamid, 1.0);</code>   
<p><pre>
SdifFrameHeaderT* SdifFSetCurrFrameHeader (SdifFileT *SdifF, 
					   SdifSignature Signature, 
					   SdifUInt4 Size,
					   SdifUInt4 NbMatrix, 
					   SdifUInt4 NumID, 
					   SdifFloat8 Time);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixHeaderT*_SdifFSetCurrMatrixHeader_(SdifFileT_*SdifF,_SdifSignature_Signature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol)$"><hr><p></p><h3>SdifMatrixHeaderT* SdifFSetCurrMatrixHeader (SdifFileT *SdifF, SdifSignature Signature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Permet de donner des valeurs  chaque champ de l'entte de matice
  temporaire de SdifF.<p>
<p>
  Exemple:
  <code>SdifSetCurrMatrixHeader(SdifF, '1FOF', eFloat4, NbFofs, 7);</code>   
<p><pre>
SdifMatrixHeaderT* SdifFSetCurrMatrixHeader (SdifFileT *SdifF, 
					     SdifSignature Signature,
					     SdifDataTypeET DataType, 
					     SdifUInt4 NbRow, SdifUInt4 NbCol);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifOneRowT*_SdifFSetCurrOneRow_(SdifFileT_*SdifF,_void_*Values)$"><hr><p></p><h3>SdifOneRowT* SdifFSetCurrOneRow (SdifFileT *SdifF, void *Values);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Recopie la mmoire pointe par Values en fonction de l'entte de
  matrice courante.<p> 
<p>
  Exemple:<br>
<pre>
  #define NbCols = 10;<br>
<p>
  float t[NbCols] = { 1., 2., 3., 4., 5., 6., 7., 8., 9., 0.};<br>
<p>
  <a href="#SdifMatrixHeaderT*_SdifFSetCurrMatrixHeader_(SdifFileT_*SdifF,_SdifSignature_Signature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol)$">SdifFSetCurrMatrixHeader</a>(SdifF, 'mtrx', eFloat4, 1, NbCols);<br>
  SdifFSetCurrOneRow      (SdifF, (void*) t);<br>
</pre>
<p>
  On connait la taille de la mmoire  recopier par le type de donne
  (ici: eFloat4) et le nombre de colonnes (ici: NbCols). Il faut que
  le type de donne de la matrice courante corresponde avec la taille
  d'un lment de t. Si t est compos de float sur 4 bytes, alors on
  doit avoir eFloat4. Si t est compos de double float sur 8 bytes,
  alors c'est eFloat8.<br>
<p>
  En gnral, les donnes d'un programme ne se prsente pas sous cette
  forme et il faut raliser une transposition lors des transfert de
  Sdif  un programme. Le programme Diphone Ircam a un bon exemple de
  lecture avec transposition automatique, gnralise pour tout type
  de matrice.   
<p><pre>
SdifOneRowT*  SdifFSetCurrOneRow       (SdifFileT *SdifF, void *Values);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifOneRowT*_SdifFSetCurrOneRowCol_(SdifFileT_*SdifF,_SdifUInt4_numCol,_SdifFloat8_Value)$"><hr><p></p><h3>SdifOneRowT* SdifFSetCurrOneRowCol (SdifFileT *SdifF, SdifUInt4 numCol, SdifFloat8 Value);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Permet de donner la valeur Value dans la ligbe de matrice temporaire
  de SdifF  la colonne numCol (0<numCol<=SdifF->CurrMtrxH->NbCol).    
<p><pre>
SdifOneRowT* SdifFSetCurrOneRowCol (SdifFileT *SdifF, SdifUInt4
numCol, SdifFloat8 Value);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFloat8_SdifFCurrOneRowCol_(SdifFileT_*SdifF,_SdifUInt4_numCol)$"><hr><p></p><h3>SdifFloat8 SdifFCurrOneRowCol (SdifFileT *SdifF, SdifUInt4 numCol);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Recupre la valeur stocke  la colonne numCol de la ligne
  temporaire.  C'est un SdifFloat8 donc un double!!    
<p><pre>
SdifFloat8 SdifFCurrOneRowCol (SdifFileT *SdifF, SdifUInt4 numCol);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFloat8_SdifFCurrOneRowColName_(SdifFileT_*SdifF,_SdifMatrixTypeT_*MatrixType,_char_*NameCD)$"><hr><p></p><h3>SdifFloat8 SdifFCurrOneRowColName (SdifFileT *SdifF, SdifMatrixTypeT *MatrixType, char *NameCD);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Idem que la fonction prcdente mais en utilisant le type de la
  matrice et le nom de la colonne.    
<p><pre>
SdifFloat8    SdifFCurrOneRowColName   (SdifFileT *SdifF, 
					SdifMatrixTypeT *MatrixType, 
					char *NameCD);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifFCurrSignature_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifSignature SdifFCurrSignature (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Renvoie la signature temporaire de Chunk ou de Frame.    
<p><pre>
SdifSignature SdifFCurrSignature       (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifFCleanCurrSignature_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifSignature SdifFCleanCurrSignature (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Met  0 tous les bits de la signature temporaire.    
<p><pre>
SdifSignature SdifFCleanCurrSignature  (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifFCurrFrameSignature_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifSignature SdifFCurrFrameSignature (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Renvoie la signature temporaire du dernier Frame lu ou du prochain 
  crire.    
<p><pre>
SdifSignature SdifFCurrFrameSignature  (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifFCurrMatrixSignature_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifSignature SdifFCurrMatrixSignature (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Renvoie la signature temporaire de la dernier matrice lue ou de la
  prochaine  crire.    
<p><pre>
SdifSignature SdifFCurrMatrixSignature (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifOneRowT*_SdifFCurrOneRow_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifOneRowT* SdifFCurrOneRow (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Renvoie la ligne temporaire de SdifF.    
<p><pre>
SdifOneRowT*  SdifFCurrOneRow          (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void*_SdifFCurrOneRowData_(SdifFileT_*SdifF)$"><hr><p></p><h3>void* SdifFCurrOneRowData (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC:
  Returns a pointer to the data of the current matrix row.  According to the matrix data type, it can be a pointer to float or double.   
<p><pre>
void*	     SdifFCurrOneRowData	  (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifFCurrNbCol_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifUInt4 SdifFCurrNbCol (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Renvoie SdifF->CurrMtrx->NbCol, nombre de colonnes de la matrice en
  cours de traitement.    
<p><pre>
SdifUInt4     SdifFCurrNbCol           (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifFCurrNbRow_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifUInt4 SdifFCurrNbRow (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Renvoie SdifF->CurrMtrx->NbRow, nombre de lignes de la matrice en
  cours de traitement.    
<p><pre>
SdifUInt4     SdifFCurrNbRow           (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifDataTypeET_SdifFCurrDataType_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifDataTypeET SdifFCurrDataType (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Returns the data type of the current matrix.   
<p><pre>
SdifDataTypeET SdifFCurrDataType (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifFCurrNbMatrix_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifUInt4 SdifFCurrNbMatrix (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Renvoie SdifF->CurrFramH->NbMatrix, mombre de matrices du frame
  courant.    
<p><pre>
SdifUInt4     SdifFCurrNbMatrix        (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifFCurrID_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifUInt4 SdifFCurrID (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Renvoie SdifF->CurrFramH->NumID, index de l'objet du frame courant.    
<p><pre>
SdifUInt4     SdifFCurrID              (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFloat8_SdifFCurrTime_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifFloat8 SdifFCurrTime (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Renvoie SdifF->CurrFramH->Time.    
<p><pre>
SdifFloat8    SdifFCurrTime            (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValuesLT_*SdifFNameValueList_(SdifFileT_*file)$"><hr><p></p><h3>SdifNameValuesLT *SdifFNameValueList (SdifFileT *file);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC:
  Return list of NVTs for querying. 
  [] precondition NVTs have been read with SdifFReadAllASCIIChunks.   
<p><pre>
SdifNameValuesLT *SdifFNameValueList (SdifFileT *file);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFNameValueNum_(SdifFileT_*file)$"><hr><p></p><h3>int SdifFNameValueNum (SdifFileT *file);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC:
  Return number of NVTs present.
  [] precondition NVTs have been read with SdifFReadAllASCIIChunks.   
<p><pre>
int SdifFNameValueNum (SdifFileT *file);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifStreamIDTableT_*SdifFStreamIDTable_(SdifFileT_*file)$"><hr><p></p><h3>SdifStreamIDTableT *SdifFStreamIDTable (SdifFileT *file);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC:
  Return the file's stream ID table, created automatically by SdifFOpen.   
<p><pre>
SdifStreamIDTableT *SdifFStreamIDTable (SdifFileT *file);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFAddUserData_(SdifFileT_*file,_void_*data)$"><hr><p></p><h3>int SdifFAddUserData (SdifFileT *file, void *data);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC:
  Add user data, return index added   
<p><pre>
int SdifFAddUserData (SdifFileT *file, void *data);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_*SdifFGetUserData_(SdifFileT_*file,_int_index)$"><hr><p></p><h3>void *SdifFGetUserData (SdifFileT *file, int index);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC:
  Get user data by index   
<p><pre>
void *SdifFGetUserData (SdifFileT *file, int index);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFileT*_SdifFReInitMtrxUsed_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifFileT* SdifFReInitMtrxUsed (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFileT*    SdifFReInitMtrxUsed (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFileT*_SdifFPutInMtrxUsed_(SdifFileT_*SdifF,_SdifSignature_Sign)$"><hr><p></p><h3>SdifFileT* SdifFPutInMtrxUsed (SdifFileT *SdifF, SdifSignature Sign);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFileT*    SdifFPutInMtrxUsed  (SdifFileT *SdifF, SdifSignature Sign);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifFIsInMtrxUsed_(SdifFileT_*SdifF,_SdifSignature_Sign)$"><hr><p></p><h3>SdifSignature SdifFIsInMtrxUsed (SdifFileT *SdifF, SdifSignature Sign);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifSignature SdifFIsInMtrxUsed   (SdifFileT *SdifF, SdifSignature Sign);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFNumErrors_(SdifFileT_*SdifF,_SdifErrorLevelET_upto)$"><hr><p></p><h3>int SdifFNumErrors (SdifFileT *SdifF, SdifErrorLevelET upto);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Return number of errors present for file of level upto or more
  severe.  Example: <a href="#int_SdifFNumErrors_(SdifFileT_*SdifF,_SdifErrorLevelET_upto)$">SdifFNumErrors</a>(f, eError) is true if an error or a
  fatal error occurred since opening the file, false if there were
  only warnings or remarks.   
<p><pre>
int SdifFNumErrors (SdifFileT *SdifF, SdifErrorLevelET upto);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifErrorT*_SdifFLastError_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifErrorT* SdifFLastError (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Return pointer to last error struct or NULL if no error present
  for this file.   
<p><pre>
SdifErrorT*     SdifFLastError    (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifErrorTagET_SdifFLastErrorTag_(SdifFileT_*SdifF)$"><hr><p></p><h3>SdifErrorTagET SdifFLastErrorTag (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifFile.h">SdifFile.h</a>"</strong><p>
  DOC: 
  Return tag of last error or eNoError if no error present for this file.   
<p><pre>
SdifErrorTagET  SdifFLastErrorTag (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifFileModeE_SdifFileModeET_$"><hr><p></p><h3>typedef enum SdifFileModeE SdifFileModeET ;</h3></a>
<strong>#include "<a href="SdifFileStruct.h">SdifFileStruct.h</a>"</strong><p>
  DOC:
  File mode argument for SdifFOpen.
  <p>
<p><pre>
typedef enum SdifFileModeE
{
  eUnknownFileMode,	/* 0 */
  eWriteFile,
  eReadFile,
  ePredefinedTypes,	/* 3 */

  eModeMask = 7,	/* get rid of flags */

  /* from here on we have flags that can be or'ed with the previous modes */
  eParseSelection = 8
} SdifFileModeET ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="enum_SdifPassE_$"><hr><p></p><h3>enum SdifPassE ;</h3></a>
<strong>#include "<a href="SdifFileStruct.h">SdifFileStruct.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
enum SdifPassE
{
  eNotPass,
  eReadPass,
  eWritePass
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifFileS_SdifFileT$"><hr><p></p><h3>typedef struct SdifFileS SdifFileT;</h3></a>
<strong>#include "<a href="SdifFileStruct.h">SdifFileStruct.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifFileS SdifFileT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifFileS_$"><hr><p></p><h3>struct SdifFileS ;</h3></a>
<strong>#include "<a href="SdifFileStruct.h">SdifFileStruct.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifFileS
{
  char		     *Name;		/* Name of the file, can be "stdin, stdout, stderr */
  SdifFileModeET     Mode;		/* eWriteFile or eReadFile or ePredefinedTypes */
  int		     isSeekable;	/* file is neither standard i/o nor pipe i/o */

  SdifUInt4	     FormatVersion;	/* version of the SDIF format itself */
  SdifUInt4	     TypesVersion;	/* version of the description type collection */

  SdifNameValuesLT   *NameValues;       /* DataBase of Names Values */
  SdifHashTableT     *MatrixTypesTable; /* DataBase of Matrix Types */
  SdifHashTableT     *FrameTypesTable;  /* DataBase of Frame Types */
/*  SdifHashTableT     *StreamIDsTable;    DataBase of Stream IDs */
  SdifStreamIDTableT *StreamIDsTable;   /* DataBase of Stream IDs */
  SdifTimePositionLT *TimePositions;    /* List of (Time, Position in file) */
  SdifSelectionT     *Selection;	/* default selection parsed from Name */

  FILE *Stream;                         /* Stream to read or to write */

  SdifSignature      CurrSignature;
  SdifFrameHeaderT   *CurrFramH;        /* Current Frame Header can be NULL */
  SdifMatrixHeaderT  *CurrMtrxH;        /* Current Matrix Header can be NULL */

  SdifFrameTypeT     *CurrFramT;
  SdifMatrixTypeT    *CurrMtrxT;
  SdifFloat8         PrevTime;
  SdifSignatureTabT  *MtrxUsed;

  SdifOneRowT        *CurrOneRow;
  /* Current OneRow allocated memory in function
   * of _SdifGranule, use <a href="#SdifOneRowT*_SdifReInitOneRow_(SdifOneRowT_*OneRow,_SdifDataTypeET_DataType,_SdifUInt4_NbData)$">SdifReInitOneRow</a>(SdifOneRowT *OneRow, SdifDataTypeET DataType, SdifUInt4 NbData)
   * to assure NbData (=NbColumns) objects memory allocated
   */

  size_t  FileSize;
  size_t  ChunkSize;

  SdiffPosT  CurrFramPos;
  SdiffPosT  StartChunkPos;
  SdiffPosT  Pos;
  
  SdifUInt2  TypeDefPass;
  SdifUInt2  StreamIDPass;

  char *TextStreamName;                 /* Name of the text file corresponding to the sdif file */
  FILE *TextStream;                     /* Stream text */

  SdifUInt4     ErrorCount [eNumLevels];/* Error count per level of severity */
  SdifErrorLT  *Errors;			/* List of errors or warnings */

  int		NbUserData;		/* todo: hash table */
  void		*UserData [MaxUserData];
};	/* end struct SdifFileS */
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifFrameHeaderS_SdifFrameHeaderT$"><hr><p></p><h3>typedef struct SdifFrameHeaderS SdifFrameHeaderT;</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
   (ID=4)+(size=4)+(time=8)   
<p><pre>
typedef struct SdifFrameHeaderS SdifFrameHeaderT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifFrameHeaderS_$"><hr><p></p><h3>struct SdifFrameHeaderS ;</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifFrameHeaderS
{
  SdifSignature Signature;
  SdifUInt4  Size;
  SdifUInt4  NbMatrix;
  SdifUInt4  NumID;
  SdifFloat8 Time;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifFrameDataS_SdifFrameDataT$"><hr><p></p><h3>typedef struct SdifFrameDataS SdifFrameDataT;</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifFrameDataS SdifFrameDataT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifFrameDataS_$"><hr><p></p><h3>struct SdifFrameDataS ;</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifFrameDataS
{
  SdifFrameHeaderT *Header;
  SdifMatrixDataT* *Matrix_s;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameHeaderT*_SdifCreateFrameHeader(SdifSignature_Signature,_SdifUInt4_Size,_SdifUInt4_NbMatrix,_SdifUInt4_NumID,_SdifFloat8_Time)$"><hr><p></p><h3>SdifFrameHeaderT* SdifCreateFrameHeader(SdifSignature Signature, SdifUInt4 Size, SdifUInt4 NbMatrix, SdifUInt4 NumID, SdifFloat8 Time);</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameHeaderT* <a href="#SdifFrameHeaderT*_SdifCreateFrameHeader(SdifSignature_Signature,_SdifUInt4_Size,_SdifUInt4_NbMatrix,_SdifUInt4_NumID,_SdifFloat8_Time)$">SdifCreateFrameHeader</a>(SdifSignature Signature,
					       SdifUInt4 Size,
					       SdifUInt4 NbMatrix,
					       SdifUInt4 NumID,
					       SdifFloat8 Time);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameHeaderT*_SdifCreateFrameHeaderEmpty(SdifSignature_Signature)$"><hr><p></p><h3>SdifFrameHeaderT* SdifCreateFrameHeaderEmpty(SdifSignature Signature);</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameHeaderT* <a href="#SdifFrameHeaderT*_SdifCreateFrameHeaderEmpty(SdifSignature_Signature)$">SdifCreateFrameHeaderEmpty</a>(SdifSignature Signature);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillFrameHeader_(SdifFrameHeaderT_*FrameHeader)$"><hr><p></p><h3>void SdifKillFrameHeader (SdifFrameHeaderT *FrameHeader);</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void              SdifKillFrameHeader  (SdifFrameHeaderT *FrameHeader);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameDataT*_SdifCreateFrameData(SdifHashTableT_*FrameTypesTable,_SdifSignature_FrameSignature,_SdifUInt4_NumID,_SdifFloat8_Time)$"><hr><p></p><h3>SdifFrameDataT* SdifCreateFrameData(SdifHashTableT *FrameTypesTable, SdifSignature FrameSignature, SdifUInt4 NumID, SdifFloat8 Time);</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameDataT* <a href="#SdifFrameDataT*_SdifCreateFrameData(SdifHashTableT_*FrameTypesTable,_SdifSignature_FrameSignature,_SdifUInt4_NumID,_SdifFloat8_Time)$">SdifCreateFrameData</a>(SdifHashTableT *FrameTypesTable,
					   SdifSignature FrameSignature,
					   SdifUInt4 NumID,
					   SdifFloat8 Time);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillFrameData_(SdifHashTableT_*FrameTypesTable,_SdifFrameDataT_*FrameData)$"><hr><p></p><h3>void SdifKillFrameData (SdifHashTableT *FrameTypesTable, SdifFrameDataT *FrameData);</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void            SdifKillFrameData   (SdifHashTableT *FrameTypesTable, SdifFrameDataT *FrameData);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameDataT*_SdifFrameDataPutNthMatrixData(SdifFrameDataT_*FrameData,_unsigned_int_NthMatrix,_SdifMatrixDataT_*MatrixData)$"><hr><p></p><h3>SdifFrameDataT* SdifFrameDataPutNthMatrixData(SdifFrameDataT *FrameData, unsigned int NthMatrix, SdifMatrixDataT *MatrixData);</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameDataT* <a href="#SdifFrameDataT*_SdifFrameDataPutNthMatrixData(SdifFrameDataT_*FrameData,_unsigned_int_NthMatrix,_SdifMatrixDataT_*MatrixData)$">SdifFrameDataPutNthMatrixData</a>(SdifFrameDataT *FrameData, unsigned int NthMatrix,
						     SdifMatrixDataT *MatrixData);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameDataT*_SdifFrameDataPutComponentMatrixData(SdifHashTableT_*FrameTypesTable,_SdifFrameDataT_*FrameData,_char_*CompoName,_SdifMatrixDataT_*MatrixData)$"><hr><p></p><h3>SdifFrameDataT* SdifFrameDataPutComponentMatrixData(SdifHashTableT *FrameTypesTable, SdifFrameDataT *FrameData, char *CompoName, SdifMatrixDataT *MatrixData);</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameDataT* <a href="#SdifFrameDataT*_SdifFrameDataPutComponentMatrixData(SdifHashTableT_*FrameTypesTable,_SdifFrameDataT_*FrameData,_char_*CompoName,_SdifMatrixDataT_*MatrixData)$">SdifFrameDataPutComponentMatrixData</a>(SdifHashTableT *FrameTypesTable,
							   SdifFrameDataT *FrameData,
							   char *CompoName, SdifMatrixDataT *MatrixData);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixDataT*_SdifFrameDataGetNthMatrixData(SdifFrameDataT_*FrameData,_unsigned_int_NthMatrix)$"><hr><p></p><h3>SdifMatrixDataT* SdifFrameDataGetNthMatrixData(SdifFrameDataT *FrameData, unsigned int NthMatrix);</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifMatrixDataT* <a href="#SdifMatrixDataT*_SdifFrameDataGetNthMatrixData(SdifFrameDataT_*FrameData,_unsigned_int_NthMatrix)$">SdifFrameDataGetNthMatrixData</a>(SdifFrameDataT *FrameData, unsigned int NthMatrix);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixDataT*_SdifFrameDataGetComponentMatrixData(SdifHashTableT_*FrameTypesTable,_SdifFrameDataT_*FrameData,_char_*CompoName)$"><hr><p></p><h3>SdifMatrixDataT* SdifFrameDataGetComponentMatrixData(SdifHashTableT *FrameTypesTable, SdifFrameDataT *FrameData, char *CompoName);</h3></a>
<strong>#include "<a href="SdifFrame.h">SdifFrame.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifMatrixDataT* <a href="#SdifMatrixDataT*_SdifFrameDataGetComponentMatrixData(SdifHashTableT_*FrameTypesTable,_SdifFrameDataT_*FrameData,_char_*CompoName)$">SdifFrameDataGetComponentMatrixData</a>(SdifHashTableT *FrameTypesTable,
							    SdifFrameDataT *FrameData,
							    char *CompoName);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifComponentS_SdifComponentT$"><hr><p></p><h3>typedef struct SdifComponentS SdifComponentT;</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifComponentS SdifComponentT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifComponentS_$"><hr><p></p><h3>struct SdifComponentS ;</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifComponentS
{
  SdifSignature MtrxS;
  char *Name;
  SdifUInt4  Num;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifFrameTypeS_SdifFrameTypeT$"><hr><p></p><h3>typedef struct SdifFrameTypeS SdifFrameTypeT;</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifFrameTypeS SdifFrameTypeT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifFrameTypeS_$"><hr><p></p><h3>struct SdifFrameTypeS ;</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifFrameTypeS
{
  SdifSignature Signature;

  SdifFrameTypeT* FrameTypePre;

  SdifHashTableT *ComponentUseHT;
  SdifUInt4       NbComponentUse;

  SdifUInt4       NbComponent;
  SdifModifModeET ModifMode;
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifComponentT*_SdifCreateComponent_(SdifSignature_MtrxS,_char_*Name,_SdifUInt4_Num)$"><hr><p></p><h3>SdifComponentT* SdifCreateComponent (SdifSignature MtrxS, char *Name, SdifUInt4 Num);</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifComponentT* SdifCreateComponent (SdifSignature MtrxS, char *Name, SdifUInt4 Num);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillComponent_(SdifComponentT_*Component)$"><hr><p></p><h3>void SdifKillComponent (SdifComponentT *Component);</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void            SdifKillComponent   (SdifComponentT *Component);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameTypeT*_SdifCreateFrameType_(SdifSignature_FramS,_SdifFrameTypeT_*PredefinedFrameType)$"><hr><p></p><h3>SdifFrameTypeT* SdifCreateFrameType (SdifSignature FramS, SdifFrameTypeT *PredefinedFrameType);</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameTypeT* SdifCreateFrameType (SdifSignature FramS, SdifFrameTypeT *PredefinedFrameType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillFrameType_(SdifFrameTypeT_*FrameType)$"><hr><p></p><h3>void SdifKillFrameType (SdifFrameTypeT *FrameType);</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void            SdifKillFrameType               (SdifFrameTypeT *FrameType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifComponentT*_SdifFrameTypeGetComponent_MtrxS_(SdifFrameTypeT_*FrameType,_SdifSignature_MtrxS)$"><hr><p></p><h3>SdifComponentT* SdifFrameTypeGetComponent_MtrxS (SdifFrameTypeT *FrameType, SdifSignature MtrxS);</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifComponentT* SdifFrameTypeGetComponent_MtrxS (SdifFrameTypeT *FrameType, SdifSignature MtrxS);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifComponentT*_SdifFrameTypeGetComponent_(SdifFrameTypeT_*FrameType,_char_*NameC)$"><hr><p></p><h3>SdifComponentT* SdifFrameTypeGetComponent (SdifFrameTypeT *FrameType, char *NameC);</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifComponentT* SdifFrameTypeGetComponent       (SdifFrameTypeT *FrameType, char *NameC);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifComponentT*_SdifFrameTypeGetNthComponent_(SdifFrameTypeT_*FrameType,_SdifUInt4_NumC)$"><hr><p></p><h3>SdifComponentT* SdifFrameTypeGetNthComponent (SdifFrameTypeT *FrameType, SdifUInt4 NumC);</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifComponentT* SdifFrameTypeGetNthComponent    (SdifFrameTypeT *FrameType, SdifUInt4 NumC);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameTypeT*_SdifFrameTypePutComponent_(SdifFrameTypeT_*FrameType,_SdifSignature_MtrxS,_char_*NameC)$"><hr><p></p><h3>SdifFrameTypeT* SdifFrameTypePutComponent (SdifFrameTypeT *FrameType, SdifSignature MtrxS, char *NameC);</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameTypeT* SdifFrameTypePutComponent       (SdifFrameTypeT *FrameType, SdifSignature MtrxS, char *NameC);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameTypeT*_SdifGetFrameType_(SdifHashTableT_*FrameTypeHT,_SdifSignature_FramS)$"><hr><p></p><h3>SdifFrameTypeT* SdifGetFrameType (SdifHashTableT *FrameTypeHT, SdifSignature FramS);</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameTypeT* SdifGetFrameType       (SdifHashTableT *FrameTypeHT, SdifSignature FramS);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPutFrameType_(SdifHashTableT_*FrameTypeHT,_SdifFrameTypeT_*FrameType)$"><hr><p></p><h3>void SdifPutFrameType (SdifHashTableT *FrameTypeHT, SdifFrameTypeT *FrameType);</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void            SdifPutFrameType       (SdifHashTableT *FrameTypeHT, SdifFrameTypeT *FrameType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt2_SdifExistUserFrameType_(SdifHashTableT_*FrameTypeHT)$"><hr><p></p><h3>SdifUInt2 SdifExistUserFrameType (SdifHashTableT *FrameTypeHT);</h3></a>
<strong>#include "<a href="SdifFrameType.h">SdifFrameType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifUInt2       SdifExistUserFrameType (SdifHashTableT *FrameTypeHT);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$"><hr><p></p><h3>SdifUInt4 SdifSignatureConst (SdifUInt4 four_char_code);</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
  DOC:
  Macro to generate proper-endianed 4 char SDIF signature from 
  something like 'ABCD'.
   <p>
<p><pre>
SdifUInt4 SdifSignatureConst (SdifUInt4 four_char_code);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifSignatureE_SdifSignatureET$"><hr><p></p><h3>typedef enum SdifSignatureE SdifSignatureET;</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef enum SdifSignatureE
{
  eSDIF = <a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$">SdifSignatureConst</a>('SDIF'), /* SDIF header */
  e1NVT = <a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$">SdifSignatureConst</a>('1NVT'), /* Name Value Table */
  e1TYP = <a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$">SdifSignatureConst</a>('1TYP'), /* TYPe declarations */
  e1MTD = <a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$">SdifSignatureConst</a>('1MTD'), /* Matrix Type Declaration */
  e1FTD = <a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$">SdifSignatureConst</a>('1FTD'), /* Frame Type Declaration */
  e1IDS = <a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$">SdifSignatureConst</a>('1IDS'), /* ID Stream Table */
  eSDFC = <a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$">SdifSignatureConst</a>('SDFC'), /* Start Data Frame Chunk (text files) */
  eENDC = <a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$">SdifSignatureConst</a>('ENDC'), /* END Chunk (text files) */
  eENDF = <a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$">SdifSignatureConst</a>('ENDF'), /* END File (text files) */
  eFORM = <a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$">SdifSignatureConst</a>('FORM'), /* FORM for IFF compatibility (obsolete ?) */
  eEmptySignature = <a href="#SdifUInt4_SdifSignatureConst_(SdifUInt4_four_char_code)$">SdifSignatureConst</a>('\0\0\0\0')
} SdifSignatureET;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifModifModeE_SdifModifModeET$"><hr><p></p><h3>typedef enum SdifModifModeE SdifModifModeET;</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef enum SdifModifModeE
{
  eNoModif,
  eCanModif
} SdifModifModeET;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifDataTypeE_SdifDataTypeET$"><hr><p></p><h3>typedef enum SdifDataTypeE SdifDataTypeET;</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef enum SdifDataTypeE
{
  eText	    = 0x0301,
  eChar     = 0x0301,
  eFloat4   = 0x0004,
  eFloat8   = 0x0008,
  eInt2     = 0x0102,
  eInt4     = 0x0104,
  eInt8     = 0x0108,
  eUInt2    = 0x0202,
  eUInt4    = 0x0204,
  eUInt8    = 0x0208,
 	    
  eFloat4a  = 0x0001,	/* =  1 */    /* Backwards compatibility with old */
  eFloat4b  = 0x0010,	/* = 32 */    /* IRCAM versions &lt; 3 of SDIF */
  eFloat8a  = 0x0002,	/* =  2 */    /* IN TEXT MODE ONLY! */
  eFloat8b  = 0x0020	/* = 64 */
} SdifDataTypeET;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifDataTypeE_SdifDataTypeET$"><hr><p></p><h3>typedef enum SdifDataTypeE SdifDataTypeET;</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef enum SdifDataTypeE
{
  eUnicode  = 0,
  eFloat4   = 1,
  eFloat8   = 2,
  eInt4     = 3,
  eUInt4    = 4,
  eChar     = 5,
  eInt2     = 6,
  eUInt2    = 7,
  eFloat4Old = 32
} SdifDataTypeET;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char*_SdifSignatureToString(SdifSignature_Signature)$"><hr><p></p><h3>char* SdifSignatureToString(SdifSignature Signature);</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
char*     <a href="#char*_SdifSignatureToString(SdifSignature_Signature)$">SdifSignatureToString</a>(SdifSignature Signature);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="short_SdifSignatureCmpNoVersion(SdifSignature_Signature1,_SdifSignature_Signature2)$"><hr><p></p><h3>short SdifSignatureCmpNoVersion(SdifSignature Signature1, SdifSignature Signature2);</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
  DOC: 
  Compare two signatures, ignoring the first character which
  encodes the type version.  Note that comparison of full signatures
  can be done simply with '=='. 
  <p>
<p><pre>
short     <a href="#short_SdifSignatureCmpNoVersion(SdifSignature_Signature1,_SdifSignature_Signature2)$">SdifSignatureCmpNoVersion</a>(SdifSignature Signature1, SdifSignature Signature2);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifSizeofDataType_(SdifDataTypeET_DataType)$"><hr><p></p><h3>SdifUInt4 SdifSizeofDataType (SdifDataTypeET DataType);</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
  DOC: 
  Returns size of SDIF data type in bytes
  (which is always the low-order byte).  
  <p>
<p><pre>
SdifUInt4 SdifSizeofDataType (SdifDataTypeET DataType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifDataTypeKnown_(SdifDataTypeET_DataType)$"><hr><p></p><h3>int SdifDataTypeKnown (SdifDataTypeET DataType);</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
  DOC: 
  Returns true if DataType is in the list of known data types.
  <p>
<p><pre>
int SdifDataTypeKnown (SdifDataTypeET DataType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifPaddingCalculate_(size_t_NbBytes)$"><hr><p></p><h3>size_t SdifPaddingCalculate (size_t NbBytes);</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t    SdifPaddingCalculate  (size_t NbBytes);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFPaddingCalculate_(FILE_*f,_size_t_NbBytes)$"><hr><p></p><h3>size_t SdifFPaddingCalculate (FILE *f, size_t NbBytes);</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t    SdifFPaddingCalculate (FILE *f, size_t NbBytes);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="short_SdifFloat8Equ(SdifFloat8_f1,_SdifFloat8_f2)$"><hr><p></p><h3>short SdifFloat8Equ(SdifFloat8 f1, SdifFloat8 f2);</h3></a>
<strong>#include "<a href="SdifGlobals.h">SdifGlobals.h</a>"</strong><p>
   (double f1) == (double f2) with _SdifFloatEps for error   
<p><pre>
short <a href="#short_SdifFloat8Equ(SdifFloat8_f1,_SdifFloat8_f2)$">SdifFloat8Equ</a>(SdifFloat8 f1, SdifFloat8 f2);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_char_SdifChar$"><hr><p></p><h3>typedef char SdifChar;</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef char           SdifChar;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_short_SdifInt2$"><hr><p></p><h3>typedef short SdifInt2;</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef short          SdifInt2;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_unsigned_short_SdifUInt2$"><hr><p></p><h3>typedef unsigned short SdifUInt2;</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef unsigned short SdifUInt2;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_int_SdifInt4$"><hr><p></p><h3>typedef int SdifInt4;</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef int            SdifInt4;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_unsigned_int_SdifUInt4$"><hr><p></p><h3>typedef unsigned int SdifUInt4;</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef unsigned int   SdifUInt4;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_float_SdifFloat4$"><hr><p></p><h3>typedef float SdifFloat4;</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef float          SdifFloat4;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_double_SdifFloat8$"><hr><p></p><h3>typedef double SdifFloat8;</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef double         SdifFloat8;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_unsigned_int_SdifSignature$"><hr><p></p><h3>typedef unsigned int SdifSignature;</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef unsigned int   SdifSignature;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifMachineE_SdifMachineET$"><hr><p></p><h3>typedef enum SdifMachineE SdifMachineET;</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef enum SdifMachineE
{
  eUndefinedMachine,
  eBigEndian,
  eLittleEndian,
  eLittleEndianLittleConst,
  eBigEndian64,
  eLittleEndian64,
  eLittleEndianLittleConst64,
  ePDPEndian
} SdifMachineET;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMachineET_SdifGetMachineType(void)$"><hr><p></p><h3>SdifMachineET SdifGetMachineType(void);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifMachineET <a href="#SdifMachineET_SdifGetMachineType(void)$">SdifGetMachineType</a>(void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMachineET_SdifInitMachineType(void)$"><hr><p></p><h3>SdifMachineET SdifInitMachineType(void);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifMachineET <a href="#SdifMachineET_SdifInitMachineType(void)$">SdifInitMachineType</a>(void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifLittleToBig(void_*BigPtr,_void_*LittlePtr,_size_t_size)$"><hr><p></p><h3>void SdifLittleToBig(void *BigPtr, void *LittlePtr, size_t size);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void <a href="#void_SdifLittleToBig(void_*BigPtr,_void_*LittlePtr,_size_t_size)$">SdifLittleToBig</a>(void *BigPtr, void *LittlePtr, size_t size);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifBigToLittle(void_*InOutPtr,_size_t_size)$"><hr><p></p><h3>void SdifBigToLittle(void *InOutPtr, size_t size);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void <a href="#void_SdifBigToLittle(void_*InOutPtr,_size_t_size)$">SdifBigToLittle</a>(void *InOutPtr, size_t size);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifStrLen_(const_char_*s)$"><hr><p></p><h3>int SdifStrLen (const char *s);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int       SdifStrLen  (const char *s);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifStrCmp_(const_char_*s1,_const_char_*s2)$"><hr><p></p><h3>int SdifStrCmp (const char *s1, const char *s2);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
   returns 0 if strings are equal   
<p><pre>
int       SdifStrCmp  (const char *s1, const char *s2);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifStrEq(const_char_*s1,_const_char_*s2)$"><hr><p></p><h3>int SdifStrEq(const char *s1, const char *s2);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
   returns true if strings are equal   
<p><pre>
int	  <a href="#int_SdifStrEq(const_char_*s1,_const_char_*s2)$">SdifStrEq</a>(const char *s1, const char *s2);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifStrNCmp_(const_char_*s1,_const_char_*s2,_unsigned_int_n)$"><hr><p></p><h3>int SdifStrNCmp (const char *s1, const char *s2, unsigned int n);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int       SdifStrNCmp (const char *s1, const char *s2, unsigned int n);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char*_SdifStrNCpy_(char_*s1,_const_char_*s2,_unsigned_int_n)$"><hr><p></p><h3>char* SdifStrNCpy (char *s1, const char *s2, unsigned int n);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
char*     SdifStrNCpy (char *s1, const char *s2, unsigned int n);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char*_SdifCreateStrNCpy_(const_char*_Source,_size_t_Size)$"><hr><p></p><h3>char* SdifCreateStrNCpy (const char* Source, size_t Size);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
char*     SdifCreateStrNCpy (const char* Source, size_t Size);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillStr_(char*_String)$"><hr><p></p><h3>void SdifKillStr (char* String);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void      SdifKillStr (char* String);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifBinaryMode_SdifBinaryModeET_$"><hr><p></p><h3>typedef enum SdifBinaryMode SdifBinaryModeET ;</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef enum SdifBinaryMode
{
  eBinaryModeUnknown,
  eBinaryModeWrite,
  eBinaryModeRead,
  eBinaryModeStdInput,
  eBinaryModeStdOutput,
  eBinaryModeStdError
} SdifBinaryModeET ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifSetStdIOBinary_(void)$"><hr><p></p><h3>void SdifSetStdIOBinary (void);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void     SdifSetStdIOBinary (void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="FILE*_SdiffBinOpen_(const_char_*_Name,_SdifBinaryModeET_Mode)$"><hr><p></p><h3>FILE* SdiffBinOpen (const char * Name, SdifBinaryModeET Mode);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
FILE*    SdiffBinOpen       (const char * Name, SdifBinaryModeET Mode);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifInt4_SdiffBinClose_(FILE_*f)$"><hr><p></p><h3>SdifInt4 SdiffBinClose (FILE *f);</h3></a>
<strong>#include "<a href="SdifHard_OS.h">SdifHard_OS.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifInt4 SdiffBinClose      (FILE *f);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifHashIndexTypeE_SdifHashIndexTypeET$"><hr><p></p><h3>typedef enum SdifHashIndexTypeE SdifHashIndexTypeET;</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef enum SdifHashIndexTypeE
{
  eHashChar,
  eHashInt4
} SdifHashIndexTypeET;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_union_SdifHashIndexU_SdifHashIndexUT$"><hr><p></p><h3>typedef union SdifHashIndexU SdifHashIndexUT;</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef union SdifHashIndexU SdifHashIndexUT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char*_Char[1]$"><hr><p></p><h3>char* Char[1];</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
  char* Char[1]; /* tab of one pointer to fixe union size at 4 or 8 bytes */
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="unsigned_int_Int4$"><hr><p></p><h3>unsigned int Int4;</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
  unsigned int  Int4;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifHashNS_SdifHashNT$"><hr><p></p><h3>typedef struct SdifHashNS SdifHashNT;</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifHashNS SdifHashNT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifHashNS_$"><hr><p></p><h3>struct SdifHashNS ;</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifHashNS 
{
  SdifHashNT *Next;
  SdifHashIndexUT Index;
  void* Data;
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifHashTableS_SdifHashTableT$"><hr><p></p><h3>typedef struct SdifHashTableS SdifHashTableT;</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifHashTableS SdifHashTableT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifHashTableS_$"><hr><p></p><h3>struct SdifHashTableS ;</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifHashTableS
{
  SdifHashNT* *Table;
  unsigned int HashSize;
  SdifHashIndexTypeET IndexType;
  void (*Killer)();  /* no verification of arguments */
  unsigned int NbOfData;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifHashTableT*_SdifCreateHashTable(unsigned_int_HashSize,_SdifHashIndexTypeET_IndexType,_void_(*Killer)())$"><hr><p></p><h3>SdifHashTableT* SdifCreateHashTable(unsigned int HashSize, SdifHashIndexTypeET IndexType, void (*Killer)());</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifHashTableT* <a href="#SdifHashTableT*_SdifCreateHashTable(unsigned_int_HashSize,_SdifHashIndexTypeET_IndexType,_void_(*Killer)())$">SdifCreateHashTable</a>(unsigned int HashSize, SdifHashIndexTypeET IndexType, void (*Killer)());
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifMakeEmptyHashTable_(SdifHashTableT*_HTable)$"><hr><p></p><h3>void SdifMakeEmptyHashTable (SdifHashTableT* HTable);</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void SdifMakeEmptyHashTable (SdifHashTableT* HTable);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillHashTable_(SdifHashTableT*_HTable)$"><hr><p></p><h3>void SdifKillHashTable (SdifHashTableT* HTable);</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void SdifKillHashTable      (SdifHashTableT* HTable);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="unsigned_int_SdifHashChar(const_char*_s,_unsigned_int_nchar,_unsigned_int_HashSize)$"><hr><p></p><h3>unsigned int SdifHashChar(const char* s, unsigned int nchar, unsigned int HashSize);</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
  *****************  eHashChar ***************  
<p><pre>
unsigned int <a href="#unsigned_int_SdifHashChar(const_char*_s,_unsigned_int_nchar,_unsigned_int_HashSize)$">SdifHashChar</a>(const char* s, unsigned int nchar, unsigned int HashSize);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void*_SdifHashTableSearchChar(SdifHashTableT*_HTable,_const_char_*s,_unsigned_int_nchar)$"><hr><p></p><h3>void* SdifHashTableSearchChar(SdifHashTableT* HTable, const char *s, unsigned int nchar);</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void*           <a href="#void*_SdifHashTableSearchChar(SdifHashTableT*_HTable,_const_char_*s,_unsigned_int_nchar)$">SdifHashTableSearchChar</a>(SdifHashTableT* HTable, const char *s, unsigned int nchar);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifHashTableT*_SdifHashTablePutChar_(SdifHashTableT*_HTable,_const_char_*s,_unsigned_int_nchar,_void*_Data)$"><hr><p></p><h3>SdifHashTableT* SdifHashTablePutChar (SdifHashTableT* HTable, const char *s, unsigned int nchar, void* Data);</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifHashTableT* SdifHashTablePutChar   (SdifHashTableT* HTable, const char *s, unsigned int nchar, void* Data);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="unsigned_int_SdifHashInt4(unsigned_int_i,_unsigned_int_HashSize)$"><hr><p></p><h3>unsigned int SdifHashInt4(unsigned int i, unsigned int HashSize);</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
  **************** eHashInt4 *********************  
<p><pre>
unsigned int <a href="#unsigned_int_SdifHashInt4(unsigned_int_i,_unsigned_int_HashSize)$">SdifHashInt4</a>(unsigned int i, unsigned int HashSize);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void*_SdifHashTableSearchInt4(SdifHashTableT*_HTable,_unsigned_int_i)$"><hr><p></p><h3>void* SdifHashTableSearchInt4(SdifHashTableT* HTable, unsigned int i);</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void*           <a href="#void*_SdifHashTableSearchInt4(SdifHashTableT*_HTable,_unsigned_int_i)$">SdifHashTableSearchInt4</a>(SdifHashTableT* HTable, unsigned int i);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifHashTableT*_SdifHashTablePutInt4_(SdifHashTableT*_HTable,_const_unsigned_int_i,_void*_Data)$"><hr><p></p><h3>SdifHashTableT* SdifHashTablePutInt4 (SdifHashTableT* HTable, const unsigned int i, void* Data);</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifHashTableT* SdifHashTablePutInt4   (SdifHashTableT* HTable, const unsigned int i, void* Data);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void*_SdifHashTableSearch_(SdifHashTableT*_HTable,_void_*ptr,_unsigned_int_nobj)$"><hr><p></p><h3>void* SdifHashTableSearch (SdifHashTableT* HTable, void *ptr, unsigned int nobj);</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
  ************************** for all **********************  
<p><pre>
void*           SdifHashTableSearch (SdifHashTableT* HTable, void *ptr, unsigned int nobj);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifHashTableT*_SdifHashTablePut_(SdifHashTableT*_HTable,_const_void_*ptr,_unsigned_int_nobj,_void*_Data)$"><hr><p></p><h3>SdifHashTableT* SdifHashTablePut (SdifHashTableT* HTable, const void *ptr, unsigned int nobj, void* Data);</h3></a>
<strong>#include "<a href="SdifHash.h">SdifHash.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifHashTableT* SdifHashTablePut    (SdifHashTableT* HTable, const void *ptr, unsigned int nobj, void* Data);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFReadNextSelectedFrameHeader_(SdifFileT_*file)$"><hr><p></p><h3>int SdifFReadNextSelectedFrameHeader (SdifFileT *file);</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
  DOC: 
  Read frame headers until a frame matching the file selection
  has been found or the end of the file has been reached.
<p>
  [] Return false if end of file was reached, true if data has been read.   
<p><pre>
int SdifFReadNextSelectedFrameHeader (SdifFileT *file);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFWriteMatrixColumns_(SdifFileT_*file,_SdifSignature_Signature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol,_void_*columns_[])$"><hr><p></p><h3>SdifFWriteMatrixColumns (SdifFileT *file, SdifSignature Signature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol, void *columns []);</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
  DOC: 
  Write whole matrix, given as separate columns in array "columns" of
  pointer to "DataType".  Each columns [i], i = 0..NbCol-1, points to 
  NbRow * SdifSizeofDataType (DataType) bytes.  
  TBI 
  <p>
<p><pre>
SdifFWriteMatrixColumns (SdifFileT     *file,
			 SdifSignature  Signature,
			 SdifDataTypeET DataType,
			 SdifUInt4      NbRow,
			 SdifUInt4      NbCol,
			 void	       *columns []);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFWriteTextMatrix_(SdifFileT_f,_SdifSignature_matrixsig,_const_char_*str)_$"><hr><p></p><h3>SdifFWriteTextMatrix (SdifFileT f, SdifSignature matrixsig, const char *str) ;</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFWriteTextMatrix (SdifFileT f, SdifSignature matrixsig, const char *str)
                                                                                                                                                                                                                                       
;</pre>
<p><em>Function is currently defined <strong>inline</strong>.</em></p>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_int_(*SdifMatrixCallbackT)_(SdifFileT_*file,_int_nummatrix,_void_*userdata)$"><hr><p></p><h3>typedef int (*SdifMatrixCallbackT) (SdifFileT *file, int nummatrix, void *userdata);</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
  DOC:
  Definition of the matrix callback function type, used for SdifReadSimple. 
  TBI 
  <p>
<p><pre>
typedef int (*SdifMatrixCallbackT) (SdifFileT *file, 
				    int nummatrix, 
				    void *userdata);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifReadSimple_(char_*filename,_SdifMatrixCallbackT_matrixfunc,_void_*userdata)$"><hr><p></p><h3>SdifReadSimple (char *filename, SdifMatrixCallbackT matrixfunc, void *userdata);</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
  DOC: 
  Reads an entire SDIF file, calling matrixfunc for each matrix in the
  SDIF selection taken from the filename.  Matrixfunc is called with
  the SDIF file pointer, the matrix count within the current frame,
  and the userdata unchanged. 
  TBI 
  <p>
<p><pre>
SdifReadSimple (char		    *filename, 
		SdifMatrixCallbackT matrixfunc,
		void		    *userdata);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFReadMatrixAs_TYPE__()$"><hr><p></p><h3>SdifFReadMatrixAs_TYPE_ ();</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFReadMatrixAs_TYPE_ ();
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFReadMatrix_(SdifFileT_*file)$"><hr><p></p><h3>int SdifFReadMatrix (SdifFileT *file);</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
  DOC: 
  Reads matrix header and data into memory allocated by the library,
  accessible by SdifFCurrMatrixData ().   
<p><pre>
int SdifFReadMatrix (SdifFileT *file);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFReadMatrixAs_(SdifFileT_*file,_SdifDataTypeET_as_type)$"><hr><p></p><h3>int SdifFReadMatrixAs (SdifFileT *file, SdifDataTypeET as_type);</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifFReadMatrixAs (SdifFileT *file, SdifDataTypeET as_type);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char_*SdifFReadTextMatrix_(SdifFileT_*file)$"><hr><p></p><h3>char *SdifFReadTextMatrix (SdifFileT *file);</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
  ? text special: return allocated, decoded c-string, to be free'd by caller   
<p><pre>
char *SdifFReadTextMatrix (SdifFileT *file);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFReadMatrixData_(SdifFileT_*file,_void_*target)$"><hr><p></p><h3>int SdifFReadMatrixData (SdifFileT *file, void *target);</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
  DOC: 
  Reads matrix data into memory pointed to by target, which must point
  to at least nbrow * nbcol * size of datatype bytes of memory.  If
  target is NULL, the library will allocate enough space for the data
  of one matrix, accessible by SdifFCurrMatrixData ().
<p>
  [Precondition:] 
  Matrix header must have been read with SdifFReadMatrixHeader.    
<p><pre>
int SdifFReadMatrixData   (SdifFileT *file, void *target);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFReadMatrixDataAs_(SdifFileT_*file,_void_*target,_SdifDataTypeET_as_type)$"><hr><p></p><h3>int SdifFReadMatrixDataAs (SdifFileT *file, void *target, SdifDataTypeET as_type);</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifFReadMatrixDataAs (SdifFileT *file, void *target,
			   SdifDataTypeET as_type);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_*SdifFCurrMatrixData_(SdifFileT_*file)_$"><hr><p></p><h3>void *SdifFCurrMatrixData (SdifFileT *file) ;</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
   --> SdifMatrix.h: add to SdifMatrixHeaderS not void *MatrixData, but:
<p>
   DataTypeUT Data;
<p>
   --> SdifFile.c: add void *SdifFCurrMatrixData (SdifFileT *);
  <p>
<p><pre>
void *SdifFCurrMatrixData (SdifFileT *file)
                                        
;</pre>
<p><em>Function is currently defined <strong>inline</strong>.</em></p>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_*SdifGetColumn_()$"><hr><p></p><h3>void *SdifGetColumn ();</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void *SdifGetColumn ();
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFCheckStatus_(SdifFileT_*file)_$"><hr><p></p><h3>int SdifFCheckStatus (SdifFileT *file) ;</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int /*bool*/ SdifFCheckStatus (SdifFileT *file)
                                                        
;</pre>
<p><em>Function is currently defined <strong>inline</strong>.</em></p>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFCheckStatusPrint_(SdifFileT_*file)_$"><hr><p></p><h3>int SdifFCheckStatusPrint (SdifFileT *file) ;</h3></a>
<strong>#include "<a href="SdifHighLevel.h">SdifHighLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int /*bool*/ SdifFCheckStatusPrint (SdifFileT *file)
                                                                                                                                                        
;</pre>
<p><em>Function is currently defined <strong>inline</strong>.</em></p>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_void_(*KillerFT)_(void_*)$"><hr><p></p><h3>typedef void (*KillerFT) (void *);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef void (*KillerFT) (void *);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifListNS_SdifListNT$"><hr><p></p><h3>typedef struct SdifListNS SdifListNT;</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifListNS SdifListNT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifListNS_$"><hr><p></p><h3>struct SdifListNS ;</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifListNS 
{
  SdifListNT *Next;
  void* Data;
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifListNStockS_SdifListNStockT$"><hr><p></p><h3>typedef struct SdifListNStockS SdifListNStockT;</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifListNStockS SdifListNStockT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifListNStockS_$"><hr><p></p><h3>struct SdifListNStockS ;</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifListNStockS
{
    SdifListNT*  StockList; /* list of arrays of nodes, the first node is used to chain arrays */
    unsigned int SizeOfOneStock; /* must be &gt; 1 */
    unsigned int NbStock;

    unsigned int NbNodesUsedInCurrStock;

    SdifListNT* Trash; /* to recycle nodes */

};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifInitListNStock_(SdifListNStockT_*Stock,_unsigned_int_SizeOfOneStock)$"><hr><p></p><h3>void SdifInitListNStock (SdifListNStockT *Stock, unsigned int SizeOfOneStock);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void        SdifInitListNStock      (SdifListNStockT *Stock, unsigned int SizeOfOneStock);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifNewStock_(SdifListNStockT_*Stock)$"><hr><p></p><h3>void SdifNewStock (SdifListNStockT *Stock);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void        SdifNewStock            (SdifListNStockT *Stock);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListNT*_SdifGetNewNodeFromTrash_(SdifListNStockT_*Stock)$"><hr><p></p><h3>SdifListNT* SdifGetNewNodeFromTrash (SdifListNStockT *Stock);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListNT* SdifGetNewNodeFromTrash (SdifListNStockT *Stock);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListNT*_SdifGetNewNodeFromStock_(SdifListNStockT_*Stock)$"><hr><p></p><h3>SdifListNT* SdifGetNewNodeFromStock (SdifListNStockT *Stock);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListNT* SdifGetNewNodeFromStock (SdifListNStockT *Stock);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListNT*_SdifGetNewNode_(SdifListNStockT_*Stock)$"><hr><p></p><h3>SdifListNT* SdifGetNewNode (SdifListNStockT *Stock);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListNT* SdifGetNewNode          (SdifListNStockT *Stock);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPutNodeInTrash_(SdifListNStockT_*Stock,_SdifListNT*_OldNode)$"><hr><p></p><h3>void SdifPutNodeInTrash (SdifListNStockT *Stock, SdifListNT* OldNode);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void        SdifPutNodeInTrash      (SdifListNStockT *Stock, SdifListNT* OldNode);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListNT*_SdifKillListNStock_(SdifListNT*_OldStock)$"><hr><p></p><h3>SdifListNT* SdifKillListNStock (SdifListNT* OldStock);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListNT* SdifKillListNStock      (SdifListNT* OldStock);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifListNStockMakeEmpty_(SdifListNStockT_*Stock)$"><hr><p></p><h3>void SdifListNStockMakeEmpty (SdifListNStockT *Stock);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void        SdifListNStockMakeEmpty (SdifListNStockT *Stock);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListNStockT*_SdifListNodeStock_(void)$"><hr><p></p><h3>SdifListNStockT* SdifListNodeStock (void);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListNStockT* SdifListNodeStock  (void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifInitListNodeStock_(unsigned_int_SizeOfOneStock)$"><hr><p></p><h3>void SdifInitListNodeStock (unsigned int SizeOfOneStock);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void    SdifInitListNodeStock       (unsigned int SizeOfOneStock);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifDrainListNodeStock_(void)$"><hr><p></p><h3>void SdifDrainListNodeStock (void);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void    SdifDrainListNodeStock      (void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListNT*_SdifCreateListNode_(SdifListNT_*Next,_void_*Data)$"><hr><p></p><h3>SdifListNT* SdifCreateListNode (SdifListNT *Next, void *Data);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListNT* SdifCreateListNode  (SdifListNT *Next, void *Data);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListNT*_SdifKillListNode_(SdifListNT_*Node,_KillerFT_Killer)$"><hr><p></p><h3>SdifListNT* SdifKillListNode (SdifListNT *Node, KillerFT Killer);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListNT* SdifKillListNode    (SdifListNT *Node, KillerFT Killer);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifListS_SdifListT$"><hr><p></p><h3>typedef struct SdifListS SdifListT;</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifListS SdifListT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_SdifListT_*SdifListP$"><hr><p></p><h3>typedef SdifListT *SdifListP;</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef SdifListT	*SdifListP;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifListS_$"><hr><p></p><h3>struct SdifListS ;</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifListS
{
  /* fifo list */
  SdifListNT *Head;
  SdifListNT *Tail;
  SdifListNT *Curr;  /* pointer before the next */
  void (*Killer)();  /* no verification of arguments */
  unsigned int NbData;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListT*_SdifCreateList_(KillerFT_Killer)$"><hr><p></p><h3>SdifListT* SdifCreateList (KillerFT Killer);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListT*  SdifCreateList      (KillerFT Killer);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListT*_SdifKillListHead_(SdifListT*_List)$"><hr><p></p><h3>SdifListT* SdifKillListHead (SdifListT* List);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListT*  SdifKillListHead    (SdifListT* List);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListT*_SdifMakeEmptyList_(SdifListT*_List)$"><hr><p></p><h3>SdifListT* SdifMakeEmptyList (SdifListT* List);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListT*  SdifMakeEmptyList   (SdifListT* List);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillList_(SdifListT*_List)$"><hr><p></p><h3>void SdifKillList (SdifListT* List);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void        SdifKillList        (SdifListT* List);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void*_SdifListGetHead_(SdifListT*_List)$"><hr><p></p><h3>void* SdifListGetHead (SdifListT* List);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
  DOC:
  Init the function SdifListGetNext. 
  [Return] head of List.   
<p><pre>
void*       SdifListGetHead     (SdifListT* List); 
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void*_SdifListGetTail_(SdifListT*_List)$"><hr><p></p><h3>void* SdifListGetTail (SdifListT* List);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void*       SdifListGetTail     (SdifListT* List);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifListIsNext_(SdifListT*_List)$"><hr><p></p><h3>int SdifListIsNext (SdifListT* List);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int         SdifListIsNext      (SdifListT* List);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifListIsEmpty_(SdifListT*_List)$"><hr><p></p><h3>int SdifListIsEmpty (SdifListT* List);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int         SdifListIsEmpty     (SdifListT* List);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifListInitLoop_(SdifListT*_List)$"><hr><p></p><h3>int SdifListInitLoop (SdifListT* List);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
  DOC:
  Init for function SdifListGetNext.
  [Returns] true if List has elements.   
<p><pre>
int         SdifListInitLoop    (SdifListT* List);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void*_SdifListGetNext_(SdifListT*_List)$"><hr><p></p><h3>void* SdifListGetNext (SdifListT* List);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
  DOC:
  Set Curr to Curr->Next and after return Curr->Data   
<p><pre>
void*       SdifListGetNext     (SdifListT* List);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void*_SdifListGetCurr_(SdifListT*_List)$"><hr><p></p><h3>void* SdifListGetCurr (SdifListT* List);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
  DOC:
  Only return Curr->Data.   
<p><pre>
void*       SdifListGetCurr     (SdifListT* List);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListT*_SdifListPutTail_(SdifListT*_List,_void_*pData)$"><hr><p></p><h3>SdifListT* SdifListPutTail (SdifListT* List, void *pData);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListT*  SdifListPutTail     (SdifListT* List, void *pData);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifListT*_SdifListPutHead_(SdifListT*_List,_void_*pData)$"><hr><p></p><h3>SdifListT* SdifListPutHead (SdifListT* List, void *pData);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifListT*  SdifListPutHead     (SdifListT* List, void *pData);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="unsigned_int_SdifListGetNbData_(SdifListT*_List)$"><hr><p></p><h3>unsigned int SdifListGetNbData (SdifListT* List);</h3></a>
<strong>#include "<a href="SdifList.h">SdifList.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
unsigned int SdifListGetNbData  (SdifListT* List);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifMatrixHeaderS_SdifMatrixHeaderT$"><hr><p></p><h3>typedef struct SdifMatrixHeaderS SdifMatrixHeaderT;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifMatrixHeaderS SdifMatrixHeaderT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifMatrixHeaderS_$"><hr><p></p><h3>struct SdifMatrixHeaderS ;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifMatrixHeaderS
{
  SdifSignature  Signature;
  SdifDataTypeET DataType; /* Low level data type */
  SdifUInt4      NbRow;
  SdifUInt4      NbCol;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_union_DataTypeU_DataTypeUT$"><hr><p></p><h3>typedef union DataTypeU DataTypeUT;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef union DataTypeU DataTypeUT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFloat4_*Float4$"><hr><p></p><h3>SdifFloat4 *Float4;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
  SdifFloat4 *Float4;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFloat8_*Float8$"><hr><p></p><h3>SdifFloat8 *Float8;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
  SdifFloat8 *Float8;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifInt2_*Int2_$"><hr><p></p><h3>SdifInt2 *Int2 ;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
  SdifInt2   *Int2  ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifInt4_*Int4_$"><hr><p></p><h3>SdifInt4 *Int4 ;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
  SdifInt4   *Int4  ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt2_*UInt2_$"><hr><p></p><h3>SdifUInt2 *UInt2 ;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
  SdifUInt2  *UInt2 ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_*UInt4_$"><hr><p></p><h3>SdifUInt4 *UInt4 ;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
  SdifUInt4  *UInt4 ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifChar_*Char_$"><hr><p></p><h3>SdifChar *Char ;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
  SdifChar   *Char  ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_*Void_$"><hr><p></p><h3>void *Void ;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
  void	     *Void  ;	/* generic pointer */
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifOneRowS_SdifOneRowT$"><hr><p></p><h3>typedef struct SdifOneRowS SdifOneRowT;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifOneRowS SdifOneRowT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifOneRowS_$"><hr><p></p><h3>struct SdifOneRowS ;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifOneRowS
{
  SdifDataTypeET DataType;
  SdifUInt4      NbData;
  DataTypeUT     Data;
  SdifUInt4      NbGranuleAlloc;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifMatrixDataS_SdifMatrixDataT$"><hr><p></p><h3>typedef struct SdifMatrixDataS SdifMatrixDataT;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifMatrixDataS SdifMatrixDataT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifMatrixDataS_$"><hr><p></p><h3>struct SdifMatrixDataS ;</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifMatrixDataS
{
  SdifMatrixHeaderT *Header;
  SdifOneRowT       **Rows;
  SdifUInt4         Size;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixHeaderT*_SdifCreateMatrixHeader_(SdifSignature_Signature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol)$"><hr><p></p><h3>SdifMatrixHeaderT* SdifCreateMatrixHeader (SdifSignature Signature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifMatrixHeaderT* SdifCreateMatrixHeader    (SdifSignature Signature, 
					      SdifDataTypeET DataType,
					      SdifUInt4 NbRow, 
					      SdifUInt4 NbCol);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixHeaderT*_SdifCreateMatrixHeaderEmpty_(void)$"><hr><p></p><h3>SdifMatrixHeaderT* SdifCreateMatrixHeaderEmpty (void);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifMatrixHeaderT* SdifCreateMatrixHeaderEmpty (void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillMatrixHeader_(SdifMatrixHeaderT_*MatrixHeader)$"><hr><p></p><h3>void SdifKillMatrixHeader (SdifMatrixHeaderT *MatrixHeader);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void               SdifKillMatrixHeader        (SdifMatrixHeaderT *MatrixHeader);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifOneRowT*_SdifCreateOneRow_(SdifDataTypeET_DataType,_SdifUInt4_NbGranuleAlloc)$"><hr><p></p><h3>SdifOneRowT* SdifCreateOneRow (SdifDataTypeET DataType, SdifUInt4 NbGranuleAlloc);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifOneRowT*       SdifCreateOneRow          (SdifDataTypeET DataType, SdifUInt4  NbGranuleAlloc);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifOneRowT*_SdifReInitOneRow_(SdifOneRowT_*OneRow,_SdifDataTypeET_DataType,_SdifUInt4_NbData)$"><hr><p></p><h3>SdifOneRowT* SdifReInitOneRow (SdifOneRowT *OneRow, SdifDataTypeET DataType, SdifUInt4 NbData);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifOneRowT*       SdifReInitOneRow          (SdifOneRowT *OneRow, SdifDataTypeET DataType, SdifUInt4 NbData);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillOneRow_(SdifOneRowT_*OneRow)$"><hr><p></p><h3>void SdifKillOneRow (SdifOneRowT *OneRow);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void               SdifKillOneRow            (SdifOneRowT *OneRow);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifOneRowT*_SdifOneRowPutValue_(SdifOneRowT_*OneRow,_SdifUInt4_numCol,_SdifFloat8_Value)$"><hr><p></p><h3>SdifOneRowT* SdifOneRowPutValue (SdifOneRowT *OneRow, SdifUInt4 numCol, SdifFloat8 Value);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifOneRowT*       SdifOneRowPutValue        (SdifOneRowT *OneRow, SdifUInt4 numCol, SdifFloat8 Value);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFloat8_SdifOneRowGetValue_(SdifOneRowT_*OneRow,_SdifUInt4_numCol)$"><hr><p></p><h3>SdifFloat8 SdifOneRowGetValue (SdifOneRowT *OneRow, SdifUInt4 numCol);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFloat8         SdifOneRowGetValue        (SdifOneRowT *OneRow, SdifUInt4 numCol);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFloat8_SdifOneRowGetValueColName_(SdifOneRowT_*OneRow,_SdifMatrixTypeT_*MatrixType,_char_*_NameCD)$"><hr><p></p><h3>SdifFloat8 SdifOneRowGetValueColName (SdifOneRowT *OneRow, SdifMatrixTypeT *MatrixType, char * NameCD);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFloat8         SdifOneRowGetValueColName (SdifOneRowT *OneRow, SdifMatrixTypeT *MatrixType, char * NameCD);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixDataT*_SdifCreateMatrixData_(SdifSignature_Signature,_SdifDataTypeET_DataType,_SdifUInt4_NbRow,_SdifUInt4_NbCol)$"><hr><p></p><h3>SdifMatrixDataT* SdifCreateMatrixData (SdifSignature Signature, SdifDataTypeET DataType, SdifUInt4 NbRow, SdifUInt4 NbCol);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifMatrixDataT*   SdifCreateMatrixData      (SdifSignature Signature, SdifDataTypeET DataType,
						     SdifUInt4 NbRow, SdifUInt4 NbCol);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillMatrixData_(SdifMatrixDataT_*MatrixData)$"><hr><p></p><h3>void SdifKillMatrixData (SdifMatrixDataT *MatrixData);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void               SdifKillMatrixData        (SdifMatrixDataT *MatrixData);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixDataT*_SdifMatrixDataPutValue_(SdifMatrixDataT_*MatrixData,_SdifUInt4_numRow,_SdifUInt4_numCol,_SdifFloat8_Value)$"><hr><p></p><h3>SdifMatrixDataT* SdifMatrixDataPutValue (SdifMatrixDataT *MatrixData, SdifUInt4 numRow, SdifUInt4 numCol, SdifFloat8 Value);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifMatrixDataT*   SdifMatrixDataPutValue    (SdifMatrixDataT *MatrixData,
						     SdifUInt4  numRow, SdifUInt4  numCol, SdifFloat8 Value);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFloat8_SdifMatrixDataGetValue_(SdifMatrixDataT_*MatrixData,_SdifUInt4_numRow,_SdifUInt4_numCol)$"><hr><p></p><h3>SdifFloat8 SdifMatrixDataGetValue (SdifMatrixDataT *MatrixData, SdifUInt4 numRow, SdifUInt4 numCol);</h3></a>
<strong>#include "<a href="SdifMatrix.h">SdifMatrix.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFloat8         SdifMatrixDataGetValue    (SdifMatrixDataT *MatrixData,
						     SdifUInt4  numRow, SdifUInt4  numCol);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifColumnDefS_SdifColumnDefT$"><hr><p></p><h3>typedef struct SdifColumnDefS SdifColumnDefT;</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifColumnDefS SdifColumnDefT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifColumnDefS_$"><hr><p></p><h3>struct SdifColumnDefS ;</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifColumnDefS
{
  char *Name;
  SdifUInt4 Num;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifMatrixTypeS_SdifMatrixTypeT$"><hr><p></p><h3>typedef struct SdifMatrixTypeS SdifMatrixTypeT;</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifMatrixTypeS SdifMatrixTypeT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifMatrixTypeS_$"><hr><p></p><h3>struct SdifMatrixTypeS ;</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifMatrixTypeS
{
  SdifSignature     Signature;

  SdifMatrixTypeT*  MatrixTypePre;

  SdifListT*        ColumnUserList; /* List of columns added by user: 
				       SdifMatrixTypeInsertTailColumn(MatrixTypeT *)
				    */

  SdifUInt4       NbColumnDef; /* Number of columns created by user:
				  SdifMatrixTypeInsertTailColumn(MatrixTypeT *)
			       */
  SdifModifModeET ModifMode;
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifColumnDefT*_SdifCreateColumnDef_(char_*Name,_unsigned_int_Num)$"><hr><p></p><h3>SdifColumnDefT* SdifCreateColumnDef (char *Name, unsigned int Num);</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifColumnDefT*  SdifCreateColumnDef (char *Name,  unsigned int Num);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillColumnDef_(void_*ColumnDef)$"><hr><p></p><h3>void SdifKillColumnDef (void *ColumnDef);</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void             SdifKillColumnDef   (void *ColumnDef);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixTypeT*_SdifCreateMatrixType_(SdifSignature_Signature,_SdifMatrixTypeT_*PredefinedMatrixType)$"><hr><p></p><h3>SdifMatrixTypeT* SdifCreateMatrixType (SdifSignature Signature, SdifMatrixTypeT *PredefinedMatrixType);</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
  DOC: 
  premet de crer un objet 'type de matrice'. Le premier argument
  est la signature de ce type. Le second est l'objet 'type de matrice'
  prdfini dans SDIF.<p>
  <p>
  <strong>Important: Tous les types de matrices ou de frames utiliss
  dans une instance de SdifFileT doivent tre ajouts aux tables de
  cette instance, de faon a crer le lien avec les types
  prdfinis.</strong> L'hors de la lecture des enttes avec les
  fonctions SdifFReadMatrixHeader et SdifFReadFrameHeader, cette mise
   jour se fait automatiquement  l'aide des fonctions
  SdifTestMatrixType et SdifTestFrameType.   
<p><pre>
SdifMatrixTypeT* SdifCreateMatrixType              (SdifSignature Signature,
                    							   SdifMatrixTypeT *PredefinedMatrixType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillMatrixType_(SdifMatrixTypeT_*MatrixType)$"><hr><p></p><h3>void SdifKillMatrixType (SdifMatrixTypeT *MatrixType);</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void             SdifKillMatrixType                (SdifMatrixTypeT *MatrixType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixTypeT*_SdifMatrixTypeInsertTailColumnDef_(SdifMatrixTypeT_*MatrixType,_char_*NameCD)$"><hr><p></p><h3>SdifMatrixTypeT* SdifMatrixTypeInsertTailColumnDef (SdifMatrixTypeT *MatrixType, char *NameCD);</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
  DOC: 
  permet d'ajouter une colonne  un type (toujours la dernire
  colonne).    
<p><pre>
SdifMatrixTypeT* SdifMatrixTypeInsertTailColumnDef (SdifMatrixTypeT *MatrixType, char *NameCD);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifMatrixTypeGetNumColumnDef_(SdifMatrixTypeT_*MatrixType,_char_*NameCD)$"><hr><p></p><h3>SdifUInt4 SdifMatrixTypeGetNumColumnDef (SdifMatrixTypeT *MatrixType, char *NameCD);</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
  DOC: 
  renvoie la position de la colonne de nom NameCD.  (0 si elle
  n'existe pas)   
<p><pre>
SdifUInt4        SdifMatrixTypeGetNumColumnDef     (SdifMatrixTypeT *MatrixType, char *NameCD);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifColumnDefT*_SdifMatrixTypeGetColumnDef_(SdifMatrixTypeT_*MatrixType,_char_*NameCD)$"><hr><p></p><h3>SdifColumnDefT* SdifMatrixTypeGetColumnDef (SdifMatrixTypeT *MatrixType, char *NameCD);</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
  DOC: 
  renvoie la dfinition de la colonne (numro, nom) en fonction
  du nom.(NULL si introuvable)   
<p><pre>
SdifColumnDefT*  SdifMatrixTypeGetColumnDef        (SdifMatrixTypeT *MatrixType, char *NameCD);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifColumnDefT*_SdifMatrixTypeGetNthColumnDef_(SdifMatrixTypeT_*MatrixType,_SdifUInt4_NumCD)$"><hr><p></p><h3>SdifColumnDefT* SdifMatrixTypeGetNthColumnDef (SdifMatrixTypeT *MatrixType, SdifUInt4 NumCD);</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
  DOC: 
  renvoie la dfinition de la colonne (numro, nom) en fonction
  du numero.(NULL si introuvable)   
<p><pre>
SdifColumnDefT*  SdifMatrixTypeGetNthColumnDef     (SdifMatrixTypeT *MatrixType, SdifUInt4 NumCD);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixTypeT*_SdifGetMatrixType_(SdifHashTableT_*MatrixTypesTable,_SdifSignature_Signature)$"><hr><p></p><h3>SdifMatrixTypeT* SdifGetMatrixType (SdifHashTableT *MatrixTypesTable, SdifSignature Signature);</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
  DOC: 
  renvoie le type de matrice en fonction de la Signature. Renvoie
  NULL si le type est introuvable. Attention, si Signature est la
  signature d'un type prdfini,
  <a href="#SdifMatrixTypeT*_SdifGetMatrixType_(SdifHashTableT_*MatrixTypesTable,_SdifSignature_Signature)$">SdifGetMatrixType</a>(SdifF->MatrixTypeTable,Signature) renvoie NULL si
  le lien avec entre SdifF et gSdifPredefinedType n'a pas t mis 
  jour.    
<p><pre>
SdifMatrixTypeT* SdifGetMatrixType		   (SdifHashTableT *MatrixTypesTable, 
						    SdifSignature Signature);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPutMatrixType(SdifHashTableT_*MatrixTypesTable,_SdifMatrixTypeT*_MatrixType)$"><hr><p></p><h3>void SdifPutMatrixType(SdifHashTableT *MatrixTypesTable, SdifMatrixTypeT* MatrixType);</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
  DOC: 
  permet d'ajouter un type de matrice dans une table.    
<p><pre>
void             <a href="#void_SdifPutMatrixType(SdifHashTableT_*MatrixTypesTable,_SdifMatrixTypeT*_MatrixType)$">SdifPutMatrixType</a>(SdifHashTableT *MatrixTypesTable, SdifMatrixTypeT* MatrixType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt2_SdifExistUserMatrixType(SdifHashTableT_*MatrixTypesTable)$"><hr><p></p><h3>SdifUInt2 SdifExistUserMatrixType(SdifHashTableT *MatrixTypesTable);</h3></a>
<strong>#include "<a href="SdifMatrixType.h">SdifMatrixType.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifUInt2        <a href="#SdifUInt2_SdifExistUserMatrixType(SdifHashTableT_*MatrixTypesTable)$">SdifExistUserMatrixType</a>(SdifHashTableT *MatrixTypesTable);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifBlockNodeS_SdifBlockNodeT$"><hr><p></p><h3>typedef struct SdifBlockNodeS SdifBlockNodeT;</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifBlockNodeS SdifBlockNodeT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifBlockNodeS_$"><hr><p></p><h3>struct SdifBlockNodeS ;</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifBlockNodeS
{
    SdifBlockNodeT*   Next;
    char	    file[_SdifMrNameSize];
    int		    line;
    char	    type[_SdifMrNameSize];
    void*	    ptr;
    size_t	    size;
    size_t	    nbobj;
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifBlockListS_SdifBlockListT$"><hr><p></p><h3>typedef struct SdifBlockListS SdifBlockListT;</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifBlockListS SdifBlockListT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifBlockListS_$"><hr><p></p><h3>struct SdifBlockListS ;</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifBlockListS
{
    SdifBlockNodeT* Alloc;
    size_t	    BytesAlloc;
    size_t	    BytesTotalAlloc;
    size_t	    BytesDeAlloc;
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char_*SdifMrType$"><hr><p></p><h3>char *SdifMrType;</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
char *SdifMrType;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifBlockNodeT*_SdifCreateBlockNode_(SdifBlockNodeT*_Next,_char_*file,_int_line,_char*_type,_void*_ptr,_size_t_size,_size_t_nobj)$"><hr><p></p><h3>SdifBlockNodeT* SdifCreateBlockNode (SdifBlockNodeT* Next, char *file, int line, char* type, void* ptr, size_t size, size_t nobj);</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifBlockNodeT*	SdifCreateBlockNode	(SdifBlockNodeT* Next, char *file, int line, char* type, void* ptr, size_t size, size_t nobj);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifBlockNodeT*_SdifKillBlockNode_(SdifBlockNodeT*_BlockNode)$"><hr><p></p><h3>SdifBlockNodeT* SdifKillBlockNode (SdifBlockNodeT* BlockNode);</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifBlockNodeT*	SdifKillBlockNode	(SdifBlockNodeT* BlockNode);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintBlockNode_(int_sizealloc,_char*_mess,_SdifBlockNodeT*_BlockNode)$"><hr><p></p><h3>void SdifPrintBlockNode (int sizealloc, char* mess, SdifBlockNodeT* BlockNode);</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void		SdifPrintBlockNode	(int sizealloc, char* mess, SdifBlockNodeT* BlockNode);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void*_SdifMr_alloc_(SdifBlockListT*_L,_size_t_size,_size_t_nobj)$"><hr><p></p><h3>void* SdifMr_alloc (SdifBlockListT* L, size_t size, size_t nobj);</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void*		SdifMr_alloc		(SdifBlockListT* L, size_t size, size_t nobj);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifMr_free_(SdifBlockListT*_L,_void*_ptr)$"><hr><p></p><h3>size_t SdifMr_free (SdifBlockListT* L, void* ptr);</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t		SdifMr_free		(SdifBlockListT* L, void* ptr);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void*_SdifMr_realloc_(SdifBlockListT*_L,_void*_oldptr,_size_t_size,_size_t_nobj)$"><hr><p></p><h3>void* SdifMr_realloc (SdifBlockListT* L, void* oldptr, size_t size, size_t nobj);</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void*		SdifMr_realloc		(SdifBlockListT* L, void* oldptr, size_t size, size_t nobj);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifMrDrainBlockList_(SdifBlockListT*_L)$"><hr><p></p><h3>void SdifMrDrainBlockList (SdifBlockListT* L);</h3></a>
<strong>#include "<a href="SdifMemory.h">SdifMemory.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void		SdifMrDrainBlockList	(SdifBlockListT* L);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifNameValueS_SdifNameValueT$"><hr><p></p><h3>typedef struct SdifNameValueS SdifNameValueT;</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifNameValueS SdifNameValueT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifNameValueS_$"><hr><p></p><h3>struct SdifNameValueS ;</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifNameValueS
{
  char *Name;
  char *Value;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValueT*_SdifCreateNameValue(const_char_*Name,_const_char_*Value)$"><hr><p></p><h3>SdifNameValueT* SdifCreateNameValue(const char *Name, const char *Value);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifNameValueT* <a href="#SdifNameValueT*_SdifCreateNameValue(const_char_*Name,_const_char_*Value)$">SdifCreateNameValue</a>(const char *Name,  const char *Value);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillNameValue(SdifNameValueT_*NameValue)$"><hr><p></p><h3>void SdifKillNameValue(SdifNameValueT *NameValue);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void            <a href="#void_SdifKillNameValue(SdifNameValueT_*NameValue)$">SdifKillNameValue</a>(SdifNameValueT *NameValue);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifNameValueTableS_SdifNameValueTableT$"><hr><p></p><h3>typedef struct SdifNameValueTableS SdifNameValueTableT;</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifNameValueTableS SdifNameValueTableT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifNameValueTableS_$"><hr><p></p><h3>struct SdifNameValueTableS ;</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifNameValueTableS
{
    SdifHashTableT* NVHT;
    SdifUInt4       NumTable;
    SdifUInt4       StreamID;	/* id of stream the table belongs to */
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValueTableT*_SdifCreateNameValueTable(_SdifUInt4_StreamID,_SdifUInt4_HashSize,_SdifUInt4_NumTable)$"><hr><p></p><h3>SdifNameValueTableT* SdifCreateNameValueTable( SdifUInt4 StreamID, SdifUInt4 HashSize, SdifUInt4 NumTable);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifNameValueTableT* <a href="#SdifNameValueTableT*_SdifCreateNameValueTable(_SdifUInt4_StreamID,_SdifUInt4_HashSize,_SdifUInt4_NumTable)$">SdifCreateNameValueTable</a>(  SdifUInt4 StreamID, 
                                                SdifUInt4 HashSize, 
						SdifUInt4 NumTable);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillNameValueTable_(void*_NVTable)$"><hr><p></p><h3>void SdifKillNameValueTable (void* NVTable);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void            SdifKillNameValueTable          (void* NVTable);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValueT*_SdifNameValueTableGetNV_(SdifNameValueTableT*_NVTable,_const_char_*Name)$"><hr><p></p><h3>SdifNameValueT* SdifNameValueTableGetNV (SdifNameValueTableT* NVTable, const char *Name);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifNameValueT* SdifNameValueTableGetNV         (SdifNameValueTableT* NVTable, const char *Name);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValueT*_SdifNameValueTablePutNV_(SdifNameValueTableT*_NVTable,_const_char_*Name,_const_char_*Value)$"><hr><p></p><h3>SdifNameValueT* SdifNameValueTablePutNV (SdifNameValueTableT* NVTable, const char *Name, const char *Value);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifNameValueT* SdifNameValueTablePutNV         (SdifNameValueTableT* NVTable, const char *Name,  const char *Value);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFloat8_SdifNameValueTableGetTime_(SdifNameValueTableT*_NVTable)$"><hr><p></p><h3>SdifFloat8 SdifNameValueTableGetTime (SdifNameValueTableT* NVTable);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFloat8      SdifNameValueTableGetTime       (SdifNameValueTableT* NVTable);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifNameValueTableGetNumTable_(SdifNameValueTableT*_NVTable)$"><hr><p></p><h3>SdifUInt4 SdifNameValueTableGetNumTable (SdifNameValueTableT* NVTable);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifUInt4       SdifNameValueTableGetNumTable   (SdifNameValueTableT* NVTable);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifNameValueTableGetStreamID_(SdifNameValueTableT*_NVTable)$"><hr><p></p><h3>SdifUInt4 SdifNameValueTableGetStreamID (SdifNameValueTableT* NVTable);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifUInt4       SdifNameValueTableGetStreamID  (SdifNameValueTableT* NVTable);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifNameValuesLS_SdifNameValuesLT$"><hr><p></p><h3>typedef struct SdifNameValuesLS SdifNameValuesLT;</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifNameValuesLS SdifNameValuesLT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifNameValuesLS_$"><hr><p></p><h3>struct SdifNameValuesLS ;</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifNameValuesLS
{
    SdifListT*              NVTList;
    SdifNameValueTableT*    CurrNVT;
    SdifUInt4               HashSize;
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValuesLT*_SdifCreateNameValuesL_(SdifUInt4_HashSize)$"><hr><p></p><h3>SdifNameValuesLT* SdifCreateNameValuesL (SdifUInt4 HashSize);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifNameValuesLT*   SdifCreateNameValuesL       (SdifUInt4  HashSize);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillNameValuesL_(SdifNameValuesLT_*NameValuesL)$"><hr><p></p><h3>void SdifKillNameValuesL (SdifNameValuesLT *NameValuesL);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void                SdifKillNameValuesL         (SdifNameValuesLT *NameValuesL);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValuesLT*_SdifNameValuesLNewTable_(SdifNameValuesLT_*NameValuesL,_SdifUInt4_StreamID)$"><hr><p></p><h3>SdifNameValuesLT* SdifNameValuesLNewTable (SdifNameValuesLT *NameValuesL, SdifUInt4 StreamID);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
  DOC: 
  Cette fonction permet d'ajouter une nouvelle NVT dans la liste
  de tables passe par argument:
  <code><a href="#SdifNameValuesLT*_SdifNameValuesLNewHT_(SdifNameValuesLT_*NameValuesL)$">SdifNameValuesLNewHT</a>(SdifF->NamefValues);</code><br>
  Attention,  l'ouverture de SdifF, il n'y a aucune table dans
  SdifF->NamefValues. Il faudra donc au moins en ajouter une pour
  pouvoir y mettre des NameValue.    
<p><pre>
SdifNameValuesLT*   SdifNameValuesLNewTable     (SdifNameValuesLT *NameValuesL, SdifUInt4 StreamID);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValueTableT*SdifNameValuesLSetCurrNVT_(SdifNameValuesLT_*NameValuesL,_SdifUInt4_NumCurrNVT)$"><hr><p></p><h3>SdifNameValueTableT*SdifNameValuesLSetCurrNVT (SdifNameValuesLT *NameValuesL, SdifUInt4 NumCurrNVT);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
  DOC: 
  Cette fonction permet de dfinir la nime NVT de la liste des
  tables comme NVT courante.    
<p><pre>
SdifNameValueTableT*SdifNameValuesLSetCurrNVT   (SdifNameValuesLT *NameValuesL, SdifUInt4 NumCurrNVT);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValueT*_SdifNameValuesLGet_(SdifNameValuesLT_*NameValuesL,_char_*Name)$"><hr><p></p><h3>SdifNameValueT* SdifNameValuesLGet (SdifNameValuesLT *NameValuesL, char *Name);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
  DOC: 
  Cette fonction permet de rcuprer une Name-Value de la liste
  des NVTs en passant le Name en argument.  Dans le cas ou Name est
  rfrenc dans plusieurs NVT, alors c'est la premire NVT le
  contenant qui sera prise en compte.  Le pointeur retourn est de
  type SdifNameValueT qui contient deux champs: Name et Value.    
<p><pre>
SdifNameValueT*     SdifNameValuesLGet          (SdifNameValuesLT *NameValuesL, char *Name);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValueT*_SdifNameValuesLGetCurrNVT_(SdifNameValuesLT_*NameValuesL,_const_char_*Name)$"><hr><p></p><h3>SdifNameValueT* SdifNameValuesLGetCurrNVT (SdifNameValuesLT *NameValuesL, const char *Name);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
  DOC: 
  Cette fonction ralise aussi une requte en fonction de Name
  mais uniquement dans la NVT courante.    
<p><pre>
SdifNameValueT*     SdifNameValuesLGetCurrNVT   (SdifNameValuesLT *NameValuesL, const char *Name);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValueT*_SdifNameValuesLPutCurrNVT_(SdifNameValuesLT_*NameValuesL,_const_char_*Name,_const_char_*Value)$"><hr><p></p><h3>SdifNameValueT* SdifNameValuesLPutCurrNVT (SdifNameValuesLT *NameValuesL, const char *Name, const char *Value);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
  DOC: 
  Cette fonction permet d'ajouter une NameValue  table courante
  qui est la dernire table cre ou celle dfinie en tant que table
  courante. Name et Value doivent tre des chaines caractres ASCII
  sans espacements.    
<p><pre>
SdifNameValueT*     SdifNameValuesLPutCurrNVT   (SdifNameValuesLT *NameValuesL, const char *Name,  const char *Value);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt2_SdifNameValuesLIsNotEmpty_(SdifNameValuesLT_*NameValuesL)$"><hr><p></p><h3>SdifUInt2 SdifNameValuesLIsNotEmpty (SdifNameValuesLT *NameValuesL);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifUInt2           SdifNameValuesLIsNotEmpty   (SdifNameValuesLT *NameValuesL);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValuesLT*_SdifNameValuesLNewHT_(SdifNameValuesLT_*NameValuesL)$"><hr><p></p><h3>SdifNameValuesLT* SdifNameValuesLNewHT (SdifNameValuesLT *NameValuesL);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifNameValuesLT*   SdifNameValuesLNewHT    (SdifNameValuesLT *NameValuesL);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifHashTableT*_SdifNameValuesLSetCurrHT(SdifNameValuesLT_*NameValuesL,_SdifUInt4_NumCurrHT)$"><hr><p></p><h3>SdifHashTableT* SdifNameValuesLSetCurrHT(SdifNameValuesLT *NameValuesL, SdifUInt4 NumCurrHT);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifHashTableT*     <a href="#SdifHashTableT*_SdifNameValuesLSetCurrHT(SdifNameValuesLT_*NameValuesL,_SdifUInt4_NumCurrHT)$">SdifNameValuesLSetCurrHT</a>(SdifNameValuesLT *NameValuesL, SdifUInt4 NumCurrHT);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValueT*_SdifNameValuesLGetCurrHT(SdifNameValuesLT_*NameValuesL,_char_*Name)$"><hr><p></p><h3>SdifNameValueT* SdifNameValuesLGetCurrHT(SdifNameValuesLT *NameValuesL, char *Name);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifNameValueT*     <a href="#SdifNameValueT*_SdifNameValuesLGetCurrHT(SdifNameValuesLT_*NameValuesL,_char_*Name)$">SdifNameValuesLGetCurrHT</a>(SdifNameValuesLT *NameValuesL, char *Name);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifNameValueT*_SdifNameValuesLPutCurrHT(SdifNameValuesLT_*NameValuesL,_const_char_*Name,_const_char_*Value)$"><hr><p></p><h3>SdifNameValueT* SdifNameValuesLPutCurrHT(SdifNameValuesLT *NameValuesL, const char *Name, const char *Value);</h3></a>
<strong>#include "<a href="SdifNameValue.h">SdifNameValue.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifNameValueT*     <a href="#SdifNameValueT*_SdifNameValuesLPutCurrHT(SdifNameValuesLT_*NameValuesL,_const_char_*Name,_const_char_*Value)$">SdifNameValuesLPutCurrHT</a>(SdifNameValuesLT *NameValuesL, const char *Name,  const char *Value);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameTypeT*_CreateF_1FOB(void)$"><hr><p></p><h3>SdifFrameTypeT* CreateF_1FOB(void);</h3></a>
<strong>#include "<a href="SdifPreTypes.h">SdifPreTypes.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameTypeT* <a href="#SdifFrameTypeT*_CreateF_1FOB(void)$">CreateF_1FOB</a>(void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameTypeT*_CreateF_1REB(void)$"><hr><p></p><h3>SdifFrameTypeT* CreateF_1REB(void);</h3></a>
<strong>#include "<a href="SdifPreTypes.h">SdifPreTypes.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameTypeT* <a href="#SdifFrameTypeT*_CreateF_1REB(void)$">CreateF_1REB</a>(void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameTypeT*_CreateF_1NOI(void)$"><hr><p></p><h3>SdifFrameTypeT* CreateF_1NOI(void);</h3></a>
<strong>#include "<a href="SdifPreTypes.h">SdifPreTypes.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameTypeT* <a href="#SdifFrameTypeT*_CreateF_1NOI(void)$">CreateF_1NOI</a>(void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifCreatePredefinedTypes(SdifHashTableT_*MatrixTypesHT,_SdifHashTableT_*FrameTypesHT)$"><hr><p></p><h3>void SdifCreatePredefinedTypes(SdifHashTableT *MatrixTypesHT, SdifHashTableT *FrameTypesHT);</h3></a>
<strong>#include "<a href="SdifPreTypes.h">SdifPreTypes.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void <a href="#void_SdifCreatePredefinedTypes(SdifHashTableT_*MatrixTypesHT,_SdifHashTableT_*FrameTypesHT)$">SdifCreatePredefinedTypes</a>(SdifHashTableT *MatrixTypesHT,
                                      SdifHashTableT *FrameTypesHT);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintMatrixType(FILE_*fw,_SdifMatrixTypeT_*MatrixType)$"><hr><p></p><h3>void SdifPrintMatrixType(FILE *fw, SdifMatrixTypeT *MatrixType);</h3></a>
<strong>#include "<a href="SdifPrint.h">SdifPrint.h</a>"</strong><p>
  ************** Matrix Type **************  
<p><pre>
void <a href="#void_SdifPrintMatrixType(FILE_*fw,_SdifMatrixTypeT_*MatrixType)$">SdifPrintMatrixType</a>(FILE *fw, SdifMatrixTypeT *MatrixType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintAllMatrixType(FILE_*fw,_SdifFileT_*SdifF)$"><hr><p></p><h3>void SdifPrintAllMatrixType(FILE *fw, SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifPrint.h">SdifPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void <a href="#void_SdifPrintAllMatrixType(FILE_*fw,_SdifFileT_*SdifF)$">SdifPrintAllMatrixType</a>(FILE *fw, SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintFrameType(FILE_*fw,_SdifFrameTypeT_*FrameType)$"><hr><p></p><h3>void SdifPrintFrameType(FILE *fw, SdifFrameTypeT *FrameType);</h3></a>
<strong>#include "<a href="SdifPrint.h">SdifPrint.h</a>"</strong><p>
  ************** Frame Type **************  
<p><pre>
void <a href="#void_SdifPrintFrameType(FILE_*fw,_SdifFrameTypeT_*FrameType)$">SdifPrintFrameType</a>(FILE *fw, SdifFrameTypeT *FrameType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintAllFrameType(FILE_*fw,_SdifFileT_*SdifF)$"><hr><p></p><h3>void SdifPrintAllFrameType(FILE *fw, SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifPrint.h">SdifPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void <a href="#void_SdifPrintAllFrameType(FILE_*fw,_SdifFileT_*SdifF)$">SdifPrintAllFrameType</a>(FILE *fw, SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintMatrixHeader(FILE_*f,_SdifMatrixHeaderT_*MatrixHeader)$"><hr><p></p><h3>void SdifPrintMatrixHeader(FILE *f, SdifMatrixHeaderT *MatrixHeader);</h3></a>
<strong>#include "<a href="SdifPrint.h">SdifPrint.h</a>"</strong><p>
  ********* Matrix *********  
<p><pre>
void <a href="#void_SdifPrintMatrixHeader(FILE_*f,_SdifMatrixHeaderT_*MatrixHeader)$">SdifPrintMatrixHeader</a>(FILE *f, SdifMatrixHeaderT *MatrixHeader);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintOneRow(FILE_*f,_SdifOneRowT_*OneRow)$"><hr><p></p><h3>void SdifPrintOneRow(FILE *f, SdifOneRowT *OneRow);</h3></a>
<strong>#include "<a href="SdifPrint.h">SdifPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void <a href="#void_SdifPrintOneRow(FILE_*f,_SdifOneRowT_*OneRow)$">SdifPrintOneRow</a>(FILE *f, SdifOneRowT *OneRow);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintMatrixRows(FILE*_f,_SdifMatrixDataT_*MatrixData)$"><hr><p></p><h3>void SdifPrintMatrixRows(FILE* f, SdifMatrixDataT *MatrixData);</h3></a>
<strong>#include "<a href="SdifPrint.h">SdifPrint.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void <a href="#void_SdifPrintMatrixRows(FILE*_f,_SdifMatrixDataT_*MatrixData)$">SdifPrintMatrixRows</a>(FILE* f, SdifMatrixDataT *MatrixData);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintFrameHeader(FILE_*f,_SdifFrameHeaderT*_FrameHeader)$"><hr><p></p><h3>void SdifPrintFrameHeader(FILE *f, SdifFrameHeaderT* FrameHeader);</h3></a>
<strong>#include "<a href="SdifPrint.h">SdifPrint.h</a>"</strong><p>
  ********* Frame **********  
<p><pre>
void <a href="#void_SdifPrintFrameHeader(FILE_*f,_SdifFrameHeaderT*_FrameHeader)$">SdifPrintFrameHeader</a>(FILE *f, SdifFrameHeaderT* FrameHeader);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintAllType(FILE_*fw,_SdifFileT_*SdifF)$"><hr><p></p><h3>void SdifPrintAllType(FILE *fw, SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifPrint.h">SdifPrint.h</a>"</strong><p>
  *********** High **********  
<p><pre>
void <a href="#void_SdifPrintAllType(FILE_*fw,_SdifFileT_*SdifF)$">SdifPrintAllType</a>(FILE *fw, SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_Sdiffread_(void_*ptr,_size_t_size,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t Sdiffread (void *ptr, size_t size, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t Sdiffread  (void *ptr, size_t size, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_Sdiffwrite_(void_*ptr,_size_t_size,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t Sdiffwrite (void *ptr, size_t size, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t Sdiffwrite (void *ptr, size_t size, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffReadChar_(SdifChar_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffReadChar (SdifChar *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
   Read, return the number of objects   
<p><pre>
size_t SdiffReadChar   (SdifChar   *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffReadInt2_(SdifInt2_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffReadInt2 (SdifInt2 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffReadInt2   (SdifInt2   *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffReadUInt2_(SdifUInt2_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffReadUInt2 (SdifUInt2 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffReadUInt2  (SdifUInt2  *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffReadInt4_(SdifInt4_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffReadInt4 (SdifInt4 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffReadInt4   (SdifInt4   *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffReadUInt4_(SdifUInt4_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffReadUInt4 (SdifUInt4 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffReadUInt4  (SdifUInt4  *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffReadFloat4_(SdifFloat4_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffReadFloat4 (SdifFloat4 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffReadFloat4 (SdifFloat4 *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffReadFloat8_(SdifFloat8_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffReadFloat8 (SdifFloat8 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffReadFloat8 (SdifFloat8 *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffWriteChar_(SdifChar_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffWriteChar (SdifChar *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
   Write, return the number of objects   
<p><pre>
size_t SdiffWriteChar   (SdifChar   *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffWriteInt2_(SdifInt2_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffWriteInt2 (SdifInt2 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffWriteInt2   (SdifInt2   *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffWriteUInt2_(SdifUInt2_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffWriteUInt2 (SdifUInt2 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffWriteUInt2  (SdifUInt2  *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffWriteInt4_(SdifInt4_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffWriteInt4 (SdifInt4 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffWriteInt4   (SdifInt4   *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffWriteUInt4_(SdifUInt4_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffWriteUInt4 (SdifUInt4 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffWriteUInt4  (SdifUInt4  *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffWriteFloat4_(SdifFloat4_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffWriteFloat4 (SdifFloat4 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffWriteFloat4 (SdifFloat4 *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffWriteFloat8_(SdifFloat8_*ptr,_size_t_nobj,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffWriteFloat8 (SdifFloat8 *ptr, size_t nobj, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffWriteFloat8 (SdifFloat8 *ptr, size_t nobj, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffWriteSignature_(SdifSignature_*Signature,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffWriteSignature (SdifSignature *Signature, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffWriteSignature (SdifSignature *Signature, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffWriteString_(char*_ptr,_FILE_*stream)$"><hr><p></p><h3>size_t SdiffWriteString (char* ptr, FILE *stream);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffWriteString (char* ptr, FILE *stream);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffReadSpace_(FILE*_fr)$"><hr><p></p><h3>size_t SdiffReadSpace (FILE* fr);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
   fGet --> return the last char
   <p>
<p><pre>
size_t SdiffReadSpace   (FILE* fr);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffReadSpacefromSdifString(SdifStringT_*SdifString)$"><hr><p></p><h3>size_t SdiffReadSpacefromSdifString(SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t <a href="#size_t_SdiffReadSpacefromSdifString(SdifStringT_*SdifString)$">SdiffReadSpacefromSdifString</a>(SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifIsAReservedChar_(char_c)$"><hr><p></p><h3>int SdifIsAReservedChar (char c);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
  DOC:
  Return c if it is a reserved char, -1 otherwise.
  <p>
<p><pre>
int SdifIsAReservedChar (char c);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char_*SdifStringToNV_(_char_*str)$"><hr><p></p><h3>char *SdifStringToNV ( char *str);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
  DOC: 
  Convert str <strong>in place</strong> so that it doesn't
  contain any reserved chars (these become '.') or spaces (these
  become '_').
<p>
  [] returns str
  <p>
<p><pre>
char *SdifStringToNV (/*in out*/ char *str);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdiffGetString_(FILE*_fr,_char*_s,_size_t_ncMax,_size_t_*NbCharRead)$"><hr><p></p><h3>int SdiffGetString (FILE* fr, char* s, size_t ncMax, size_t *NbCharRead);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
   SdiffGetString lit un fichier jusqu'a un caractere reserve, ne
   rempli s que des caracteres non-espacement, renvoie le caractere
   reserve, saute les premiers caracteres espacement lus.  Il y a
   erreur si fin de fichier ou si un caractere non-espacement et
   non-reseve est lu apres un caractere espacement.  ncMax est
   typiquement strlen(s)+1.  
  <p>
<p><pre>
int SdiffGetString      (FILE* fr, char* s, size_t ncMax, size_t *NbCharRead);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdiffGetSignature_(FILE*_fr,_SdifSignature_*Signature,_size_t_*NbCharRead)$"><hr><p></p><h3>int SdiffGetSignature (FILE* fr, SdifSignature *Signature, size_t *NbCharRead);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
   retourne le caractere d'erreur   
<p><pre>
int SdiffGetSignature   (FILE* fr, SdifSignature *Signature, size_t *NbCharRead);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdiffGetSignaturefromSdifString(SdifStringT_*SdifString,_SdifSignature_*Signature)$"><hr><p></p><h3>int SdiffGetSignaturefromSdifString(SdifStringT *SdifString, SdifSignature *Signature);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
  DOC:
  Function return the signature in a SdifStringT
  <p>
<p><pre>
int <a href="#int_SdiffGetSignaturefromSdifString(SdifStringT_*SdifString,_SdifSignature_*Signature)$">SdiffGetSignaturefromSdifString</a>(SdifStringT *SdifString, SdifSignature *Signature);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdiffGetWordUntil_(FILE*_fr,_char*_s,_size_t_ncMax,_size_t_*NbCharRead,_char_*CharsEnd)$"><hr><p></p><h3>int SdiffGetWordUntil (FILE* fr, char* s, size_t ncMax, size_t *NbCharRead, char *CharsEnd);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdiffGetWordUntil   (FILE* fr, char* s, size_t ncMax, size_t *NbCharRead, char *CharsEnd);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdiffGetWordUntilfromSdifString(SdifStringT_*SdifString,_char*_s,_size_t_ncMax,char_*CharsEnd)$"><hr><p></p><h3>int SdiffGetWordUntilfromSdifString(SdifStringT *SdifString, char* s, size_t ncMax,char *CharsEnd);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
  DOC:
  Function return the word until in a SdifStringT
  <p>
<p><pre>
int <a href="#int_SdiffGetWordUntilfromSdifString(SdifStringT_*SdifString,_char*_s,_size_t_ncMax,char_*CharsEnd)$">SdiffGetWordUntilfromSdifString</a>(SdifStringT *SdifString, char* s, size_t ncMax,char *CharsEnd);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdiffGetStringUntil_(FILE*_fr,_char*_s,_size_t_ncMax,_size_t_*NbCharRead,_char_*CharsEnd)$"><hr><p></p><h3>int SdiffGetStringUntil (FILE* fr, char* s, size_t ncMax, size_t *NbCharRead, char *CharsEnd);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdiffGetStringUntil (FILE* fr, char* s, size_t ncMax, size_t *NbCharRead, char *CharsEnd);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdiffGetStringUntilfromSdifString(SdifStringT_*SdifString,_char_*s,_size_t_ncMax,_char_*CharsEnd)$"><hr><p></p><h3>int SdiffGetStringUntilfromSdifString(SdifStringT *SdifString, char *s, size_t ncMax, char *CharsEnd);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
  DOC:
  Function return the string until in a SdifStringT
   <p>
<p><pre>
int <a href="#int_SdiffGetStringUntilfromSdifString(SdifStringT_*SdifString,_char_*s,_size_t_ncMax,_char_*CharsEnd)$">SdiffGetStringUntilfromSdifString</a>(SdifStringT *SdifString, char *s, size_t ncMax,
				      char *CharsEnd);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdiffGetStringWeakUntil(FILE*_fr,_char*_s,_size_t_ncMax,_size_t_*NbCharRead,_char_*CharsEnd)$"><hr><p></p><h3>int SdiffGetStringWeakUntil(FILE* fr, char* s, size_t ncMax, size_t *NbCharRead, char *CharsEnd);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int <a href="#int_SdiffGetStringWeakUntil(FILE*_fr,_char*_s,_size_t_ncMax,_size_t_*NbCharRead,_char_*CharsEnd)$">SdiffGetStringWeakUntil</a>(FILE* fr, char* s, size_t ncMax, size_t *NbCharRead, char *CharsEnd);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdiffGetStringWeakUntilfromSdifString(SdifStringT_*SdifString,_char*_s,_size_t_ncMax,_char_*CharsEnd)$"><hr><p></p><h3>int SdiffGetStringWeakUntilfromSdifString(SdifStringT *SdifString, char* s, size_t ncMax, char *CharsEnd);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
  DOC:
  Return the weak string until in a SdifStringT
  <p>
<p><pre>
int <a href="#int_SdiffGetStringWeakUntilfromSdifString(SdifStringT_*SdifString,_char*_s,_size_t_ncMax,_char_*CharsEnd)$">SdiffGetStringWeakUntilfromSdifString</a>(SdifStringT *SdifString, char* s,
					  size_t ncMax, char *CharsEnd);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifSkipASCIIUntil_(FILE*_fr,_size_t_*NbCharRead,_char_*CharsEnd)$"><hr><p></p><h3>int SdifSkipASCIIUntil (FILE* fr, size_t *NbCharRead, char *CharsEnd);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifSkipASCIIUntil  (FILE* fr, size_t *NbCharRead, char *CharsEnd);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffScan_TYPE_(FILE_*stream,_Sdif_TYPE_*ptr,_size_t_nobj)$"><hr><p></p><h3>size_t SdiffScan_TYPE (FILE *stream, Sdif_TYPE *ptr, size_t nobj);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
   scan nobj items of TYPE from stream, return number sucessfully read   
<p><pre>
size_t SdiffScan_TYPE   (FILE *stream, Sdif_TYPE  *ptr, size_t nobj);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffScanFloat4_(FILE_*stream,_SdifFloat4_*ptr,_size_t_nobj)$"><hr><p></p><h3>size_t SdiffScanFloat4 (FILE *stream, SdifFloat4 *ptr, size_t nobj);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffScanFloat4  (FILE *stream, SdifFloat4 *ptr, size_t nobj);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdiffScanFloat8_(FILE_*stream,_SdifFloat8_*ptr,_size_t_nobj)$"><hr><p></p><h3>size_t SdiffScanFloat8 (FILE *stream, SdifFloat8 *ptr, size_t nobj);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdiffScanFloat8  (FILE *stream, SdifFloat8 *ptr, size_t nobj);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifStringToSignature_(char_*str)$"><hr><p></p><h3>SdifSignature SdifStringToSignature (char *str);</h3></a>
<strong>#include "<a href="SdifRWLowLevel.h">SdifRWLowLevel.h</a>"</strong><p>
  DOC:
  Convert a string to an SDIF signature (in proper endianness).
  str can point to any string position of any length.  
  <p>
<p><pre>
SdifSignature SdifStringToSignature (char *str);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_enum_SdifSelectTokens$"><hr><p></p><h3>typedef enum SdifSelectTokens;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
   tokens (numerical ids) for sdifspec separators   
<p><pre>
typedef enum { sst_specsep, sst_stream, sst_frame, sst_matrix, sst_column, 
	       sst_row,     sst_time,   sst_list,  sst_range,  sst_delta,
	       sst_num,	/* number of tokens */	   sst_norange = 0
} SdifSelectTokens;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifSelectElementIntT$"><hr><p></p><h3>typedef struct SdifSelectElementIntT;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  Selection element interface (returned by SdifGetNextSelection*):
  One basic data element value, with optional range.  
  The meaning of range is determined by rangetype: 
<p>
  [] 0		no range
  [] sst_range	range is value..range
  [] sst_delta	range is value-range..value+range
  <p>
<p><pre>
typedef struct 
{
    int		       value, range;
    SdifSelectTokens   rangetype; /* 0 for not present, sst_range, sst_delta */
} SdifSelectElementIntT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifSelectElementRealT$"><hr><p></p><h3>typedef struct SdifSelectElementRealT;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct 
{
    double	       value, range;
    SdifSelectTokens   rangetype; /* 0 for not present, sst_range, sst_delta */
} SdifSelectElementRealT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_union_SdifSelectValueS_SdifSelectValueT$"><hr><p></p><h3>typedef union SdifSelectValueS SdifSelectValueT;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC:
  Internal: one value of different possible types in a selection
  element (the element list determines which type is actually used).  
  <p>
<p><pre>
typedef union SdifSelectValueS 
{
    int            integer;
    double         real;
    char	   *string;
    SdifSignature  signature;
} SdifSelectValueT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifSelectElementS_SdifSelectElementT,_*SdifSelectElementP$"><hr><p></p><h3>typedef struct SdifSelectElementS SdifSelectElementT, *SdifSelectElementP;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  Selection element internal data structure:
  One basic data element, with optional <ul>
  <li> range (value is lower, range is upper bound) or 
  <li> delta (value-range is lower, value+range is upper bound)
  </ul>
  <p>
<p><pre>
typedef struct SdifSelectElementS
{
    SdifSelectValueT value;
    SdifSelectValueT range;
    SdifSelectTokens rangetype; /* 0 for not present, sst_range, sst_delta */
} SdifSelectElementT, *SdifSelectElementP;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifSelectionT$"><hr><p></p><h3>typedef struct SdifSelectionT;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  Holds a selection of what data to access in an SDIF file,
  parsed from a simple regular expression.  
  <p>
<p><pre>
typedef struct
{
    char	*filename,	/* allocated / freed by 
				   SdifInitSelection / SdifFreeSelection */
		*basename;	/* points into filename */
    SdifListP	stream, frame, matrix, column, row, time;
} SdifSelectionT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char_*SdifBaseName_(const_char*_inPathFileName)$"><hr><p></p><h3>char *SdifBaseName (const char* inPathFileName);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC:
  Return pointer to start of filename component in path inPathFileName.
   <p>
<p><pre>
char *SdifBaseName (const char* inPathFileName);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifInitSelect_(void)$"><hr><p></p><h3>int SdifInitSelect (void);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
   init module, called by SdifGenInit   
<p><pre>
int SdifInitSelect (void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSelectionT_*SdifCreateSelection_(void)$"><hr><p></p><h3>SdifSelectionT *SdifCreateSelection (void);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  Allocate space for an sdif selection.
  <p>
<p><pre>
SdifSelectionT *SdifCreateSelection (void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifInitSelection_(SdifSelectionT_*sel,_const_char_*filename,_int_namelen)$"><hr><p></p><h3>int SdifInitSelection (SdifSelectionT *sel, const char *filename, int namelen);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifInitSelection (SdifSelectionT *sel, const char *filename, int namelen);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFreeSelection_(SdifSelectionT_*sel)$"><hr><p></p><h3>int SdifFreeSelection (SdifSelectionT *sel);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifFreeSelection (SdifSelectionT *sel);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char_*SdifSelectFindSelection_(const_char_*filename)$"><hr><p></p><h3>char *SdifSelectFindSelection (const char *filename);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  Returns pointer to first char of select spec (starting with ::), 
  or NULL if not found.
  <p>
  [in] filename can be NULL
  <p>
<p><pre>
char *SdifSelectFindSelection (const char *filename);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char_*SdifGetFilenameAndSelection_(_const_char_*filename,_SdifSelectionT_*sel)$"><hr><p></p><h3>char *SdifGetFilenameAndSelection ( const char *filename, SdifSelectionT *sel);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  SdifGetFilenameAndSelection parses
<p>
  [in]  filename (can be NULL) into
  [out] sel      which must point to an SdifSelectionT structure.
  [return] 
		a pointer to a copy of the filename part of filename
  <p>
<p><pre>
char *SdifGetFilenameAndSelection (/*in*/  const char *filename, 
				   /*out*/ SdifSelectionT *sel);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifPrintSelection_(FILE_*out,_SdifSelectionT_*sel,_int_options)$"><hr><p></p><h3>void SdifPrintSelection (FILE *out, SdifSelectionT *sel, int options);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void SdifPrintSelection (FILE *out, SdifSelectionT *sel, int options);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifSelectAdd_TYPE__(SdifListT_*list,__datatype__value)$"><hr><p></p><h3>void SdifSelectAdd_TYPE_ (SdifListT *list, _datatype_ value);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC:
  Create and add one value to selection element list.  There are four 
  functions generated automatically, with the meta type-variables _type_ and 
  _datatype_:
  [] _type_ is one of:  <br> Int, Real,   Signature,     String, for
  [] _datatype_ of:	<br> int, double, SdifSignature, char *, respectively.
  <p>
<p><pre>
void SdifSelectAdd_TYPE_ (SdifListT *list, _datatype_ value);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifSelectAdd_TYPE_Range_(SdifListT_*list,__datatype__value,_SdifSelectTokens_rt,__datatype__range)$"><hr><p></p><h3>void SdifSelectAdd_TYPE_Range (SdifListT *list, _datatype_ value, SdifSelectTokens rt, _datatype_ range);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC:
  Create and add one range to selection element list.  There are four 
  functions generated automatically, with the meta type-variables _type_ and 
  _datatype_:
  [] _type_ is one of:  <br> Int, Real,   Signature,     String, for
  [] _datatype_ of:	<br> int, double, SdifSignature, char *, respectively.
  <p>
<p><pre>
void SdifSelectAdd_TYPE_Range (SdifListT *list, 
			       _datatype_ value, 
			       SdifSelectTokens rt, 
			       _datatype_ range);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifSelectAddIntRange_(SdifListT_*list,_int_value,_SdifSelectTokens_rt,_int_range)_$"><hr><p></p><h3>void SdifSelectAddIntRange (SdifListT *list, int value, SdifSelectTokens rt, int range) ;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void SdifSelectAddIntRange (SdifListT *list, int value, SdifSelectTokens rt, int range) ; 
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifSelectAddReal_(SdifListT_*list,_double_value)_$"><hr><p></p><h3>void SdifSelectAddReal (SdifListT *list, double value) ;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void SdifSelectAddReal (SdifListT *list, double value) ; 
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifSelectAddRealRange_(SdifListT_*list,_double_value,_SdifSelectTokens_rt,_double_range)_$"><hr><p></p><h3>void SdifSelectAddRealRange (SdifListT *list, double value, SdifSelectTokens rt, double range) ;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void SdifSelectAddRealRange (SdifListT *list,                                   double value, SdifSelectTokens rt, double range) ; 
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifSelectAddSignature_(SdifListT_*list,_SdifSignature_value)_$"><hr><p></p><h3>void SdifSelectAddSignature (SdifListT *list, SdifSignature value) ;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void SdifSelectAddSignature (SdifListT *list, SdifSignature value) ; 
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifSelectAddSignatureRange_(SdifListT_*list,_SdifSignature_value,_SdifSelectTokens_rt,_SdifSignature_range)_$"><hr><p></p><h3>void SdifSelectAddSignatureRange (SdifListT *list, SdifSignature value, SdifSelectTokens rt, SdifSignature range) ;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void SdifSelectAddSignatureRange (SdifListT *list, SdifSignature value, SdifSelectTokens rt,   SdifSignature range) ; 
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifSelectAddString_(SdifListT_*list,_char_*_value)_$"><hr><p></p><h3>void SdifSelectAddString (SdifListT *list, char * value) ;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void SdifSelectAddString (SdifListT *list, char * value) ; 
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifSelectAddStringRange_(SdifListT_*list,_char_*_value,_SdifSelectTokens_rt,_char_*_range)_$"><hr><p></p><h3>void SdifSelectAddStringRange (SdifListT *list, char * value, SdifSelectTokens rt, char * range) ;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void SdifSelectAddStringRange (SdifListT *list, char * value, SdifSelectTokens rt,      char * range) ; 
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifSelectGetNextIntRange_(_SdifListP_list,_SdifSelectElementIntT_*range,_int_force_range)$"><hr><p></p><h3>int SdifSelectGetNextIntRange ( SdifListP list, SdifSelectElementIntT *range, int force_range);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC:
  Query parsed ranges (list of ranges) for a selection element (one of
  the SdifListP lists in SdifSelectionT).  Init list traversal with
  SdifListInitLoop, then call SdifSelectGetNext<type>(list) until it
  returns 0.
<p>
  The number of selections in the list is <a href="#unsigned_int_SdifListGetNbData_(SdifListT*_List)$">SdifListGetNbData</a>(list), if
  it is 0, or <a href="#int_SdifListIsEmpty_(SdifListT*_List)$">SdifListIsEmpty</a>(list) is true, then there was no
  selection for that element.
<p>
  If force_range is 1, the out value is converted to a range in any
  case, with value <= range guaranteed.  
  <p>
<p><pre>
int SdifSelectGetNextIntRange  (/*in*/  SdifListP list, 
				/*out*/ SdifSelectElementIntT  *range, 
				/*in*/  int force_range);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifSelectGetNextRealRange_(_SdifListP_list,_SdifSelectElementRealT_*range,_int_force_range)$"><hr><p></p><h3>int SdifSelectGetNextRealRange ( SdifListP list, SdifSelectElementRealT *range, int force_range);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  See SdifSelectGetNextInt.
  <p>
<p><pre>
int SdifSelectGetNextRealRange (/*in*/  SdifListP list, 
				/*out*/ SdifSelectElementRealT *range, 
				/*in*/  int force_range);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifSelectGetNextSignature_(_SdifListP_list)$"><hr><p></p><h3>SdifSignature SdifSelectGetNextSignature ( SdifListP list);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  Query list of parsed selection elements (one of the SdifListP
  lists in SdifSelectionT).  Init list traversal with
  SdifListInitLoop, then call SdifSelectGetNext<type>(list) until it
  returns 0.
<p>
  See also SdifSelectGetNextInt.  
  <p>
<p><pre>
SdifSignature  SdifSelectGetNextSignature (/*in*/  SdifListP list);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char_*SdifSelectGetNextString_(_SdifListP_list)$"><hr><p></p><h3>char *SdifSelectGetNextString ( SdifListP list);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  See SdifSelectGetNextSignature.
  <p>
<p><pre>
char	      *SdifSelectGetNextString    (/*in*/  SdifListP list);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifSelectGetFirstInt_(SdifListP_l,_int_defval)$"><hr><p></p><h3>int SdifSelectGetFirstInt (SdifListP l, int defval);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  Return value of first selection (ignoring range).
  <p>
<p><pre>
int	       SdifSelectGetFirstInt       (SdifListP l, int defval);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="double_SdifSelectGetFirstReal_(SdifListP_l,_double_defval)$"><hr><p></p><h3>double SdifSelectGetFirstReal (SdifListP l, double defval);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
double	       SdifSelectGetFirstReal      (SdifListP l, double defval);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char_*SdifSelectGetFirstString_(SdifListP_l,_char_*defval)$"><hr><p></p><h3>char *SdifSelectGetFirstString (SdifListP l, char *defval);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
char	      *SdifSelectGetFirstString    (SdifListP l, char *defval);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifSelectGetFirstSignature_(SdifListP_l,_SdifSignature_defval)$"><hr><p></p><h3>SdifSignature SdifSelectGetFirstSignature (SdifListP l, SdifSignature defval);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifSignature  SdifSelectGetFirstSignature (SdifListP l, SdifSignature defval);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifSelectTestIntRange_(SdifSelectElementT_*elem,_int_cand)$"><hr><p></p><h3>int SdifSelectTestIntRange (SdifSelectElementT *elem, int cand);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  <p>
   FUNCTION GROUP:	Selection Testing Functions
  <p>
<p><pre>
int SdifSelectTestIntRange  (SdifSelectElementT *elem, int cand);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifSelectTestRealRange_(SdifSelectElementT_*elem,_double_cand)$"><hr><p></p><h3>int SdifSelectTestRealRange (SdifSelectElementT *elem, double cand);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifSelectTestRealRange (SdifSelectElementT *elem, double cand);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifSelectTestInt_(SdifListT_*list,_int_cand)$"><hr><p></p><h3>int SdifSelectTestInt (SdifListT *list, int cand);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifSelectTestInt (SdifListT *list, int cand);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifSelectTestReal_(SdifListT_*list,_double_cand)$"><hr><p></p><h3>int SdifSelectTestReal (SdifListT *list, double cand);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifSelectTestReal (SdifListT *list, double cand);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifSelectTestSignature_(SdifListT_*list,_const_SdifSignature_cand)$"><hr><p></p><h3>int SdifSelectTestSignature (SdifListT *list, const SdifSignature cand);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifSelectTestSignature (SdifListT *list, const SdifSignature cand);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifSelectTestString_(SdifListT_*list,_const_char_*cand)$"><hr><p></p><h3>int SdifSelectTestString (SdifListT *list, const char *cand);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifSelectTestString (SdifListT *list, const char *cand);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifFileS_SdifFileT$"><hr><p></p><h3>typedef struct SdifFileS SdifFileT;</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifFileS SdifFileT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFrameIsSelected_(SdifFrameHeaderT_*FramH,_SdifSelectionT_*sel)$"><hr><p></p><h3>int SdifFrameIsSelected (SdifFrameHeaderT *FramH, SdifSelectionT *sel);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  Test the selection elements from sel applicable to frame FramH:
  time, stream, frame type.   
<p><pre>
int SdifFrameIsSelected (SdifFrameHeaderT *FramH, SdifSelectionT *sel);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifMatrixIsSelected_(SdifMatrixHeaderT_*MtrxH,_SdifSelectionT_*sel)$"><hr><p></p><h3>int SdifMatrixIsSelected (SdifMatrixHeaderT *MtrxH, SdifSelectionT *sel);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC:
  Test the selection elements from sel applicable to matrix MtrxH: 
  the matrix signature.   
<p><pre>
int SdifMatrixIsSelected (SdifMatrixHeaderT *MtrxH, SdifSelectionT *sel);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFCurrFrameIsSelected_(SdifFileT_*file)$"><hr><p></p><h3>int SdifFCurrFrameIsSelected (SdifFileT *file);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC: 
  Test if the current frame header is in the file selection
  (automatically parsed from the filename).  
  Can be called after <a href="#size_t_SdifFReadFrameHeader_(SdifFileT_*SdifF)$">SdifFReadFrameHeader</a>().   
<p><pre>
int SdifFCurrFrameIsSelected (SdifFileT *file);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFCurrMatrixIsSelected_(SdifFileT_*file)$"><hr><p></p><h3>int SdifFCurrMatrixIsSelected (SdifFileT *file);</h3></a>
<strong>#include "<a href="SdifSelect.h">SdifSelect.h</a>"</strong><p>
  DOC:
  Test if the current matrix header is in the file selection
  (automatically parsed from the filename).  
  Can be called after <a href="#size_t_SdifFReadMatrixHeader_(SdifFileT_*SdifF)$">SdifFReadMatrixHeader</a>().   
<p><pre>
int SdifFCurrMatrixIsSelected (SdifFileT *file);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifSignatureTabS_SdifSignatureTabT$"><hr><p></p><h3>typedef struct SdifSignatureTabS SdifSignatureTabT;</h3></a>
<strong>#include "<a href="SdifSignatureTab.h">SdifSignatureTab.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifSignatureTabS SdifSignatureTabT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifSignatureTabS_$"><hr><p></p><h3>struct SdifSignatureTabS ;</h3></a>
<strong>#include "<a href="SdifSignatureTab.h">SdifSignatureTab.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifSignatureTabS
{
  SdifUInt4 NbSignMax;
  SdifUInt4 NbSign;
  SdifSignature* Tab;
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignatureTabT*_SdifCreateSignatureTab_(const_SdifUInt4_NbSignMax)$"><hr><p></p><h3>SdifSignatureTabT* SdifCreateSignatureTab (const SdifUInt4 NbSignMax);</h3></a>
<strong>#include "<a href="SdifSignatureTab.h">SdifSignatureTab.h</a>"</strong><p>
  DOC:
  Create table for initially NbSignMax signatures.   
<p><pre>
SdifSignatureTabT* SdifCreateSignatureTab (const SdifUInt4 NbSignMax);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillSignatureTab_(SdifSignatureTabT_*SignTab)$"><hr><p></p><h3>void SdifKillSignatureTab (SdifSignatureTabT *SignTab);</h3></a>
<strong>#include "<a href="SdifSignatureTab.h">SdifSignatureTab.h</a>"</strong><p>
  DOC:
  Free signature table.   
<p><pre>
void		   SdifKillSignatureTab   (SdifSignatureTabT *SignTab);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignatureTabT*_SdifReAllocSignatureTab(SdifSignatureTabT_*SignTab,_const_SdifUInt4_NewNbSignMax)$"><hr><p></p><h3>SdifSignatureTabT* SdifReAllocSignatureTab(SdifSignatureTabT *SignTab, const SdifUInt4 NewNbSignMax);</h3></a>
<strong>#include "<a href="SdifSignatureTab.h">SdifSignatureTab.h</a>"</strong><p>
  DOC:
  Reallocate table to hold NewNbSignMax signatures.   
<p><pre>
SdifSignatureTabT* <a href="#SdifSignatureTabT*_SdifReAllocSignatureTab(SdifSignatureTabT_*SignTab,_const_SdifUInt4_NewNbSignMax)$">SdifReAllocSignatureTab</a>(SdifSignatureTabT *SignTab, 
					   const SdifUInt4 NewNbSignMax);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignatureTabT*_SdifReInitSignatureTab_(SdifSignatureTabT_*SignTab,_const_SdifUInt4_NewNbSignMax)$"><hr><p></p><h3>SdifSignatureTabT* SdifReInitSignatureTab (SdifSignatureTabT *SignTab, const SdifUInt4 NewNbSignMax);</h3></a>
<strong>#include "<a href="SdifSignatureTab.h">SdifSignatureTab.h</a>"</strong><p>
  DOC:
  Reallocate table to hold NewNbSignMax signatures and clear signatures.   
<p><pre>
SdifSignatureTabT* SdifReInitSignatureTab (SdifSignatureTabT *SignTab, 
					   const SdifUInt4 NewNbSignMax);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignatureTabT*_SdifPutInSignatureTab_(SdifSignatureTabT_*SignTab,_const_SdifSignature_Sign)$"><hr><p></p><h3>SdifSignatureTabT* SdifPutInSignatureTab (SdifSignatureTabT *SignTab, const SdifSignature Sign);</h3></a>
<strong>#include "<a href="SdifSignatureTab.h">SdifSignatureTab.h</a>"</strong><p>
  DOC:
  Add signature Sign, no overflow check.   
<p><pre>
SdifSignatureTabT* SdifPutInSignatureTab  (SdifSignatureTabT *SignTab, 
					   const SdifSignature Sign);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignatureTabT*_SdifAddToSignatureTab_(SdifSignatureTabT_*SignTab,_const_SdifSignature_Sign)$"><hr><p></p><h3>SdifSignatureTabT* SdifAddToSignatureTab (SdifSignatureTabT *SignTab, const SdifSignature Sign);</h3></a>
<strong>#include "<a href="SdifSignatureTab.h">SdifSignatureTab.h</a>"</strong><p>
  DOC:
  Add signature Sign, reallocate table if necessary.   
<p><pre>
SdifSignatureTabT* SdifAddToSignatureTab  (SdifSignatureTabT *SignTab, 
					   const SdifSignature Sign);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifGetFromSignatureTab(const_SdifSignatureTabT*_SignTab,_const_int_index)$"><hr><p></p><h3>SdifSignature SdifGetFromSignatureTab(const SdifSignatureTabT* SignTab, const int index);</h3></a>
<strong>#include "<a href="SdifSignatureTab.h">SdifSignatureTab.h</a>"</strong><p>
  DOC:
  Get signature at position index.  
  Returns eEmptySignature if index out of bounds.   
<p><pre>
SdifSignature      <a href="#SdifSignature_SdifGetFromSignatureTab(const_SdifSignatureTabT*_SignTab,_const_int_index)$">SdifGetFromSignatureTab</a>(const SdifSignatureTabT* SignTab, 
					   const int index);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifSignature_SdifIsInSignatureTab_(const_SdifSignatureTabT_*SignTab,_const_SdifSignature_Sign)$"><hr><p></p><h3>SdifSignature SdifIsInSignatureTab (const SdifSignatureTabT *SignTab, const SdifSignature Sign);</h3></a>
<strong>#include "<a href="SdifSignatureTab.h">SdifSignatureTab.h</a>"</strong><p>
  DOC:
  Test if signature Sign is in table SignTab. 
  [] Returns Sign if yes, 0 (== eEmptySignature) if no.   
<p><pre>
SdifSignature      SdifIsInSignatureTab   (const SdifSignatureTabT *SignTab, 
					   const SdifSignature Sign);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFindInSignatureTab_(const_SdifSignatureTabT*_SignTab,_const_SdifSignature_Sign)$"><hr><p></p><h3>int SdifFindInSignatureTab (const SdifSignatureTabT* SignTab, const SdifSignature Sign);</h3></a>
<strong>#include "<a href="SdifSignatureTab.h">SdifSignatureTab.h</a>"</strong><p>
  DOC:
  Test if signature Sign is in table SignTab. 
  [] Returns index of Sign if yes, -1 if no.   
<p><pre>
int		   SdifFindInSignatureTab (const SdifSignatureTabT* SignTab, 
					   const SdifSignature Sign);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifStreamIDS_SdifStreamIDT$"><hr><p></p><h3>typedef struct SdifStreamIDS SdifStreamIDT;</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
  DOC:
  Stream ID Table Entry   
<p><pre>
typedef struct SdifStreamIDS SdifStreamIDT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifStreamIDS_$"><hr><p></p><h3>struct SdifStreamIDS ;</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifStreamIDS
{
  SdifUInt4     NumID;
  char *Source;
  char *TreeWay; /* for the moment or to be general*/
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifStreamIDTableS_SdifStreamIDTableT$"><hr><p></p><h3>typedef struct SdifStreamIDTableS SdifStreamIDTableT;</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
  DOC:
  Stream ID Table, holds SdifStreamIDT stream ID table entries   
<p><pre>
typedef struct SdifStreamIDTableS SdifStreamIDTableT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifStreamIDTableS_$"><hr><p></p><h3>struct SdifStreamIDTableS ;</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifStreamIDTableS
{
    SdifHashTableT* SIDHT;
    SdifUInt4       StreamID;
    SdifFloat8      Time;	/* always _SdifNoTime */
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifStreamIDT*_SdifCreateStreamID(SdifUInt4_NumID,_char_*Source,_char_*TreeWay)$"><hr><p></p><h3>SdifStreamIDT* SdifCreateStreamID(SdifUInt4 NumID, char *Source, char *TreeWay);</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
  DOC: 
  Permet de crer un pointeur sur un objet de type StreamIDT.  
<p>
<p>Exemple dans le cas d'un TreeWay pour chant (non fichier):
<p>
<pre>
void ConsOneStreamID(SdifFileT *SdifF,
		     int        NumID,
		     char      *PatchType,
		     int        NumPatch,
		     char      *ObjType,
		     int        NumObj,
		     int        NbSubObj,
		     float      StartTime,
		     float      EndTime)
<p>
  SdifStreamIDT* StreamID;
  char TreeWay[512];
<p>
  sprintf(TreeWay, "%s/%d/%s/%d/%d/%s/%f", PatchType, NumPatch, ObjType,
		    NumObj, NbSubObj, StartTime, EndTime);
  StreamID = <a href="#SdifStreamIDT*_SdifCreateStreamID(SdifUInt4_NumID,_char_*Source,_char_*TreeWay)$">SdifCreateStreamID</a>(NumID, "Chant", TreeWay);
<p>
  <a href="#SdifHashTableT*_SdifHashTablePut_(SdifHashTableT*_HTable,_const_void_*ptr,_unsigned_int_nobj,_void*_Data)$">SdifHashTablePut</a>(SdifF->StreamIDsTable, &(StreamID->NumID), 1, StreamID);
<p>
</pre>
<p>
Pour recuperer un StreamID il faut utiliser la fonction SdifHashTableGet
<pre>
  SdifStreamIDT *StreamID = (SdifStreamIDT*) SdifHashTableGet (SdifF->StreamIDsTable, &NumID, 0);
</pre>
Le troisime argument n'est pas utilis, car la table est indexe directement
par des entiers (cration de la table avec l'option eInt4). 
  <p>
<p><pre>
SdifStreamIDT* <a href="#SdifStreamIDT*_SdifCreateStreamID(SdifUInt4_NumID,_char_*Source,_char_*TreeWay)$">SdifCreateStreamID</a>(SdifUInt4 NumID, char *Source, char *TreeWay);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillStreamID(SdifStreamIDT_*StreamID)$"><hr><p></p><h3>void SdifKillStreamID(SdifStreamIDT *StreamID);</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void           <a href="#void_SdifKillStreamID(SdifStreamIDT_*StreamID)$">SdifKillStreamID</a>(SdifStreamIDT *StreamID);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifStreamIDTableT*_SdifCreateStreamIDTable_(SdifUInt4_HashSize)$"><hr><p></p><h3>SdifStreamIDTableT* SdifCreateStreamIDTable (SdifUInt4 HashSize);</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
  DOC:
  Create a stream ID table.  <strong>The stream ID table of the SDIF
  file structure is created automatically by <a href="#SdifFileT*_SdifFOpen_(const_char_*Name,_SdifFileModeET_Mode)$">SdifFOpen</a>().</strong> 
  It can be obtained by <a href="#SdifStreamIDTableT_*SdifFStreamIDTable_(SdifFileT_*file)$">SdifFStreamIDTable</a>().   
<p><pre>
SdifStreamIDTableT* SdifCreateStreamIDTable     (SdifUInt4 HashSize);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillStreamIDTable_(SdifStreamIDTableT_*SIDTable)$"><hr><p></p><h3>void SdifKillStreamIDTable (SdifStreamIDTableT *SIDTable);</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
  DOC:
  Deallocate a stream ID table.  <strong>The stream ID table of the SDIF
  file structure is killed automatically by SdifFClose.</strong>  
  It can be obtained by SdifFStreamIDTable.   
<p><pre>
void                SdifKillStreamIDTable       (SdifStreamIDTableT *SIDTable);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifStreamIDT*_SdifStreamIDTablePutSID_(SdifStreamIDTableT_*SIDTable,_SdifUInt4_NumID,_char_*Source,_char_*TreeWay)$"><hr><p></p><h3>SdifStreamIDT* SdifStreamIDTablePutSID (SdifStreamIDTableT *SIDTable, SdifUInt4 NumID, char *Source, char *TreeWay);</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
  DOC:
  Add an entry to a stream ID table.  The table will be written by
  SdifFWriteAllASCIIChunks.
  [in]  SIDTable pointer to stream ID table, e.g. obtained by SdifFStreamIDTable
  [in]	NumID	stream ID of the frames the stream ID table describes
  [in]	Source	Source identifier for the table (ex. "Chant")
  [in]	TreeWay	Routing and parameters, separated by slashes
  [return]
		The stream ID table entry just created and added   
<p><pre>
SdifStreamIDT*      SdifStreamIDTablePutSID     (SdifStreamIDTableT *SIDTable,
						 SdifUInt4	     NumID, 
						 char 		    *Source, 
						 char 		    *TreeWay);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifStreamIDT*_SdifStreamIDTableGetSID_(SdifStreamIDTableT_*SIDTable,_SdifUInt4_NumID)$"><hr><p></p><h3>SdifStreamIDT* SdifStreamIDTableGetSID (SdifStreamIDTableT *SIDTable, SdifUInt4 NumID);</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
  DOC:
  Retrieve an entry to a stream ID table.  The table has to have been
  read by SdifFReadAllASCIIChunks.
<p>
  [in]  SIDTable pointer to stream ID table, e.g. obtained by 
		 SdifFStreamIDTable
  [in]	NumID	 stream ID of the frames the stream ID table describes
  [return]
		 pointer to stream ID table entry, or NULL if no entry for 
		 stream ID NumID exists.   
<p><pre>
SdifStreamIDT*      SdifStreamIDTableGetSID     (SdifStreamIDTableT *SIDTable, 
						 SdifUInt4	     NumID);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifStreamIDTableGetNbData_(SdifStreamIDTableT_*SIDTable)$"><hr><p></p><h3>SdifUInt4 SdifStreamIDTableGetNbData (SdifStreamIDTableT *SIDTable);</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
  DOC:
  Return number of entries in stream ID table SIDTable   
<p><pre>
SdifUInt4           SdifStreamIDTableGetNbData  (SdifStreamIDTableT *SIDTable);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifUInt4_SdifStreamIDEntryGetSID_(SdifStreamIDT_*SID)$"><hr><p></p><h3>SdifUInt4 SdifStreamIDEntryGetSID (SdifStreamIDT *SID);</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
  DOC:
  Return stream ID field in stream ID table entry SID   
<p><pre>
SdifUInt4	    SdifStreamIDEntryGetSID	(SdifStreamIDT *SID);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char_*SdifStreamIDEntryGetSource_(SdifStreamIDT_*SID)$"><hr><p></p><h3>char *SdifStreamIDEntryGetSource (SdifStreamIDT *SID);</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
  DOC:
  Return source field in stream ID table entry SID   
<p><pre>
char		   *SdifStreamIDEntryGetSource	(SdifStreamIDT *SID);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="char_*SdifStreamIDEntryGetTreeWay_(SdifStreamIDT_*SID)$"><hr><p></p><h3>char *SdifStreamIDEntryGetTreeWay (SdifStreamIDT *SID);</h3></a>
<strong>#include "<a href="SdifStreamID.h">SdifStreamID.h</a>"</strong><p>
  DOC:
  Return "treeway" field in stream ID table entry SID   
<p><pre>
char		   *SdifStreamIDEntryGetTreeWay	(SdifStreamIDT *SID);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifStringS_SdifStringT$"><hr><p></p><h3>typedef struct SdifStringS SdifStringT;</h3></a>
<strong>#include "<a href="SdifString.h">SdifString.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifStringS SdifStringT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifStringS_$"><hr><p></p><h3>struct SdifStringS ;</h3></a>
<strong>#include "<a href="SdifString.h">SdifString.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifStringS
{
  char   *str; 
  size_t TotalSize; /* Memory size allocated for str */
  size_t SizeW; /* Memory size actually used */
  int    NbCharRead; /* Number of char read */
};
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifStringT_*_SdifStringNew(void)$"><hr><p></p><h3>SdifStringT * SdifStringNew(void);</h3></a>
<strong>#include "<a href="SdifString.h">SdifString.h</a>"</strong><p>
  DOC:
  Make a memory allocation for a SdifStringT structure.
  The size for the string is defined in SdifString.h; define _SdifStringGranule 128.
  <p>
<p><pre>
SdifStringT * <a href="#SdifStringT_*_SdifStringNew(void)$">SdifStringNew</a>(void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifStringFree(SdifStringT_*_SdifString)$"><hr><p></p><h3>void SdifStringFree(SdifStringT * SdifString);</h3></a>
<strong>#include "<a href="SdifString.h">SdifString.h</a>"</strong><p>
  DOC:
  Free memory allocated for SdifString.
  <p>
<p><pre>
void <a href="#void_SdifStringFree(SdifStringT_*_SdifString)$">SdifStringFree</a>(SdifStringT * SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifStringAppend(SdifStringT_*_SdifString_,char_*strToAppend)$"><hr><p></p><h3>int SdifStringAppend(SdifStringT * SdifString ,char *strToAppend);</h3></a>
<strong>#include "<a href="SdifString.h">SdifString.h</a>"</strong><p>
  DOC:
  Append a string to another one.
  Manage memory reallocation.
  Return a boolean for the succes of the function's call.
  <p>
<p><pre>
int <a href="#int_SdifStringAppend(SdifStringT_*_SdifString_,char_*strToAppend)$">SdifStringAppend</a>(SdifStringT * SdifString ,char *strToAppend);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifStringGetC(SdifStringT_*_SdifString)$"><hr><p></p><h3>int SdifStringGetC(SdifStringT * SdifString);</h3></a>
<strong>#include "<a href="SdifString.h">SdifString.h</a>"</strong><p>
  DOC:
  Read the current char (= fgetc).
  <p>
<p><pre>
int <a href="#int_SdifStringGetC(SdifStringT_*_SdifString)$">SdifStringGetC</a>(SdifStringT * SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifStringUngetC(SdifStringT_*_SdifString)$"><hr><p></p><h3>int SdifStringUngetC(SdifStringT * SdifString);</h3></a>
<strong>#include "<a href="SdifString.h">SdifString.h</a>"</strong><p>
  DOC:
  Equivalent of ungetc
  <p>
<p><pre>
int <a href="#int_SdifStringUngetC(SdifStringT_*_SdifString)$">SdifStringUngetC</a>(SdifStringT * SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifStringIsEOS(SdifStringT_*SdifString)$"><hr><p></p><h3>int SdifStringIsEOS(SdifStringT *SdifString);</h3></a>
<strong>#include "<a href="SdifString.h">SdifString.h</a>"</strong><p>
  DOC:
  Test the end of the string (= feof)
  <p>
<p><pre>
int <a href="#int_SdifStringIsEOS(SdifStringT_*SdifString)$">SdifStringIsEOS</a>(SdifStringT *SdifString);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifMatrixTypeT*_SdifTestMatrixType_(SdifFileT_*SdifF,_SdifSignature_Signature)$"><hr><p></p><h3>SdifMatrixTypeT* SdifTestMatrixType (SdifFileT *SdifF, SdifSignature Signature);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
  DOC: 
  Cette fonction vrifie si le type de matrice est rpertori
  dans SdifF.<br> S'il ne l'est pas, alors elle vrifie si c'est un
  type prdfinis. S'il est prdfini, elle cre le lien de SdifF vers
  le type prdfini. Sinon, elle envoie un message sur l'erreur
  standart.    
<p><pre>
SdifMatrixTypeT* SdifTestMatrixType (SdifFileT *SdifF, SdifSignature Signature);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifFrameTypeT*_SdifTestFrameType_(SdifFileT_*SdifF,_SdifSignature_Signature)$"><hr><p></p><h3>SdifFrameTypeT* SdifTestFrameType (SdifFileT *SdifF, SdifSignature Signature);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifFrameTypeT*  SdifTestFrameType  (SdifFileT *SdifF, SdifSignature Signature);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFTestMatrixWithFrameHeader_(SdifFileT*_SdifF)$"><hr><p></p><h3>int SdifFTestMatrixWithFrameHeader (SdifFileT* SdifF);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifFTestMatrixWithFrameHeader (SdifFileT* SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFTestDataType_(SdifFileT*_SdifF)$"><hr><p></p><h3>int SdifFTestDataType (SdifFileT* SdifF);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifFTestDataType              (SdifFileT* SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFTestNbColumns_(SdifFileT*_SdifF)$"><hr><p></p><h3>int SdifFTestNbColumns (SdifFileT* SdifF);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifFTestNbColumns             (SdifFileT* SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFTestNotEmptyMatrix_(SdifFileT*_SdifF)$"><hr><p></p><h3>int SdifFTestNotEmptyMatrix (SdifFileT* SdifF);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifFTestNotEmptyMatrix        (SdifFileT* SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifFTestMatrixHeader_(SdifFileT*_SdifF)$"><hr><p></p><h3>int SdifFTestMatrixHeader (SdifFileT* SdifF);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifFTestMatrixHeader          (SdifFileT* SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifColumnDefT*_SdifTestColumnDef_(SdifFileT_*SdifF,_SdifMatrixTypeT_*MtrxT,_char_*NameCD)$"><hr><p></p><h3>SdifColumnDefT* SdifTestColumnDef (SdifFileT *SdifF, SdifMatrixTypeT *MtrxT, char *NameCD);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifColumnDefT*  SdifTestColumnDef (SdifFileT *SdifF, SdifMatrixTypeT *MtrxT, char *NameCD);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifComponentT*_SdifTestComponent_(SdifFileT*_SdifF,_SdifFrameTypeT_*FramT,_char_*NameCD)$"><hr><p></p><h3>SdifComponentT* SdifTestComponent (SdifFileT* SdifF, SdifFrameTypeT *FramT, char *NameCD);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifComponentT*  SdifTestComponent (SdifFileT* SdifF, SdifFrameTypeT *FramT, char *NameCD);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifTestSignature_(SdifFileT_*SdifF,_int_CharEnd,_SdifSignature_Signature,_char_*Mess)$"><hr><p></p><h3>int SdifTestSignature (SdifFileT *SdifF, int CharEnd, SdifSignature Signature, char *Mess);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifTestSignature            (SdifFileT *SdifF, int CharEnd, SdifSignature Signature, char *Mess);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifTestCharEnd_(SdifFileT_*SdifF,_int_CharEnd,_char_MustBe,_char_*StringRead,_int_ErrCondition,_char_*Mess)$"><hr><p></p><h3>int SdifTestCharEnd (SdifFileT *SdifF, int CharEnd, char MustBe, char *StringRead, int ErrCondition, char *Mess);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifTestCharEnd              (SdifFileT *SdifF, int CharEnd, char MustBe,
					   char *StringRead, int ErrCondition, char *Mess);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifTestMatrixTypeModifMode_(SdifFileT_*SdifF,_SdifMatrixTypeT_*MatrixType)$"><hr><p></p><h3>int SdifTestMatrixTypeModifMode (SdifFileT *SdifF, SdifMatrixTypeT *MatrixType);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifTestMatrixTypeModifMode  (SdifFileT *SdifF, SdifMatrixTypeT *MatrixType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="int_SdifTestFrameTypeModifMode_(SdifFileT_*SdifF,_SdifFrameTypeT_*FrameType)$"><hr><p></p><h3>int SdifTestFrameTypeModifMode (SdifFileT *SdifF, SdifFrameTypeT *FrameType);</h3></a>
<strong>#include "<a href="SdifTest.h">SdifTest.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
int SdifTestFrameTypeModifMode   (SdifFileT *SdifF, SdifFrameTypeT *FrameType);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFTextConvMatrixData_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFTextConvMatrixData (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifTextConv.h">SdifTextConv.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFTextConvMatrixData     (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFTextConvMatrix_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFTextConvMatrix (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifTextConv.h">SdifTextConv.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFTextConvMatrix         (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFTextConvFrameData_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFTextConvFrameData (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifTextConv.h">SdifTextConv.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFTextConvFrameData      (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFTextConvFrameHeader_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFTextConvFrameHeader (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifTextConv.h">SdifTextConv.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFTextConvFrameHeader    (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFTextConvFrame_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFTextConvFrame (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifTextConv.h">SdifTextConv.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFTextConvFrame          (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFTextConvAllFrame_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFTextConvAllFrame (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifTextConv.h">SdifTextConv.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFTextConvAllFrame       (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFTextConvFramesChunk_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFTextConvFramesChunk (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifTextConv.h">SdifTextConv.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFTextConvFramesChunk    (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifFTextConv_(SdifFileT_*SdifF)$"><hr><p></p><h3>size_t SdifFTextConv (SdifFileT *SdifF);</h3></a>
<strong>#include "<a href="SdifTextConv.h">SdifTextConv.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
size_t SdifFTextConv               (SdifFileT *SdifF);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="size_t_SdifTextToSdif_(SdifFileT_*SdifF,_char_*TextStreamName)$"><hr><p></p><h3>size_t SdifTextToSdif (SdifFileT *SdifF, char *TextStreamName);</h3></a>
<strong>#include "<a href="SdifTextConv.h">SdifTextConv.h</a>"</strong><p>
  DOC: 
  Converti un fichier SDIF ouvert en lecture (eReadFile) en un fichier
  texte pseudo-SDIF de nom TextStreamName.    
<p><pre>
size_t SdifTextToSdif (SdifFileT *SdifF, char *TextStreamName);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifTimePositionS_SdifTimePositionT$"><hr><p></p><h3>typedef struct SdifTimePositionS SdifTimePositionT;</h3></a>
<strong>#include "<a href="SdifTimePosition.h">SdifTimePosition.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifTimePositionS SdifTimePositionT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifTimePositionS_$"><hr><p></p><h3>struct SdifTimePositionS ;</h3></a>
<strong>#include "<a href="SdifTimePosition.h">SdifTimePosition.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifTimePositionS
{
  SdifFloat8    Time;
  SdiffPosT     Position;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifTimePositionT*_SdifCreateTimePosition(SdifFloat8_Time,_SdiffPosT_Position)$"><hr><p></p><h3>SdifTimePositionT* SdifCreateTimePosition(SdifFloat8 Time, SdiffPosT Position);</h3></a>
<strong>#include "<a href="SdifTimePosition.h">SdifTimePosition.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifTimePositionT* <a href="#SdifTimePositionT*_SdifCreateTimePosition(SdifFloat8_Time,_SdiffPosT_Position)$">SdifCreateTimePosition</a>(SdifFloat8 Time, SdiffPosT Position);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillTimePosition(void*_TimePosition)$"><hr><p></p><h3>void SdifKillTimePosition(void* TimePosition);</h3></a>
<strong>#include "<a href="SdifTimePosition.h">SdifTimePosition.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void               <a href="#void_SdifKillTimePosition(void*_TimePosition)$">SdifKillTimePosition</a>(void* TimePosition);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="typedef_struct_SdifTimePositionLS_SdifTimePositionLT$"><hr><p></p><h3>typedef struct SdifTimePositionLS SdifTimePositionLT;</h3></a>
<strong>#include "<a href="SdifTimePosition.h">SdifTimePosition.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
typedef struct SdifTimePositionLS SdifTimePositionLT;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="struct_SdifTimePositionLS_$"><hr><p></p><h3>struct SdifTimePositionLS ;</h3></a>
<strong>#include "<a href="SdifTimePosition.h">SdifTimePosition.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
struct SdifTimePositionLS
{
    SdifListT*          TimePosList;
} ;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifTimePositionLT*_SdifCreateTimePositionL(void)$"><hr><p></p><h3>SdifTimePositionLT* SdifCreateTimePositionL(void);</h3></a>
<strong>#include "<a href="SdifTimePosition.h">SdifTimePosition.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifTimePositionLT* <a href="#SdifTimePositionLT*_SdifCreateTimePositionL(void)$">SdifCreateTimePositionL</a>(void);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="void_SdifKillTimePositionL_(SdifTimePositionLT_*TimePositionL)$"><hr><p></p><h3>void SdifKillTimePositionL (SdifTimePositionLT *TimePositionL);</h3></a>
<strong>#include "<a href="SdifTimePosition.h">SdifTimePosition.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
void                SdifKillTimePositionL  (SdifTimePositionLT *TimePositionL);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifTimePositionLT*_SdifTimePositionLPutTail(SdifTimePositionLT*_TimePositionL,_SdifFloat8_Time,_SdiffPosT_Position)$"><hr><p></p><h3>SdifTimePositionLT* SdifTimePositionLPutTail(SdifTimePositionLT* TimePositionL, SdifFloat8 Time, SdiffPosT Position);</h3></a>
<strong>#include "<a href="SdifTimePosition.h">SdifTimePosition.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifTimePositionLT* <a href="#SdifTimePositionLT*_SdifTimePositionLPutTail(SdifTimePositionLT*_TimePositionL,_SdifFloat8_Time,_SdiffPosT_Position)$">SdifTimePositionLPutTail</a>(SdifTimePositionLT* TimePositionL,
                                             SdifFloat8 Time, SdiffPosT Position);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<a name="SdifTimePositionT*_SdifTimePositionLGetTail(SdifTimePositionLT*_TimePositionL)$"><hr><p></p><h3>SdifTimePositionT* SdifTimePositionLGetTail(SdifTimePositionLT* TimePositionL);</h3></a>
<strong>#include "<a href="SdifTimePosition.h">SdifTimePosition.h</a>"</strong><p>
<big>No documentation available.</big><p>
<p><pre>
SdifTimePositionT*  <a href="#SdifTimePositionT*_SdifTimePositionLGetTail(SdifTimePositionLT*_TimePositionL)$">SdifTimePositionLGetTail</a>(SdifTimePositionLT* TimePositionL);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> SDIF </i> <p>
<hr><p></p>
Generated from source by the <i><a href="http://www.stratasys.com/software/cocoon/index.htm">Cocoon</a></i> utilities on Tue Aug 22 21:54:55 2000
.<p>
<address>Report <a href="mailto:jkotula@stratasys.com">problems</a> to jkotula@stratasys.com</address>
