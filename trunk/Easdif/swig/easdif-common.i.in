// $Id: easdif-common.i.in,v 1.3 2003-05-21 20:33:59 roebel Exp $ -*-c-*-
//
// easdif.i		16.04.2003		Diemo Schwarz
//
// Interface file for swig, defining the callable easdif functions
//
// $Log: not supported by cvs2svn $
// Revision 1.2  2003/05/19 14:04:20  roebel
// To resolve problems with inconsistent nameing in interface files
// and header files, swig rename declarations have been changed to use
// %rename instead of %name and have been moved to swig interface description.
// Due to bug in swig const version of GetMatrixWithSig had to be ignored.
//
// Revision 1.1  2003/04/30 11:34:31  tisseran
// Removee file no conform with Diemo's file hierarchy
// Started autoconfiscation of swig directory
//
// Revision 1.10  2003/04/29 16:28:48  schwarz
// Use SWIG_RENAME_EASDIF to control class renaming.
//
// Revision 1.9  2003/04/29 15:20:38  schwarz
// take care of ambiguous definitions (because of swig bug)
//
// Revision 1.8  2003/04/18 17:45:23  schwarz
// Renamed sdifsignature.i to sdiftypemap.i, because all types are in there.
// Include typemap for std::string from SWIG library
// Added typemap freearg SdifStringT *
//
// Revision 1.7  2003/04/18 15:41:18  schwarz
// Don't include all definitions from sdif.h, only the ones needed by
// easdif, defined in sdifdefine.i.  -> smaller wrapper size:
// .cxx	 880k -> 130k
// .o	1000k -> 210k
// .pm	 123k -> 8k
//
// Revision 1.6  2003/04/18 14:31:27  schwarz
// Added typemap for string to SdifSignature conversion (input arg):
// Setting/writing data works --> wrapper complete, but rudimentary.
//
// Revision 1.5  2003/04/17 12:20:39  schwarz
// Output (return value) mapping for SdifSignature works!
//
// Revision 1.4  2003/04/17 11:15:01  schwarz
// Swigging sdif.h works (with some warnings), but that's not yet it...
//
// Revision 1.3  2003/04/17 11:03:52  schwarz
// Swigged all easdif classes!
// Now going on to map sdif basic types.
//
// Revision 1.2  2003/04/17 10:19:51  schwarz
// Nice class and method names using renaming.
//
// Revision 1.1  2003/04/17 09:51:10  schwarz
// First working swig generated perl extension!
// Classes re-declared in easdif.i, simple method without shadow classes.
// Doesn't do much except counting frames.



// include header to make wrapper compile
%{
#include "@EASDIF_INC_DIR@/easdif/easdif.h"

using namespace Easdif;
%}



// change SWIG class names because we prefix with SDIF:: anyway
%rename(Frame)          Easdif::SDIFFrame;
%rename(Entity)         Easdif::SDIFEntity;
%rename(Matrix)         Easdif::SDIFMatrix;
%rename(NameValueTable) Easdif::SDIFNameValueTable;


// would have to zap other constructors, if not, SdifSignature is invisible...
//%ignore SDIFMatrix(const SdifDataTypeET);
//%ignore SDIFMatrix(const SDIFMatrix&);



// have to ignore constructor, because SdifSignature and
// SdifDataTypeET are indistinguishably int for swig
%ignore Easdif::SDIFMatrix::SDIFMatrix(SdifSignature, int, int, SdifDataTypeET);
// have to be ignrored due to bug in swig that does not handle
// correctly the typemap for SdifSignature when resolving overloaded
// functions (here const qualifier)
%ignore Easdif::SDIFFrame::GetMatrixWithSig(const SdifSignature) const;


// read all class definitions
#define SWIG_RENAME_EASDIF
%include "@EASDIF_INC_DIR@/easdif/sdifmatrix.h"
%include "@EASDIF_INC_DIR@/easdif/sdifnamevaluetable.h"
%include "@EASDIF_INC_DIR@/easdif/sdifframe.h"
%include "@EASDIF_INC_DIR@/easdif/sdifexception.h"

// exceptions to be used for entity only
%exception {
        try {
                $action
        } catch(SDIFException e) {
                SWIG_exception(SWIG_IOError,e.getmessage().c_str());
        } catch(...) {
                SWIG_exception(SWIG_UnknownError,"Unknown exception");
        }
}


%include "@EASDIF_INC_DIR@/easdif/sdifentity.h"
